; Assembly listing for method ExpressionUtils:ValidateArgumentTypes(MethodBase,int,byref,String)
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; optimized using profile data
; rsp based frame
; partially interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 213
; 6 inlinees with PGO data; 25 single block inlinees; 0 inlinees without PGO data
; Final local variable assignments
;
;  V00 arg0         [V00,T00] ( 22,  8.99)     ref  ->  rsi         class-hnd single-def
;  V01 arg1         [V01,T03] ( 10,  4.01)     int  ->  rbx         single-def
;  V02 arg2         [V02,T01] ( 12,  4.70)   byref  ->  rdi         single-def
;  V03 arg3         [V03,T05] (  4,  3.01)     ref  ->  rbp         class-hnd single-def
;  V04 loc0         [V04,T15] (  4,  3.01)     ref  ->  r12         class-hnd single-def
;  V05 loc1         [V05,T10] ( 14,  3.71)     ref  ->  r14         class-hnd
;  V06 loc2         [V06,T02] ( 19,  6.81)     int  ->  r15        
;  V07 loc3         [V07,T09] (  5,  3.69)     int  ->  r13        
;  V08 loc4         [V08,T14] ( 10,  3.72)     ref  ->  [rsp+38H]   class-hnd
;* V09 loc5         [V09    ] (  0,  0   )     ref  ->  zero-ref    class-hnd
;  V10 loc6         [V10,T34] ( 12,  0   )     int  ->  [rsp+44H]  
;  V11 OutArgs      [V11    ] (  1,  1   )  lclBlk (56) [rsp+00H]   "OutgoingArgSpace"
;  V12 tmp1         [V12,T38] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V13 tmp2         [V13,T22] (  2,  2.00)     ref  ->  r12         class-hnd single-def "Inline return value spill temp"
;  V14 tmp3         [V14,T19] (  4,  2   )     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;  V15 tmp4         [V15,T23] (  2,  2   )     ref  ->  rdx         class-hnd single-def "Inline return value spill temp"
;  V16 tmp5         [V16,T11] (  4,  3.34)     ref  ->  r14         class-hnd exact "Inline stloc first use temp"
;  V17 tmp6         [V17,T16] (  5,  2.67)     ref  ->  r15         ld-addr-op class-hnd "Inline ldloca(s) first use temp"
;* V18 tmp7         [V18    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "dup spill"
;  V19 tmp8         [V19,T29] (  6,  1.35)     ref  ->  rcx         single-def
;* V20 tmp9         [V20,T48] (  0,  0   )     int  ->  zero-ref   
;  V21 tmp10        [V21,T31] (  3,  0.67)     ref  ->  r15         "guarded devirt return temp"
;* V22 tmp11        [V22    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V23 tmp12        [V23,T30] (  4,  0.67)     ref  ->  rcx         "guarded devirt return temp"
;  V24 tmp13        [V24,T33] (  2,  0.51)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V25 tmp14        [V25,T32] (  3,  0.67)     int  ->  rax         "guarded devirt return temp"
;* V26 tmp15        [V26    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V27 tmp16        [V27,T20] (  3,  2   )    bool  ->  rcx         "Inline return value spill temp"
;  V28 tmp17        [V28,T07] (  2,  4   )     ref  ->  rcx         ld-addr-op class-hnd single-def "Inlining Arg"
;  V29 tmp18        [V29,T13] (  3,  2.96)     int  ->  r15         "Inline stloc first use temp"
;  V30 tmp19        [V30,T24] (  2,  2   )     int  ->  rdx         "Inline stloc first use temp"
;  V31 tmp20        [V31,T06] (  5,  4.47)     ref  ->  r12         class-hnd "Inline stloc first use temp"
;  V32 tmp21        [V32,T27] (  2,  1.51)     ref  ->  rcx         ld-addr-op class-hnd "Inline stloc first use temp"
;  V33 tmp22        [V33,T21] (  3,  2   )     int  ->  r15         "guarded devirt return temp"
;* V34 tmp23        [V34,T25] (  0,  0   )     ref  ->  zero-ref    single-def "guarded devirt this temp"
;* V35 tmp24        [V35    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V36 tmp25        [V36,T26] (  4,  1.51)     int  ->  r15         "guarded devirt return temp"
;  V37 tmp26        [V37,T04] (  5,  4.92)     ref  ->  rcx         single-def "guarded devirt this temp"
;  V38 tmp27        [V38,T28] (  4,  1.47)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;* V39 tmp28        [V39    ] (  0,  0   )   byref  ->  zero-ref    "Inlining Arg"
;* V40 tmp29        [V40    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inlining Arg"
;  V41 tmp30        [V41,T17] (  3,  2.56)     ref  ->  rdx         class-hnd "spilling QMark2"
;  V42 tmp31        [V42,T18] (  5,  2.04)     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;* V43 tmp32        [V43    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;* V44 tmp33        [V44    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V45 tmp34        [V45    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V46 tmp35        [V46    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V47 tmp36        [V47    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inlining Arg"
;* V48 tmp37        [V48    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V49 tmp38        [V49,T08] (  2,  4.00)     int  ->  rax         "Inlining Arg"
;  V50 tmp39        [V50,T39] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V51 tmp40        [V51,T40] (  3,  0   )     ref  ->  rbx         class-hnd exact single-def "NewObj constructor temp"
;  V52 tmp41        [V52,T41] (  3,  0   )     ref  ->  rdi         class-hnd exact single-def "NewObj constructor temp"
;  V53 tmp42        [V53,T35] (  4,  0   )     ref  ->  rbx         class-hnd exact single-def "NewObj constructor temp"
;  V54 tmp43        [V54,T42] (  2,  0   )     ref  ->  rbp         class-hnd single-def "Inlining Arg"
;* V55 tmp44        [V55    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V56 tmp45        [V56    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V57 tmp46        [V57    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V58 tmp47        [V58    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V59 tmp48        [V59,T43] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V60 tmp49        [V60,T44] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V61 tmp50        [V61,T45] (  2,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V62 tmp51        [V62,T46] (  2,  0   )     ref  ->  rsi         single-def "argument with side effect"
;  V63 tmp52        [V63,T47] (  2,  0   )     ref  ->   r8         single-def "argument with side effect"
;  V64 tmp53        [V64,T37] (  4,  0   )    long  ->  rdx         "argument with side effect"
;  V65 tmp54        [V65,T36] (  4,  0   )     ref  ->  rax         "argument with side effect"
;  V66 cse0         [V66,T12] (  3,  3.00)     int  ->  r13         "CSE - moderate"
;
; Lcl frame size = 72

G_M5680_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 72
       mov      rsi, rcx
       ; gcrRegs +[rsi]
       mov      ebx, edx
       mov      rdi, r8
       ; byrRegs +[rdi]
       mov      rbp, r9
       ; gcrRegs +[rbp]
						;; size=27 bbWeight=1    PerfScore 9.25
G_M5680_IG02:        ; gcrefRegs=00000060 {rbp rsi}, byrefRegs=00000080 {rdi}, byref, isz
       mov      rcx, 0xD1FFAB1E      ; const ptr
       mov      r14, gword ptr [rcx]
       ; gcrRegs +[r14]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rcx], rax
       jne      SHORT G_M5680_IG04
						;; size=31 bbWeight=1    PerfScore 6.75
G_M5680_IG03:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref, isz
       ; gcrRegs -[rcx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      r15d, eax
       jmp      SHORT G_M5680_IG05
						;; size=13 bbWeight=0.50 PerfScore 1.75
G_M5680_IG04:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      r15d, eax
						;; size=16 bbWeight=0.50 PerfScore 3.75
G_M5680_IG05:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       mov      edx, r15d
       and      edx, dword ptr [r14+10H]
       mov      rcx, gword ptr [r14+08H]
       ; gcrRegs +[rcx]
       movsxd   rdx, edx
       mov      r8, 0xD1FFAB1E      ; hackishClassName
       call     CORINFO_HELP_LDELEMA_REF
       ; gcrRegs -[rcx]
       ; byrRegs +[rax]
       ; gcr arg pop 0
       mov      r12, gword ptr [rax]
       ; gcrRegs +[r12]
       test     r12, r12
       je       G_M5680_IG28
						;; size=41 bbWeight=1    PerfScore 10.00
G_M5680_IG06:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; byrRegs -[rax]
       cmp      dword ptr [r12+18H], r15d
       jne      G_M5680_IG28
						;; size=11 bbWeight=0.96 PerfScore 3.83
G_M5680_IG07:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, gword ptr [r12+08H]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rcx], rdx
       jne      G_M5680_IG29
						;; size=24 bbWeight=0.76 PerfScore 4.73
G_M5680_IG08:        ; gcrefRegs=00005062 {rcx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rsi], rax
       jne      G_M5680_IG30
						;; size=22 bbWeight=0.57 PerfScore 2.56
G_M5680_IG09:        ; gcrefRegs=00005066 {rcx rdx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref, isz
       test     rdx, rdx
       je       SHORT G_M5680_IG10
       mov      rax, qword ptr [rcx+50H]
       cmp      rax, qword ptr [rdx+50H]
       je       G_M5680_IG27
						;; size=19 bbWeight=0.57 PerfScore 4.12
G_M5680_IG10:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rcx rdx]
       xor      r15d, r15d
						;; size=3 bbWeight=0.40 PerfScore 0.10
G_M5680_IG11:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       test     r15d, r15d
       je       G_M5680_IG28
       mov      r15, gword ptr [r12+10H]
       ; gcrRegs +[r15]
       mov      ecx, 1
						;; size=19 bbWeight=0.76 PerfScore 2.65
G_M5680_IG12:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref, isz
       ; gcrRegs -[r12]
       test     ecx, ecx
       jne      SHORT G_M5680_IG19
						;; size=4 bbWeight=1    PerfScore 1.25
G_M5680_IG13:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r15]
       mov      rcx, 0xD1FFAB1E      ; RuntimeConstructorInfo
       cmp      qword ptr [rsi], rcx
       jne      G_M5680_IG31
						;; size=19 bbWeight=0.34 PerfScore 1.43
G_M5680_IG14:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [RuntimeConstructorInfo:GetParameters():ref:this]
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
						;; size=12 bbWeight=0.21 PerfScore 0.73
G_M5680_IG15:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rsi], rcx
       jne      G_M5680_IG32
						;; size=19 bbWeight=0.34 PerfScore 1.43
G_M5680_IG16:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       cmp      byte  ptr [rcx+8CH], 0
       jne      G_M5680_IG40
       mov      rcx, gword ptr [rsi+38H]
						;; size=24 bbWeight=0.25 PerfScore 2.09
G_M5680_IG17:        ; gcrefRegs=0000C062 {rcx rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref, isz
       test     rcx, rcx
       je       SHORT G_M5680_IG19
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rcx], rax
       jne      G_M5680_IG41
       call     [RuntimeType:get_IsCollectible():bool:this]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
						;; size=30 bbWeight=0.34 PerfScore 2.87
G_M5680_IG18:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref, isz
       test     eax, eax
       jne      SHORT G_M5680_IG19
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      r8, r15
       ; gcrRegs +[r8]
       call     [CacheDict`2:Add(__Canon,__Canon):this]
       ; gcrRegs -[rcx rdx r8 r14]
       ; gcr arg pop 0
						;; size=19 bbWeight=0.34 PerfScore 1.69
G_M5680_IG19:        ; gcrefRegs=00008060 {rbp rsi r15}, byrefRegs=00000080 {rdi}, byref
       mov      rdx, r15
       ; gcrRegs +[rdx]
       cmp      ebx, 50
       je       G_M5680_IG42
						;; size=12 bbWeight=1    PerfScore 1.50
G_M5680_IG20:        ; gcrefRegs=00000064 {rdx rbp rsi}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r15]
       mov      r12, rdx
       ; gcrRegs +[r12]
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      r13d, dword ptr [r12+08H]
       cmp      r13d, eax
       jne      G_M5680_IG43
       xor      r14, r14
       ; gcrRegs +[r14]
       xor      r15d, r15d
       test     r13d, r13d
       jle      G_M5680_IG25
       test     r13d, r13d
       jl       G_M5680_IG33
						;; size=61 bbWeight=1.00 PerfScore 13.75
G_M5680_IG21:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref, isz
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      edx, r15d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+20H], rbp
       ; gcr arg write
       mov      r9, 0xD1FFAB1E      ; string handle
       mov      r9, gword ptr [r9]
       ; gcrRegs +[r9]
       mov      gword ptr [rsp+28H], r9
       ; gcr arg write
       mov      dword ptr [rsp+30H], r15d
       mov      r9d, r15d
       ; gcrRegs -[r9]
       mov      r9, gword ptr [r12+8*r9+10H]
       ; gcrRegs +[r9]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      edx, ebx
       mov      r8, rax
       ; gcrRegs +[r8]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx r8-r9]
       ; gcr arg pop 0
       mov      gword ptr [rsp+38H], rax
       ; GC ptr vars +{V08}
       test     r14, r14
       jne      SHORT G_M5680_IG23
						;; size=83 bbWeight=1.00 PerfScore 21.00
G_M5680_IG22:        ; gcVars=0000000000004000 {V08}, gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; gcrRegs -[rax]
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      edx, r15d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r8, gword ptr [rsp+38H]
       ; gcrRegs +[r8]
       cmp      rax, r8
       mov      gword ptr [rsp+38H], r8
       jne      G_M5680_IG48
						;; size=42 bbWeight=0.69 PerfScore 7.39
G_M5680_IG23:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax r8]
       test     r14, r14
       jne      G_M5680_IG51
						;; size=9 bbWeight=0.69 PerfScore 0.86
G_M5680_IG24:        ; gcVars=0000000000000000 {}, gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; GC ptr vars -{V08}
       inc      r15d
       cmp      r15d, r13d
       jl       G_M5680_IG21
						;; size=12 bbWeight=0.69 PerfScore 1.03
G_M5680_IG25:        ; gcrefRegs=00004000 {r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rbp rsi r12]
       test     r14, r14
       jne      G_M5680_IG39
						;; size=9 bbWeight=1.00 PerfScore 1.26
G_M5680_IG26:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, epilog, nogc
       ; gcrRegs -[r14]
       ; byrRegs -[rdi]
       add      rsp, 72
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=1.00 PerfScore 5.27
G_M5680_IG27:        ; gcVars=0000000000000000 {}, gcrefRegs=00005066 {rcx rdx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; gcrRegs +[rcx rdx rbp rsi r12 r14]
       ; byrRegs +[rdi]
       mov      rax, gword ptr [rcx+38H]
       ; gcrRegs +[rax]
       cmp      rax, gword ptr [rdx+38H]
       jne      G_M5680_IG10
       mov      rcx, gword ptr [rcx+08H]
       mov      rcx, gword ptr [rcx+08H]
       mov      rdx, gword ptr [rdx+08H]
       xor      r15d, r15d
       cmp      rcx, gword ptr [rdx+08H]
       sete     r15b
       jmp      G_M5680_IG11
						;; size=42 bbWeight=0.17 PerfScore 3.08
G_M5680_IG28:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax rcx rdx r12]
       xor      r15, r15
       ; gcrRegs +[r15]
       xor      ecx, ecx
       jmp      G_M5680_IG12
						;; size=10 bbWeight=0.24 PerfScore 0.61
G_M5680_IG29:        ; gcrefRegs=00005062 {rcx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r15] +[rcx r12]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+10H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      r15d, eax
       jmp      G_M5680_IG11
						;; size=21 bbWeight=0.19 PerfScore 1.80
G_M5680_IG30:        ; gcrefRegs=00005062 {rcx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs +[rcx]
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       jmp      G_M5680_IG09
						;; size=7 bbWeight=0.14 PerfScore 0.32
G_M5680_IG31:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rcx rdx r12]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+50H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       jmp      G_M5680_IG15
						;; size=21 bbWeight=0.13 PerfScore 1.22
G_M5680_IG32:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       jmp      G_M5680_IG17
						;; size=21 bbWeight=0.08 PerfScore 0.80
G_M5680_IG33:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref, isz
       ; gcrRegs -[rax rcx r15] +[r12]
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      edx, r15d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+20H], rbp
       ; gcr arg write
       mov      r9, 0xD1FFAB1E      ; string handle
       mov      r9, gword ptr [r9]
       ; gcrRegs +[r9]
       mov      gword ptr [rsp+28H], r9
       ; gcr arg write
       mov      dword ptr [rsp+30H], r15d
       mov      r9d, r15d
       ; gcrRegs -[r9]
       mov      r9, gword ptr [r12+8*r9+10H]
       ; gcrRegs +[r9]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      edx, ebx
       mov      r8, rax
       ; gcrRegs +[r8]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx r8-r9]
       ; gcr arg pop 0
       mov      gword ptr [rsp+38H], rax
       ; GC ptr vars +{V08}
       test     r14, r14
       jne      SHORT G_M5680_IG38
						;; size=83 bbWeight=0.01 PerfScore 0.21
G_M5680_IG34:        ; gcVars=0000000000004000 {V08}, gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; gcrRegs -[rax]
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      edx, r15d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       cmp      rax, gword ptr [rsp+38H]
       jne      G_M5680_IG52
						;; size=34 bbWeight=0.01 PerfScore 0.07
G_M5680_IG35:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax]
       mov      rax, gword ptr [rsp+38H]
       ; gcrRegs +[rax]
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M5680_IG36:        ; gcVars=0000000000000000 {}, gcrefRegs=00005061 {rax rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; GC ptr vars -{V08}
       test     r14, r14
       jne      G_M5680_IG55
						;; size=9 bbWeight=0.01 PerfScore 0.01
G_M5680_IG37:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax]
       inc      r15d
       cmp      r15d, r13d
       jl       G_M5680_IG33
       jmp      G_M5680_IG25
						;; size=17 bbWeight=0.01 PerfScore 0.02
G_M5680_IG38:        ; gcVars=0000000000004000 {V08}, gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, gcvars, byref, isz
       ; GC ptr vars +{V08 V14}
       mov      rax, gword ptr [rsp+38H]
       ; gcrRegs +[rax]
       jmp      SHORT G_M5680_IG36
						;; size=7 bbWeight=0.01 PerfScore 0.02
G_M5680_IG39:        ; gcVars=0000000000000000 {}, gcrefRegs=00004000 {r14}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; gcrRegs -[rax rbp rsi r12]
       ; GC ptr vars -{V08 V14}
       mov      rcx, 0xD1FFAB1E      ; TrueReadOnlyCollection`1
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r14
       ; gcrRegs +[rdx]
       call     [ReadOnlyCollection`1:.ctor(IList`1):this]
       ; gcrRegs -[rax rcx rdx r14]
       ; gcr arg pop 0
       mov      rcx, rdi
       ; byrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       ; gcrRegs -[rdx rsi]
       ; byrRegs -[rcx rdi]
       jmp      G_M5680_IG26
						;; size=46 bbWeight=0    PerfScore 0.00
G_M5680_IG40:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs +[rbp rsi r14-r15]
       ; byrRegs +[rdi]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       jmp      G_M5680_IG17
						;; size=7 bbWeight=0    PerfScore 0.00
G_M5680_IG41:        ; gcrefRegs=0000C062 {rcx rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+50H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       jmp      G_M5680_IG18
						;; size=14 bbWeight=0    PerfScore 0.00
G_M5680_IG42:        ; gcrefRegs=00000064 {rdx rbp rsi}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r14-r15] +[rdx]
       mov      rcx, 0xD1FFAB1E      ; hackishModuleName:hackishMethodName()
       call     [CollectionExtensions:RemoveFirst(ref):ref]
       ; gcrRegs -[rdx] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       jmp      G_M5680_IG20
						;; size=24 bbWeight=0    PerfScore 0.00
G_M5680_IG43:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rdx rbp]
       ; byrRegs -[rdi]
       cmp      ebx, 17
       jg       SHORT G_M5680_IG44
       cmp      ebx, 6
       je       G_M5680_IG46
       cmp      ebx, 17
       jne      G_M5680_IG47
       mov      rcx, 0xD1FFAB1E      ; InvalidOperationException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs -[rsi] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      ecx, 0x20FF
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     [InvalidOperationException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rbx]
       ; gcr arg pop 0
						;; size=90 bbWeight=0    PerfScore 0.00
G_M5680_IG44:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[rsi]
       cmp      ebx, 31
       je       SHORT G_M5680_IG45
       cmp      ebx, 50
       je       SHORT G_M5680_IG46
       jmp      G_M5680_IG47
						;; size=15 bbWeight=0    PerfScore 0.00
G_M5680_IG45:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x2141
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=67 bbWeight=0    PerfScore 0.00
G_M5680_IG46:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rsi]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0x20B5
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     [SR:Format(String,Object):String]
       ; gcrRegs -[rcx rdx rsi]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x2CD9
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String,String):this]
       ; gcrRegs -[rax rcx rdx rsi r8]
       ; gcr arg pop 0
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rdi]
       ; gcr arg pop 0
						;; size=105 bbWeight=0    PerfScore 0.00
G_M5680_IG47:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; UnreachableException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      ecx, 0x5801
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     [Exception:.ctor():this]
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
       lea      rcx, bword ptr [rbx+10H]
       ; byrRegs +[rcx]
       mov      rdx, rbp
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx rbp]
       ; byrRegs -[rcx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rbx]
       ; gcr arg pop 0
						;; size=79 bbWeight=0    PerfScore 0.00
G_M5680_IG48:        ; gcVars=0000000000004000 {V08}, gcrefRegs=00001060 {rbp rsi r12}, byrefRegs=00000080 {rdi}, gcvars, byref, isz
       ; gcrRegs +[rbp rsi r12]
       ; byrRegs +[rdi]
       ; GC ptr vars +{V08 V14}
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       movsxd   rdx, eax
       mov      rcx, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_OBJ
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       xor      eax, eax
       ; gcrRegs -[rax]
       jmp      SHORT G_M5680_IG50
						;; size=45 bbWeight=0    PerfScore 0.00
G_M5680_IG49:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      dword ptr [rsp+44H], eax
       mov      edx, eax
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      eax, dword ptr [rsp+44H]
       ; gcrRegs -[rax]
       movsxd   rdx, eax
       mov      rcx, r14
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       mov      eax, dword ptr [rsp+44H]
       inc      eax
						;; size=50 bbWeight=0    PerfScore 0.00
G_M5680_IG50:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref, isz
       cmp      eax, r15d
       jl       SHORT G_M5680_IG49
       jmp      G_M5680_IG23
						;; size=10 bbWeight=0    PerfScore 0.00
G_M5680_IG51:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       mov      rax, gword ptr [rsp+38H]
       ; gcrRegs +[rax]
       movsxd   rdx, r15d
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      r8, rax
       ; gcrRegs +[r8]
       ; GC ptr vars -{V08 V14}
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rax rcx r8]
       ; gcr arg pop 0
       jmp      G_M5680_IG24
						;; size=24 bbWeight=0    PerfScore 0.00
G_M5680_IG52:        ; gcVars=0000000000004000 {V08}, gcrefRegs=00001060 {rbp rsi r12}, byrefRegs=00000080 {rdi}, gcvars, byref, isz
       ; gcrRegs -[r14]
       ; GC ptr vars +{V08 V14}
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       movsxd   rdx, eax
       mov      rcx, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_OBJ
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       xor      eax, eax
       ; gcrRegs -[rax]
       jmp      SHORT G_M5680_IG54
						;; size=45 bbWeight=0    PerfScore 0.00
G_M5680_IG53:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      dword ptr [rsp+44H], eax
       mov      edx, eax
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      eax, dword ptr [rsp+44H]
       ; gcrRegs -[rax]
       movsxd   rdx, eax
       mov      rcx, r14
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       mov      edx, dword ptr [rsp+44H]
       inc      edx
       mov      eax, edx
						;; size=52 bbWeight=0    PerfScore 0.00
G_M5680_IG54:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref, isz
       cmp      eax, r15d
       jl       SHORT G_M5680_IG53
       test     r14, r14
       mov      rax, gword ptr [rsp+38H]
       ; gcrRegs +[rax]
       je       G_M5680_IG37
						;; size=19 bbWeight=0    PerfScore 0.00
G_M5680_IG55:        ; gcVars=0000000000000000 {}, gcrefRegs=00005061 {rax rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; GC ptr vars -{V08 V14}
       movsxd   rdx, r15d
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      r8, rax
       ; gcrRegs +[r8]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rax rcx r8]
       ; gcr arg pop 0
       jmp      G_M5680_IG37
						;; size=19 bbWeight=0    PerfScore 0.00

; Total bytes of code 1586, prolog size 16, PerfScore 279.81, instruction count 375, allocated bytes for code 1586 (MethodHash=fd94e9cf) for method ExpressionUtils:ValidateArgumentTypes(MethodBase,int,byref,String)
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x10
  CountOfUnwindCodes: 9
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x10 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 8 * 8 + 8 = 72 = 0x48
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x08 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
