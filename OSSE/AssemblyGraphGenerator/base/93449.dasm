; Assembly listing for method Dictionary`2:Resize(int,bool):this
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; optimized using profile data
; rsp based frame
; fully interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 271367
; 0 inlinees with PGO data; 4 single block inlinees; 0 inlinees without PGO data
; Final local variable assignments
;
;  V00 this         [V00,T09] ( 12,125.59)     ref  ->  rsi         this class-hnd single-def
;  V01 arg1         [V01,T11] (  5,  5.03)     int  ->  rdi         single-def
;* V02 arg2         [V02    ] (  0,  0   )    bool  ->  zero-ref    single-def
;  V03 loc0         [V03,T05] (  9,179.72)     ref  ->  rbx         class-hnd exact single-def
;  V04 loc1         [V04,T10] (  7, 63.78)     int  ->  rbp        
;* V05 loc2         [V05    ] (  0,  0   )     int  ->  zero-ref   
;  V06 loc3         [V06,T01] ( 12,295.31)     int  ->  rdx        
;* V07 loc4         [V07    ] (  0,  0   )   byref  ->  zero-ref   
;  V08 OutArgs      [V08    ] (  1,  1   )  lclBlk (32) [rsp+00H]   "OutgoingArgSpace"
;* V09 tmp1         [V09    ] (  0,  0   )   byref  ->  zero-ref    "non-inline candidate call"
;* V10 tmp2         [V10    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;  V11 tmp3         [V11,T06] (  6,176.28)   byref  ->  rax         "Inline return value spill temp"
;  V12 tmp4         [V12,T07] (  6,176.28)     ref  ->   r8         class-hnd "Inline stloc first use temp"
;  V13 tmp5         [V13,T02] (  4,235.04)     int  ->  rax         "Inlining Arg"
;* V14 tmp6         [V14    ] (  0,  0   )    long  ->  zero-ref    "Inlining Arg"
;  V15 tmp7         [V15,T03] (  4,235.04)     int  ->  r10         "Inlining Arg"
;* V16 tmp8         [V16    ] (  0,  0   )     int  ->  zero-ref    "Inline stloc first use temp"
;* V17 tmp9         [V17    ] (  0,  0   )     ref  ->  zero-ref    "argument with side effect"
;* V18 tmp10        [V18    ] (  0,  0   )     ref  ->  zero-ref    "argument with side effect"
;* V19 tmp11        [V19    ] (  0,  0   )  struct (16) zero-ref    do-not-enreg[XS] must-init addr-exposed "by-value struct argument"
;* V20 tmp12        [V20    ] (  0,  0   )     ref  ->  zero-ref    "argument with side effect"
;  V21 tmp13        [V21,T00] (  6,352.56)     int  ->  rax         "index expr"
;  V22 cse0         [V22,T12] (  4,  2.35)   byref  ->  rcx         "CSE - aggressive"
;  V23 cse1         [V23,T04] (  4,232.64)    long  ->  rcx         "CSE - aggressive"
;  V24 cse2         [V24,T08] (  3,174.52)     int  ->   r9         "CSE - aggressive"
;  V25 cse3         [V25,T13] (  3,  1.76)     int  ->   r9         "CSE - moderate"
;
; Lcl frame size = 56

G_M42708_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 56
       xor      eax, eax
       mov      qword ptr [rsp+20H], rax
       mov      qword ptr [rsp+30H], rcx
       mov      rsi, rcx
       ; gcrRegs +[rsi]
       mov      edi, edx
						;; size=25 bbWeight=1.01 PerfScore 7.07
G_M42708_IG02:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      rcx, qword ptr [rsi]
       movsxd   rdx, edi
       call     CORINFO_HELP_NEWARR_1_VC
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      ebp, dword ptr [rsi+38H]
       mov      rcx, gword ptr [rsi+10H]
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      r8d, ebp
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       movsxd   rdx, edi
       mov      rcx, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_VC
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       lea      rcx, bword ptr [rsi+08H]
       ; byrRegs +[rcx]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rax rdx]
       ; byrRegs -[rcx]
       mov      rax, -1
       mov      ecx, edi
       xor      edx, edx
       div      rdx:rax, rcx
       inc      rax
       mov      qword ptr [rsi+30H], rax
       xor      edx, edx
       test     ebp, ebp
       jle      G_M42708_IG10
       test     ebp, ebp
       jl       SHORT G_M42708_IG07
       cmp      dword ptr [rbx+08H], ebp
       jl       SHORT G_M42708_IG07
       align    [0 bytes for IG03]
						;; size=106 bbWeight=1.01 PerfScore 84.79
G_M42708_IG03:        ; gcrefRegs=00000048 {rbx rsi}, byrefRegs=00000000 {}, byref, isz
       mov      ecx, edx
       shl      rcx, 5
       cmp      dword ptr [rbx+rcx+1CH], -1
       jl       SHORT G_M42708_IG05
						;; size=13 bbWeight=58.15 PerfScore 276.21
G_M42708_IG04:        ; gcrefRegs=00000048 {rbx rsi}, byrefRegs=00000000 {}, byref
       mov      eax, dword ptr [rbx+rcx+18H]
       mov      r8, gword ptr [rsi+08H]
       ; gcrRegs +[r8]
       mov      r9d, dword ptr [r8+08H]
       mov      r10d, r9d
       mov      eax, eax
       imul     rax, qword ptr [rsi+30H]
       shr      rax, 32
       inc      rax
       mov      r10d, r10d
       imul     rax, r10
       shr      rax, 32
       cmp      eax, r9d
       jae      G_M42708_IG12
       mov      eax, eax
       lea      rax, bword ptr [r8+4*rax+10H]
       ; byrRegs +[rax]
       mov      r8d, dword ptr [rax]
       ; gcrRegs -[r8]
       dec      r8d
       mov      dword ptr [rbx+rcx+1CH], r8d
       lea      ecx, [rdx+01H]
       mov      dword ptr [rax], ecx
						;; size=72 bbWeight=58.17 PerfScore 1294.33
G_M42708_IG05:        ; gcrefRegs=00000048 {rbx rsi}, byrefRegs=00000000 {}, loop=IG03, byref, isz
       ; byrRegs -[rax]
       inc      edx
       cmp      edx, ebp
       jl       SHORT G_M42708_IG03
						;; size=6 bbWeight=58.15 PerfScore 87.22
G_M42708_IG06:        ; gcrefRegs=00000048 {rbx rsi}, byrefRegs=00000000 {}, byref, isz
       jmp      SHORT G_M42708_IG10
						;; size=2 bbWeight=1.01 PerfScore 2.02
G_M42708_IG07:        ; gcrefRegs=00000048 {rbx rsi}, byrefRegs=00000000 {}, byref, isz
       cmp      edx, dword ptr [rbx+08H]
       jae      SHORT G_M42708_IG12
       mov      eax, edx
       shl      rax, 5
       lea      rcx, bword ptr [rbx+rax+10H]
       ; byrRegs +[rcx]
       cmp      dword ptr [rcx+0CH], -1
       jl       SHORT G_M42708_IG09
						;; size=22 bbWeight=0.59 PerfScore 5.73
G_M42708_IG08:        ; gcrefRegs=00000048 {rbx rsi}, byrefRegs=00000002 {rcx}, byref, isz
       mov      eax, dword ptr [rcx+08H]
       mov      r8, gword ptr [rsi+08H]
       ; gcrRegs +[r8]
       mov      r9d, dword ptr [r8+08H]
       mov      r10d, r9d
       mov      eax, eax
       imul     rax, qword ptr [rsi+30H]
       shr      rax, 32
       inc      rax
       mov      r10d, r10d
       imul     rax, r10
       shr      rax, 32
       cmp      eax, r9d
       jae      SHORT G_M42708_IG12
       mov      eax, eax
       lea      rax, bword ptr [r8+4*rax+10H]
       ; byrRegs +[rax]
       mov      r8d, dword ptr [rax]
       ; gcrRegs -[r8]
       dec      r8d
       mov      dword ptr [rcx+0CH], r8d
       lea      ecx, [rdx+01H]
       ; byrRegs -[rcx]
       mov      dword ptr [rax], ecx
						;; size=66 bbWeight=0.59 PerfScore 13.07
G_M42708_IG09:        ; gcrefRegs=00000048 {rbx rsi}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rax]
       inc      edx
       cmp      edx, ebp
       jl       SHORT G_M42708_IG07
						;; size=6 bbWeight=0.59 PerfScore 0.88
G_M42708_IG10:        ; gcrefRegs=00000048 {rbx rsi}, byrefRegs=00000000 {}, byref
       lea      rcx, bword ptr [rsi+10H]
       ; byrRegs +[rcx]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx rbx]
       ; byrRegs -[rcx]
       nop      
						;; size=13 bbWeight=1.02 PerfScore 2.04
G_M42708_IG11:        ; , epilog, nogc, extend
       add      rsp, 56
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       ret      
						;; size=9 bbWeight=1.02 PerfScore 3.31
G_M42708_IG12:        ; gcVars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, gcvars, byref
       call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
       int3     
						;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 346, prolog size 25, PerfScore 1811.27, instruction count 109, allocated bytes for code 346 (MethodHash=e780592b) for method Dictionary`2:Resize(int,bool):this
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x08
  CountOfUnwindCodes: 5
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x08 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 6 * 8 + 8 = 56 = 0x38
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
