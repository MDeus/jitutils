; Assembly listing for method ExpressionUtils:ValidateArgumentTypes(MethodBase,int,byref,String)
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; optimized using profile data
; rsp based frame
; partially interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 213
; 7 inlinees with PGO data; 38 single block inlinees; 0 inlinees without PGO data
; Final local variable assignments
;
;  V00 arg0         [V00,T01] ( 23,  9.45)     ref  ->  rsi         class-hnd single-def
;  V01 arg1         [V01,T04] ( 10,  4.01)     int  ->  rbx         single-def
;  V02 arg2         [V02,T02] ( 12,  4.70)   byref  ->  rdi         single-def
;  V03 arg3         [V03,T06] (  4,  3.01)     ref  ->  rbp         class-hnd single-def
;  V04 loc0         [V04,T18] (  4,  3.01)     ref  ->  r12         class-hnd single-def
;  V05 loc1         [V05,T11] ( 13,  3.70)     ref  ->  r15         class-hnd
;  V06 loc2         [V06,T03] ( 19,  6.81)     int  ->  r14        
;  V07 loc3         [V07,T10] (  5,  3.69)     int  ->  r13        
;  V08 loc4         [V08,T16] ( 10,  3.72)     ref  ->  [rsp+38H]   class-hnd
;* V09 loc5         [V09    ] (  0,  0   )     ref  ->  zero-ref    class-hnd
;  V10 loc6         [V10,T44] ( 12,  0   )     int  ->  [rsp+44H]  
;  V11 OutArgs      [V11    ] (  1,  1   )  lclBlk (56) [rsp+00H]   "OutgoingArgSpace"
;  V12 tmp1         [V12,T48] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V13 tmp2         [V13,T28] (  2,  2   )     ref  ->  r12         class-hnd single-def "Inline return value spill temp"
;  V14 tmp3         [V14,T25] (  4,  2   )     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;  V15 tmp4         [V15,T29] (  2,  2   )     ref  ->  rdx         class-hnd single-def "Inline return value spill temp"
;  V16 tmp5         [V16,T12] (  4,  3.32)     ref  ->  r14         class-hnd exact "Inline stloc first use temp"
;  V17 tmp6         [V17,T17] (  6,  2.73)     ref  ->  r15         ld-addr-op class-hnd "Inline ldloca(s) first use temp"
;* V18 tmp7         [V18    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "dup spill"
;  V19 tmp8         [V19,T37] (  6,  1.29)     ref  ->  rcx         single-def
;* V20 tmp9         [V20,T43] (  0,  0   )     int  ->  zero-ref   
;  V21 tmp10        [V21,T39] (  4,  0.81)     ref  ->  r15         "guarded devirt return temp"
;* V22 tmp11        [V22    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V23 tmp12        [V23,T40] (  4,  0.65)     ref  ->  rcx         "guarded devirt return temp"
;  V24 tmp13        [V24,T42] (  2,  0.49)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V25 tmp14        [V25,T41] (  3,  0.65)     int  ->  rax         "guarded devirt return temp"
;* V26 tmp15        [V26    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V27 tmp16        [V27,T26] (  3,  2   )    bool  ->  rcx         "Inline return value spill temp"
;  V28 tmp17        [V28,T08] (  2,  4   )     ref  ->  rcx         ld-addr-op class-hnd single-def "Inlining Arg"
;  V29 tmp18        [V29,T15] (  3,  2.96)     int  ->  r15         "Inline stloc first use temp"
;  V30 tmp19        [V30,T30] (  2,  2   )     int  ->  rdx         "Inline stloc first use temp"
;  V31 tmp20        [V31,T07] (  5,  4.49)     ref  ->  r12         class-hnd "Inline stloc first use temp"
;  V32 tmp21        [V32,T35] (  2,  1.53)     ref  ->  rcx         ld-addr-op class-hnd "Inline stloc first use temp"
;  V33 tmp22        [V33,T27] (  3,  2   )     int  ->  r15         "guarded devirt return temp"
;* V34 tmp23        [V34,T31] (  0,  0   )     ref  ->  zero-ref    single-def "guarded devirt this temp"
;* V35 tmp24        [V35    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V36 tmp25        [V36,T34] (  4,  1.71)     int  ->  r15         "guarded devirt return temp"
;  V37 tmp26        [V37,T05] (  5,  4.98)     ref  ->  rcx         single-def "guarded devirt this temp"
;  V38 tmp27        [V38,T36] (  4,  1.50)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V39 tmp28        [V39,T20] (  2,  2.48)     int  ->  rax         "impAppendStmt"
;  V40 tmp29        [V40,T38] (  2,  1.24)    long  ->  rcx         ld-addr-op "Inline stloc first use temp"
;* V41 tmp30        [V41    ] (  0,  0   )   byref  ->  zero-ref    "Inlining Arg"
;  V42 tmp31        [V42,T32] (  3,  1.86)    long  ->  rcx         ld-addr-op "Inline stloc first use temp"
;* V43 tmp32        [V43    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V44 tmp33        [V44,T33] (  3,  1.86)    long  ->  rcx         ld-addr-op "Inline stloc first use temp"
;* V45 tmp34        [V45    ] (  0,  0   )     int  ->  zero-ref    ld-addr-op "Inlining Arg"
;* V46 tmp35        [V46    ] (  0,  0   )     int  ->  zero-ref   
;* V47 tmp36        [V47    ] (  0,  0   )     int  ->  zero-ref    "Inline stloc first use temp"
;  V48 tmp37        [V48,T21] (  2,  2.48)     int  ->  rdx         ld-addr-op "Inlining Arg"
;* V49 tmp38        [V49    ] (  0,  0   )     int  ->  zero-ref   
;* V50 tmp39        [V50    ] (  0,  0   )     int  ->  zero-ref    "Inline stloc first use temp"
;  V51 tmp40        [V51,T13] (  5,  3.10)     int  ->  rcx         "Inline stloc first use temp"
;  V52 tmp41        [V52,T22] (  2,  2.48)     int  ->  rcx         "Inlining Arg"
;  V53 tmp42        [V53,T23] (  2,  2.48)     int  ->  rcx         "Inlining Arg"
;  V54 tmp43        [V54,T00] ( 12, 14.88)     int  ->  rax         "Inlining Arg"
;* V55 tmp44        [V55    ] (  0,  0   )   byref  ->  zero-ref    "Inlining Arg"
;* V56 tmp45        [V56    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inlining Arg"
;  V57 tmp46        [V57,T19] (  3,  2.59)     ref  ->  rdx         class-hnd "spilling QMark2"
;  V58 tmp47        [V58,T24] (  5,  2.07)     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;* V59 tmp48        [V59    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;* V60 tmp49        [V60    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V61 tmp50        [V61    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V62 tmp51        [V62    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V63 tmp52        [V63    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inlining Arg"
;* V64 tmp53        [V64    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V65 tmp54        [V65,T09] (  2,  4   )     int  ->  rax         "Inlining Arg"
;  V66 tmp55        [V66,T49] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V67 tmp56        [V67,T50] (  3,  0   )     ref  ->  rbx         class-hnd exact single-def "NewObj constructor temp"
;  V68 tmp57        [V68,T51] (  3,  0   )     ref  ->  rdi         class-hnd exact single-def "NewObj constructor temp"
;  V69 tmp58        [V69,T45] (  4,  0   )     ref  ->  rbx         class-hnd exact single-def "NewObj constructor temp"
;  V70 tmp59        [V70,T52] (  2,  0   )     ref  ->  rbp         class-hnd single-def "Inlining Arg"
;* V71 tmp60        [V71    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V72 tmp61        [V72    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V73 tmp62        [V73    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V74 tmp63        [V74    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V75 tmp64        [V75,T53] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V76 tmp65        [V76,T54] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V77 tmp66        [V77,T55] (  2,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V78 tmp67        [V78,T56] (  2,  0   )     ref  ->  rsi         single-def "argument with side effect"
;  V79 tmp68        [V79,T57] (  2,  0   )     ref  ->   r8         single-def "argument with side effect"
;  V80 tmp69        [V80,T47] (  4,  0   )    long  ->  rdx         "argument with side effect"
;  V81 tmp70        [V81,T46] (  4,  0   )     ref  ->  rax         "argument with side effect"
;  V82 cse0         [V82,T14] (  3,  3   )     int  ->  r13         "CSE - aggressive"
;
; Lcl frame size = 72

G_M5680_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 72
       mov      rsi, rcx
       ; gcrRegs +[rsi]
       mov      ebx, edx
       mov      rdi, r8
       ; byrRegs +[rdi]
       mov      rbp, r9
       ; gcrRegs +[rbp]
						;; size=27 bbWeight=1    PerfScore 9.25
G_M5680_IG02:        ; gcrefRegs=00000060 {rbp rsi}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, 0xD1FFAB1E      ; const ptr
       mov      r14, gword ptr [rcx]
       ; gcrRegs +[r14]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rcx], rax
       jne      G_M5680_IG23
						;; size=35 bbWeight=1    PerfScore 6.75
G_M5680_IG03:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rcx]
       mov      rcx, qword ptr [rsi+50H]
       mov      rax, rcx
       sar      rax, 32
       xor      eax, ecx
       mov      rcx, gword ptr [rsi+38H]
       ; gcrRegs +[rcx]
       mov      rcx, qword ptr [rcx+18H]
       ; gcrRegs -[rcx]
       mov      rdx, rcx
       sar      rdx, 32
       xor      edx, ecx
       imul     ecx, eax, 0xD1FFAB1E
       add      ecx, 0xD1FFAB1E
       rol      ecx, 17
       imul     ecx, ecx, 0xD1FFAB1E
       imul     eax, edx, 0xD1FFAB1E
       add      ecx, eax
       rol      ecx, 17
       imul     ecx, ecx, 0xD1FFAB1E
       mov      eax, ecx
       shr      eax, 15
       xor      eax, ecx
       imul     eax, eax, 0xD1FFAB1E
       mov      ecx, eax
       shr      ecx, 13
       xor      eax, ecx
       imul     eax, eax, 0xD1FFAB1E
       mov      ecx, eax
       shr      ecx, 16
       xor      eax, ecx
       mov      r15d, eax
						;; size=104 bbWeight=0.62 PerfScore 15.34
G_M5680_IG04:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       mov      edx, r15d
       and      edx, dword ptr [r14+10H]
       mov      rcx, gword ptr [r14+08H]
       ; gcrRegs +[rcx]
       movsxd   rdx, edx
       mov      r8, 0xD1FFAB1E      ; hackishClassName
       call     CORINFO_HELP_LDELEMA_REF
       ; gcrRegs -[rcx]
       ; byrRegs +[rax]
       ; gcr arg pop 0
       mov      r12, gword ptr [rax]
       ; gcrRegs +[r12]
       test     r12, r12
       je       G_M5680_IG31
						;; size=41 bbWeight=1    PerfScore 10.00
G_M5680_IG05:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; byrRegs -[rax]
       cmp      dword ptr [r12+18H], r15d
       jne      G_M5680_IG31
						;; size=11 bbWeight=0.96 PerfScore 3.83
G_M5680_IG06:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, gword ptr [r12+08H]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rcx], rdx
       jne      G_M5680_IG32
						;; size=24 bbWeight=0.77 PerfScore 4.79
G_M5680_IG07:        ; gcrefRegs=00005062 {rcx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rsi], rax
       jne      G_M5680_IG27
						;; size=22 bbWeight=0.58 PerfScore 2.59
G_M5680_IG08:        ; gcrefRegs=00005066 {rcx rdx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref, isz
       test     rdx, rdx
       je       SHORT G_M5680_IG09
       mov      rax, qword ptr [rcx+50H]
       cmp      rax, qword ptr [rdx+50H]
       je       G_M5680_IG22
						;; size=19 bbWeight=0.58 PerfScore 4.17
G_M5680_IG09:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rcx rdx]
       xor      r15d, r15d
						;; size=3 bbWeight=0.58 PerfScore 0.14
G_M5680_IG10:        ; gcrefRegs=00005060 {rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       test     r15d, r15d
       je       G_M5680_IG31
       mov      r15, gword ptr [r12+10H]
       ; gcrRegs +[r15]
       mov      ecx, 1
						;; size=19 bbWeight=0.77 PerfScore 2.68
G_M5680_IG11:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r12]
       test     ecx, ecx
       je       G_M5680_IG20
						;; size=8 bbWeight=1    PerfScore 1.25
G_M5680_IG12:        ; gcrefRegs=00008060 {rbp rsi r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r14]
       mov      rdx, r15
       ; gcrRegs +[rdx]
       cmp      ebx, 50
       je       G_M5680_IG41
						;; size=12 bbWeight=1    PerfScore 1.50
G_M5680_IG13:        ; gcrefRegs=00000064 {rdx rbp rsi}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r15]
       mov      r12, rdx
       ; gcrRegs +[r12]
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      r13d, dword ptr [r12+08H]
       cmp      r13d, eax
       jne      G_M5680_IG42
       xor      r15, r15
       ; gcrRegs +[r15]
       xor      r14d, r14d
       test     r13d, r13d
       jle      G_M5680_IG18
       test     r13d, r13d
       jl       G_M5680_IG34
						;; size=61 bbWeight=1    PerfScore 13.75
G_M5680_IG14:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref, isz
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      edx, r14d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+20H], rbp
       ; gcr arg write
       mov      r9, 0xD1FFAB1E      ; string handle
       mov      r9, gword ptr [r9]
       ; gcrRegs +[r9]
       mov      gword ptr [rsp+28H], r9
       ; gcr arg write
       mov      dword ptr [rsp+30H], r14d
       mov      r9d, r14d
       ; gcrRegs -[r9]
       mov      r9, gword ptr [r12+8*r9+10H]
       ; gcrRegs +[r9]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      edx, ebx
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r8-r9] +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+38H], rax
       ; GC ptr vars +{V08}
       test     r15, r15
       jne      SHORT G_M5680_IG16
						;; size=89 bbWeight=1    PerfScore 21.25
G_M5680_IG15:        ; gcVars=0000000000010000 {V08}, gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; gcrRegs -[rax]
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      edx, r14d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r8, gword ptr [rsp+38H]
       ; gcrRegs +[r8]
       cmp      rax, r8
       mov      gword ptr [rsp+38H], r8
       jne      G_M5680_IG47
						;; size=42 bbWeight=0.69 PerfScore 7.39
G_M5680_IG16:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax r8]
       test     r15, r15
       jne      G_M5680_IG50
						;; size=9 bbWeight=0.69 PerfScore 0.86
G_M5680_IG17:        ; gcVars=0000000000000000 {}, gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; GC ptr vars -{V08}
       inc      r14d
       cmp      r14d, r13d
       jl       G_M5680_IG14
						;; size=12 bbWeight=0.69 PerfScore 1.03
G_M5680_IG18:        ; gcrefRegs=00008000 {r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rbp rsi r12]
       test     r15, r15
       jne      G_M5680_IG55
						;; size=9 bbWeight=1    PerfScore 1.25
G_M5680_IG19:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, epilog, nogc
       ; gcrRegs -[r15]
       ; byrRegs -[rdi]
       add      rsp, 72
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=1    PerfScore 5.25
G_M5680_IG20:        ; gcVars=0000000000000000 {}, gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, gcvars, byref, isz
       ; gcrRegs +[rbp rsi r14]
       ; byrRegs +[rdi]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rsi], rcx
       jne      G_M5680_IG33
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for RuntimeMethodInfo:GetParameters
       call     [rax]RuntimeMethodInfo:GetParameters():ref:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rcx, 0xD1FFAB1E      ; RuntimeConstructorInfo
       cmp      qword ptr [rsi], rcx
       jne      SHORT G_M5680_IG24
						;; size=52 bbWeight=0.32 PerfScore 3.96
G_M5680_IG21:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax]
       jmp      G_M5680_IG30
						;; size=5 bbWeight=0.24 PerfScore 0.49
G_M5680_IG22:        ; gcrefRegs=00005066 {rcx rdx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r15] +[rcx rdx r12]
       mov      rax, gword ptr [rcx+38H]
       ; gcrRegs +[rax]
       cmp      rax, gword ptr [rdx+38H]
       jne      G_M5680_IG09
       mov      rcx, gword ptr [rcx+08H]
       mov      rcx, gword ptr [rcx+08H]
       mov      rdx, gword ptr [rdx+08H]
       xor      r15d, r15d
       cmp      rcx, gword ptr [rdx+08H]
       sete     r15b
       jmp      G_M5680_IG10
						;; size=42 bbWeight=0.17 PerfScore 3.16
G_M5680_IG23:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax rcx rdx r12]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      r15d, eax
       jmp      G_M5680_IG04
						;; size=21 bbWeight=0.38 PerfScore 3.61
G_M5680_IG24:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs +[r15]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
						;; size=16 bbWeight=0.08 PerfScore 0.61
G_M5680_IG25:        ; gcrefRegs=0000C062 {rcx rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax]
       test     rcx, rcx
       je       G_M5680_IG12
						;; size=9 bbWeight=0.32 PerfScore 0.40
G_M5680_IG26:        ; gcrefRegs=0000C062 {rcx rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref, isz
       mov      r11, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rcx], r11
       jne      G_M5680_IG40
       jmp      SHORT G_M5680_IG29
						;; size=21 bbWeight=0.32 PerfScore 2.02
G_M5680_IG27:        ; gcrefRegs=00005062 {rcx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r15] +[r12]
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       jmp      G_M5680_IG08
						;; size=7 bbWeight=0.14 PerfScore 0.32
G_M5680_IG28:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rcx rdx r12] +[r15]
       test     eax, eax
       jne      G_M5680_IG12
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      r8, r15
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for CacheDict`2:Add
       call     [rax]CacheDict`2:Add(__Canon,__Canon):this
       ; gcrRegs -[rcx rdx r8 r14]
       ; gcr arg pop 0
       jmp      G_M5680_IG12
						;; size=34 bbWeight=0.32 PerfScore 2.34
G_M5680_IG29:        ; gcrefRegs=0000C062 {rcx rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref, isz
       ; gcrRegs +[rcx r14]
       mov      rax, 0xD1FFAB1E      ; code for RuntimeType:get_IsCollectible
       call     [rax]RuntimeType:get_IsCollectible():bool:this
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       jmp      SHORT G_M5680_IG28
						;; size=14 bbWeight=0.32 PerfScore 1.69
G_M5680_IG30:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref, isz
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+10H]
       cmp      byte  ptr [rcx+8CH], 0
       jne      G_M5680_IG56
       mov      rcx, gword ptr [rsi+08H]
       jmp      SHORT G_M5680_IG25
						;; size=26 bbWeight=0.24 PerfScore 2.49
G_M5680_IG31:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rcx r15]
       xor      r15, r15
       ; gcrRegs +[r15]
       xor      ecx, ecx
       jmp      G_M5680_IG11
						;; size=10 bbWeight=0.23 PerfScore 0.58
G_M5680_IG32:        ; gcrefRegs=00005062 {rcx rbp rsi r12 r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r15] +[rcx r12]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+10H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      r15d, eax
       jmp      G_M5680_IG10
						;; size=21 bbWeight=0.19 PerfScore 1.82
G_M5680_IG33:        ; gcrefRegs=00004060 {rbp rsi r14}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r12]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+50H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       jmp      G_M5680_IG24
						;; size=21 bbWeight=0.08 PerfScore 0.77
G_M5680_IG34:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref, isz
       ; gcrRegs -[rax r14] +[r12]
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      edx, r14d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+20H], rbp
       ; gcr arg write
       mov      r9, 0xD1FFAB1E      ; string handle
       mov      r9, gword ptr [r9]
       ; gcrRegs +[r9]
       mov      gword ptr [rsp+28H], r9
       ; gcr arg write
       mov      dword ptr [rsp+30H], r14d
       mov      r9d, r14d
       ; gcrRegs -[r9]
       mov      r9, gword ptr [r12+8*r9+10H]
       ; gcrRegs +[r9]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      edx, ebx
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r8-r9] +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+38H], rax
       ; GC ptr vars +{V08}
       test     r15, r15
       jne      SHORT G_M5680_IG39
						;; size=89 bbWeight=0.01 PerfScore 0.21
G_M5680_IG35:        ; gcVars=0000000000010000 {V08}, gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; gcrRegs -[rax]
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      edx, r14d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       cmp      rax, gword ptr [rsp+38H]
       jne      G_M5680_IG51
						;; size=34 bbWeight=0.01 PerfScore 0.07
G_M5680_IG36:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax]
       mov      rax, gword ptr [rsp+38H]
       ; gcrRegs +[rax]
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M5680_IG37:        ; gcVars=0000000000000000 {}, gcrefRegs=00009061 {rax rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; GC ptr vars -{V08}
       test     r15, r15
       jne      G_M5680_IG54
						;; size=9 bbWeight=0.01 PerfScore 0.01
G_M5680_IG38:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rax]
       inc      r14d
       cmp      r14d, r13d
       jl       G_M5680_IG34
       jmp      G_M5680_IG18
						;; size=17 bbWeight=0.01 PerfScore 0.02
G_M5680_IG39:        ; gcVars=0000000000010000 {V08}, gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, gcvars, byref, isz
       ; GC ptr vars +{V08 V16}
       mov      rax, gword ptr [rsp+38H]
       ; gcrRegs +[rax]
       jmp      SHORT G_M5680_IG37
						;; size=7 bbWeight=0.01 PerfScore 0.02
G_M5680_IG40:        ; gcVars=0000000000000000 {}, gcrefRegs=0000C062 {rcx rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; gcrRegs -[rax r12] +[rcx r14]
       ; GC ptr vars -{V08 V16}
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+50H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       jmp      G_M5680_IG28
						;; size=14 bbWeight=0    PerfScore 0.00
G_M5680_IG41:        ; gcrefRegs=00000064 {rdx rbp rsi}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[r14-r15] +[rdx]
       mov      rcx, 0xD1FFAB1E      ; hackishModuleName:hackishMethodName()
       mov      rax, 0xD1FFAB1E      ; code for CollectionExtensions:RemoveFirst
       call     [rax]CollectionExtensions:RemoveFirst(ref):ref
       ; gcrRegs -[rdx] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       jmp      G_M5680_IG13
						;; size=30 bbWeight=0    PerfScore 0.00
G_M5680_IG42:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rdx rbp]
       ; byrRegs -[rdi]
       cmp      ebx, 17
       jg       SHORT G_M5680_IG43
       cmp      ebx, 6
       je       G_M5680_IG45
       cmp      ebx, 17
       jne      G_M5680_IG46
       mov      rcx, 0xD1FFAB1E      ; InvalidOperationException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs -[rsi] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      ecx, 0x20FF
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName(String):String
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for InvalidOperationException:.ctor
       ; gcrRegs -[rax]
       call     [rax]InvalidOperationException:.ctor(String):this
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rbx]
       ; gcr arg pop 0
						;; size=102 bbWeight=0    PerfScore 0.00
G_M5680_IG43:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[rsi]
       cmp      ebx, 31
       je       SHORT G_M5680_IG44
       cmp      ebx, 50
       je       SHORT G_M5680_IG45
       jmp      G_M5680_IG46
						;; size=15 bbWeight=0    PerfScore 0.00
G_M5680_IG44:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x2141
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName(String):String
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for ArgumentException:.ctor
       ; gcrRegs -[rax]
       call     [rax]ArgumentException:.ctor(String):this
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=79 bbWeight=0    PerfScore 0.00
G_M5680_IG45:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rsi]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0x20B5
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName(String):String
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for SR:Format
       ; gcrRegs -[rax]
       call     [rax]SR:Format(String,Object):String
       ; gcrRegs -[rcx rdx rsi] +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x2CD9
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for ArgumentException:.ctor
       ; gcrRegs -[rax]
       call     [rax]ArgumentException:.ctor(String,String):this
       ; gcrRegs -[rcx rdx rsi r8]
       ; gcr arg pop 0
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rdi]
       ; gcr arg pop 0
						;; size=123 bbWeight=0    PerfScore 0.00
G_M5680_IG46:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; UnreachableException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      ecx, 0x5801
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName(String):String
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for Exception:.ctor
       ; gcrRegs -[rax]
       call     [rax]Exception:.ctor():this
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       lea      rcx, bword ptr [rbx+10H]
       ; byrRegs +[rcx]
       mov      rdx, rbp
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx rbp]
       ; byrRegs -[rcx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rbx]
       ; gcr arg pop 0
						;; size=91 bbWeight=0    PerfScore 0.00
G_M5680_IG47:        ; gcVars=0000000000010000 {V08}, gcrefRegs=00001060 {rbp rsi r12}, byrefRegs=00000080 {rdi}, gcvars, byref, isz
       ; gcrRegs +[rbp rsi r12]
       ; byrRegs +[rdi]
       ; GC ptr vars +{V08 V16}
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       movsxd   rdx, eax
       mov      rcx, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_OBJ
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       xor      eax, eax
       ; gcrRegs -[rax]
       jmp      SHORT G_M5680_IG49
						;; size=45 bbWeight=0    PerfScore 0.00
G_M5680_IG48:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      dword ptr [rsp+44H], eax
       mov      edx, eax
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      eax, dword ptr [rsp+44H]
       ; gcrRegs -[rax]
       movsxd   rdx, eax
       mov      rcx, r15
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       mov      eax, dword ptr [rsp+44H]
       inc      eax
						;; size=50 bbWeight=0    PerfScore 0.00
G_M5680_IG49:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref, isz
       cmp      eax, r14d
       jl       SHORT G_M5680_IG48
       jmp      G_M5680_IG16
						;; size=10 bbWeight=0    PerfScore 0.00
G_M5680_IG50:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref
       mov      rax, gword ptr [rsp+38H]
       ; gcrRegs +[rax]
       movsxd   rdx, r14d
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      r8, rax
       ; gcrRegs +[r8]
       ; GC ptr vars -{V08 V16}
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rax rcx r8]
       ; gcr arg pop 0
       jmp      G_M5680_IG17
						;; size=24 bbWeight=0    PerfScore 0.00
G_M5680_IG51:        ; gcVars=0000000000010000 {V08}, gcrefRegs=00001060 {rbp rsi r12}, byrefRegs=00000080 {rdi}, gcvars, byref, isz
       ; gcrRegs -[r15]
       ; GC ptr vars +{V08 V16}
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       movsxd   rdx, eax
       mov      rcx, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_OBJ
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       xor      eax, eax
       ; gcrRegs -[rax]
       jmp      SHORT G_M5680_IG53
						;; size=45 bbWeight=0    PerfScore 0.00
G_M5680_IG52:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref
       mov      rcx, gword ptr [rdi]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      dword ptr [rsp+44H], eax
       mov      edx, eax
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      eax, dword ptr [rsp+44H]
       ; gcrRegs -[rax]
       movsxd   rdx, eax
       mov      rcx, r15
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       mov      edx, dword ptr [rsp+44H]
       inc      edx
       mov      eax, edx
						;; size=52 bbWeight=0    PerfScore 0.00
G_M5680_IG53:        ; gcrefRegs=00009060 {rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, byref, isz
       cmp      eax, r14d
       jl       SHORT G_M5680_IG52
       mov      rax, gword ptr [rsp+38H]
       ; gcrRegs +[rax]
       jmp      G_M5680_IG37
						;; size=15 bbWeight=0    PerfScore 0.00
G_M5680_IG54:        ; gcVars=0000000000000000 {}, gcrefRegs=00009061 {rax rbp rsi r12 r15}, byrefRegs=00000080 {rdi}, gcvars, byref
       ; GC ptr vars -{V08 V16}
       movsxd   rdx, r14d
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      r8, rax
       ; gcrRegs +[r8]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rax rcx r8]
       ; gcr arg pop 0
       jmp      G_M5680_IG38
						;; size=19 bbWeight=0    PerfScore 0.00
G_M5680_IG55:        ; gcrefRegs=00008000 {r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs -[rbp rsi r12]
       mov      rcx, 0xD1FFAB1E      ; TrueReadOnlyCollection`1
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r15
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for ReadOnlyCollection`1:.ctor
       ; gcrRegs -[rax]
       call     [rax]ReadOnlyCollection`1:.ctor(IList`1):this
       ; gcrRegs -[rcx rdx r15]
       ; gcr arg pop 0
       mov      rcx, rdi
       ; byrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       ; gcrRegs -[rdx rsi]
       ; byrRegs -[rcx rdi]
       jmp      G_M5680_IG19
						;; size=52 bbWeight=0    PerfScore 0.00
G_M5680_IG56:        ; gcrefRegs=0000C060 {rbp rsi r14 r15}, byrefRegs=00000080 {rdi}, byref
       ; gcrRegs +[rbp rsi r14-r15]
       ; byrRegs +[rdi]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       jmp      G_M5680_IG25
						;; size=7 bbWeight=0    PerfScore 0.00

; Total bytes of code 1797, prolog size 16, PerfScore 317.40, instruction count 420, allocated bytes for code 1797 (MethodHash=fd94e9cf) for method ExpressionUtils:ValidateArgumentTypes(MethodBase,int,byref,String)
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x10
  CountOfUnwindCodes: 9
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x10 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 8 * 8 + 8 = 72 = 0x48
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x08 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
