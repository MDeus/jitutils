; Assembly listing for method LambdaCompiler:EmitNewExpression(Expression):this
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; optimized using profile data
; rsp based frame
; partially interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 214
; 33 inlinees with PGO data; 79 single block inlinees; 1 inlinees without PGO data
; Final local variable assignments
;
;  V00 this         [V00,T10] ( 15,  5.16)     ref  ->  rsi         this class-hnd single-def
;  V01 arg1         [V01,T21] (  4,  3.25)     ref  ->  rdx         class-hnd single-def
;  V02 loc0         [V02,T07] ( 19,  7.02)     ref  ->  rdi         class-hnd single-def
;  V03 loc1         [V03,T80] (  2,  1.88)     ref  ->  r15         class-hnd single-def
;  V04 loc2         [V04,T133] (  7,  0.30)     ref  ->  r13         class-hnd single-def
;  V05 OutArgs      [V05    ] (  1,  1   )  lclBlk (32) [rsp+00H]   "OutgoingArgSpace"
;  V06 tmp1         [V06,T52] (  3,  2.50)    long  ->  rcx         "fgMakeTemp is creating a new local variable"
;  V07 tmp2         [V07,T08] (  5,  7.50)     ref  ->  rdi         class-hnd "spilling QMark2"
;  V08 tmp3         [V08,T130] (  5,  0.36)     ref  ->  rbp         class-hnd "impAppendStmt"
;* V09 tmp4         [V09    ] (  0,  0   )  struct ( 8) zero-ref    "impAppendStmt"
;  V10 tmp5         [V10,T134] (  4,  0.24)     ref  ->   r8         class-hnd "spilling ret_expr"
;  V11 tmp6         [V11,T16] (  5,  5.64)     ref  ->  rcx         class-hnd single-def "spilling ret_expr"
;  V12 tmp7         [V12,T17] (  4,  5.64)     ref  ->  rbx         class-hnd single-def "impAppendStmt"
;* V13 tmp8         [V13    ] (  0,  0   )  struct ( 8) zero-ref    "impAppendStmt"
;  V14 tmp9         [V14,T18] (  4,  5.64)     ref  ->   r8         class-hnd single-def "spilling ret_expr"
;  V15 tmp10        [V15,T47] (  8,  2.82)     ref  ->  rcx         "guarded devirt return temp"
;  V16 tmp11        [V16,T48] (  3,  2.82)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V17 tmp12        [V17,T00] ( 42, 23.61)     ref  ->  rbx         class-hnd exact single-def "guarded devirt this exact temp"
;  V18 tmp13        [V18,T142] (  3,  0.12)     ref  ->  rdx         "guarded devirt return temp"
;* V19 tmp14        [V19    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V20 tmp15        [V20,T131] (  5,  0.36)     ref  ->  rcx         single-def "guarded devirt this temp"
;* V21 tmp16        [V21    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V22 tmp17        [V22,T139] (  4,  0.12)     ref  ->   r8         "guarded devirt return temp"
;* V23 tmp18        [V23    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;* V24 tmp19        [V24    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V25 tmp20        [V25,T129] (  6,  0.36)     ref  ->  rcx         "guarded devirt this temp"
;* V26 tmp21        [V26    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;* V27 tmp22        [V27    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V28 tmp23        [V28    ] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;* V29 tmp24        [V29    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V30 tmp25        [V30,T71] (  4,  1.88)     int  ->  rax         "guarded devirt return temp"
;* V31 tmp26        [V31    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V32 tmp27        [V32,T166] (  3,  0   )     ref  ->  r15         class-hnd exact single-def "NewObj constructor temp"
;  V33 tmp28        [V33,T01] ( 19, 13.98)     ref  ->  rbx         class-hnd single-def "Inlining Arg"
;  V34 tmp29        [V34,T81] (  2,  1.88)     ref  ->  r15         class-hnd single-def "Inline return value spill temp"
;  V35 tmp30        [V35,T45] (  4,  2.86)     ref  ->  r14         class-hnd "Inline stloc first use temp"
;  V36 tmp31        [V36,T70] ( 18,  1.88)     ref  ->  r15         class-hnd "Inline stloc first use temp"
;  V37 tmp32        [V37,T15] ( 14,  5.84)     int  ->  r12         "Inline stloc first use temp"
;  V38 tmp33        [V38,T30] (  5,  3.80)     int  ->  rbp         "Inline stloc first use temp"
;  V39 tmp34        [V39,T42] ( 10,  2.93)     ref  ->  rbx         class-hnd "Inline stloc first use temp"
;  V40 tmp35        [V40,T63] (  6,  1.95)     ref  ->  [rsp+40H]   class-hnd "Inline stloc first use temp"
;  V41 tmp36        [V41,T26] ( 14,  3.93)     ref  ->  rbx         class-hnd "Inline stloc first use temp"
;  V42 tmp37        [V42,T150] (  8,  0.02)     ref  ->  rbx         class-hnd "Inline stloc first use temp"
;  V43 tmp38        [V43,T163] (  6,  0   )     ref  ->  r15         class-hnd exact "NewObj constructor temp"
;  V44 tmp39        [V44,T64] (  6,  1.95)     ref  ->  registers   "guarded devirt return temp"
;* V45 tmp40        [V45,T124] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V46 tmp41        [V46,T65] (  6,  1.95)     ref  ->  rbx         "guarded devirt return temp"
;  V47 tmp42        [V47,T38] ( 14,  3.12)     ref  ->  rbx         class-hnd exact "guarded devirt this exact temp"
;  V48 tmp43        [V48,T151] (  6,  0.02)     ref  ->  rax         "guarded devirt return temp"
;* V49 tmp44        [V49    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V50 tmp45        [V50,T82] (  2,  1.88)     ref  ->  r14         class-hnd single-def "Inline return value spill temp"
;  V51 tmp46        [V51,T39] (  4,  3.12)     ref  ->  rbp         class-hnd exact "Inline stloc first use temp"
;  V52 tmp47        [V52,T51] (  6,  2.56)     ref  ->  r14         ld-addr-op class-hnd "Inline ldloca(s) first use temp"
;* V53 tmp48        [V53    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "dup spill"
;  V54 tmp49        [V54,T110] (  6,  1.21)     ref  ->  rcx         single-def
;* V55 tmp50        [V55,T161] (  0,  0   )     int  ->  zero-ref   
;  V56 tmp51        [V56,T121] (  4,  0.76)     ref  ->  r14         "guarded devirt return temp"
;* V57 tmp52        [V57    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V58 tmp53        [V58,T122] (  4,  0.61)     ref  ->  rcx         "guarded devirt return temp"
;  V59 tmp54        [V59,T125] (  2,  0.46)     ref  ->  rdx         class-hnd exact single-def "guarded devirt this exact temp"
;  V60 tmp55        [V60,T123] (  3,  0.61)     int  ->  rax         "guarded devirt return temp"
;* V61 tmp56        [V61    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V62 tmp57        [V62,T73] (  3,  1.88)    bool  ->  rcx         "Inline return value spill temp"
;* V63 tmp58        [V63,T91] (  0,  0   )     ref  ->  zero-ref    ld-addr-op class-hnd single-def "Inlining Arg"
;  V64 tmp59        [V64,T50] (  3,  2.78)     int  ->  r14         "Inline stloc first use temp"
;  V65 tmp60        [V65,T87] (  2,  1.88)     int  ->  rdx         "Inline stloc first use temp"
;  V66 tmp61        [V66,T25] (  5,  4.22)     ref  ->  r15         class-hnd "Inline stloc first use temp"
;  V67 tmp62        [V67,T108] (  2,  1.44)     ref  ->  rcx         ld-addr-op class-hnd "Inline stloc first use temp"
;  V68 tmp63        [V68,T74] (  3,  1.88)     int  ->  r14         "guarded devirt return temp"
;  V69 tmp64        [V69,T32] (  2,  3.76)     ref  ->  rcx         single-def "guarded devirt this temp"
;* V70 tmp65        [V70    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V71 tmp66        [V71,T96] (  4,  1.60)     int  ->  r14         "guarded devirt return temp"
;  V72 tmp67        [V72,T23] (  5,  4.68)     ref  ->  rcx         single-def "guarded devirt this temp"
;  V73 tmp68        [V73,T109] (  4,  1.41)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V74 tmp69        [V74,T56] (  2,  2.33)     int  ->  rax         "impAppendStmt"
;  V75 tmp70        [V75,T111] (  2,  1.16)    long  ->  rcx         ld-addr-op "Inline stloc first use temp"
;* V76 tmp71        [V76    ] (  0,  0   )   byref  ->  zero-ref    "Inlining Arg"
;  V77 tmp72        [V77,T93] (  3,  1.75)    long  ->  rcx         ld-addr-op "Inline stloc first use temp"
;* V78 tmp73        [V78    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V79 tmp74        [V79,T94] (  3,  1.75)    long  ->  rcx         ld-addr-op "Inline stloc first use temp"
;* V80 tmp75        [V80    ] (  0,  0   )     int  ->  zero-ref    ld-addr-op "Inlining Arg"
;* V81 tmp76        [V81    ] (  0,  0   )     int  ->  zero-ref   
;* V82 tmp77        [V82    ] (  0,  0   )     int  ->  zero-ref    "Inline stloc first use temp"
;  V83 tmp78        [V83,T57] (  2,  2.33)     int  ->  rdx         ld-addr-op "Inlining Arg"
;* V84 tmp79        [V84    ] (  0,  0   )     int  ->  zero-ref   
;* V85 tmp80        [V85    ] (  0,  0   )     int  ->  zero-ref    "Inline stloc first use temp"
;  V86 tmp81        [V86,T43] (  5,  2.91)     int  ->  rcx         "Inline stloc first use temp"
;  V87 tmp82        [V87,T58] (  2,  2.33)     int  ->  rcx         "Inlining Arg"
;  V88 tmp83        [V88,T59] (  2,  2.33)     int  ->  rcx         "Inlining Arg"
;  V89 tmp84        [V89,T02] ( 12, 13.98)     int  ->  rax         "Inlining Arg"
;* V90 tmp85        [V90    ] (  0,  0   )   byref  ->  zero-ref    "Inlining Arg"
;* V91 tmp86        [V91    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inlining Arg"
;  V92 tmp87        [V92,T53] (  3,  2.43)     ref  ->  rdx         class-hnd "spilling QMark2"
;  V93 tmp88        [V93,T68] (  5,  1.95)     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;* V94 tmp89        [V94    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;* V95 tmp90        [V95    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V96 tmp91        [V96    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V97 tmp92        [V97    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V98 tmp93        [V98    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inlining Arg"
;  V99 tmp94        [V99,T167] (  3,  0   )     ref  ->  rsi         class-hnd exact "NewObj constructor temp"
;  V100 tmp95       [V100,T113] (  4,  0.98)     ref  ->  rax         class-hnd "Inline stloc first use temp"
;  V101 tmp96       [V101,T112] (  6,  0.98)     ref  ->  rax         class-hnd "Inline return value spill temp"
;  V102 tmp97       [V102,T62] (  8,  1.99)     ref  ->  [rsp+38H]   class-hnd "Inlining Arg"
;  V103 tmp98       [V103,T107] (  6,  1.45)     ref  ->  rax         class-hnd "Inline stloc first use temp"
;  V104 tmp99       [V104,T146] (  6,  0.03)    long  ->  rcx         "fgMakeTemp is creating a new local variable"
;  V105 tmp100      [V105,T143] ( 10,  0.09)     ref  ->   r8         class-hnd "spilling QMark2"
;  V106 tmp101      [V106,T138] (  6,  0.13)     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;* V107 tmp102      [V107    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V108 tmp103      [V108    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V109 tmp104      [V109,T66] (  4,  1.95)     int  ->  rax         "guarded devirt return temp"
;* V110 tmp105      [V110    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V111 tmp106      [V111,T67] (  4,  1.95)   ubyte  ->  rax         "Inline stloc first use temp"
;  V112 tmp107      [V112,T164] (  6,  0   )     ref  ->  rcx         class-hnd "Inline stloc first use temp"
;  V113 tmp108      [V113,T162] (  8,  0   )     int  ->  rax         "Inline stloc first use temp"
;  V114 tmp109      [V114,T14] (  4,  6.11)     ref  ->  rdi         class-hnd "spilling QMark2"
;  V115 tmp110      [V115,T09] (  7,  5.93)     ref  ->  rdi         class-hnd "Inline stloc first use temp"
;  V116 tmp111      [V116,T11] (  8,  6.84)     ref  ->  r12         class-hnd "Inline stloc first use temp"
;  V117 tmp112      [V117,T75] (  3,  1.88)     int  ->  rdi         "Inline stloc first use temp"
;* V118 tmp113      [V118    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;  V119 tmp114      [V119,T168] (  3,  0   )     ref  ->  rdi         class-hnd exact single-def "NewObj constructor temp"
;* V120 tmp115      [V120    ] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;* V121 tmp116      [V121,T120] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;  V122 tmp117      [V122,T60] (  3,  2.32)   ubyte  ->  rax         "Inline stloc first use temp"
;  V123 tmp118      [V123,T37] (  3,  3.41)     ref  ->  r13         class-hnd single-def "impAppendStmt"
;* V124 tmp119      [V124    ] (  0,  0   )  struct ( 8) zero-ref    "impAppendStmt"
;* V125 tmp120      [V125    ] (  0,  0   )  struct ( 8) zero-ref    "struct address for call/obj"
;* V126 tmp121      [V126    ] (  0,  0   )  struct ( 8) zero-ref    "NewObj constructor temp"
;* V127 tmp122      [V127    ] (  0,  0   )  struct ( 8) zero-ref    "NewObj constructor temp"
;* V128 tmp123      [V128    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;* V129 tmp124      [V129    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;  V130 tmp125      [V130,T22] (  5,  4.96)     ref  ->  [rsp+30H]   class-hnd exact spill-single-def "NewObj constructor temp"
;  V131 tmp126      [V131,T05] (  7,  8.06)     ref  ->  [rsp+28H]   class-hnd single-def "impAppendStmt"
;* V132 tmp127      [V132    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;* V133 tmp128      [V133    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;  V134 tmp129      [V134,T95] (  3,  1.68)     ref  ->  rcx         class-hnd "Inline stloc first use temp"
;  V135 tmp130      [V135,T92] (  4,  1.81)     int  ->  rdx         "Inline stloc first use temp"
;* V136 tmp131      [V136    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V137 tmp132      [V137,T13] (  4,  6.24)     ref  ->  r12         class-hnd single-def "impAppendStmt"
;* V138 tmp133      [V138    ] (  0,  0   )  struct ( 8) zero-ref    "struct address for call/obj"
;* V139 tmp134      [V139    ] (  0,  0   )  struct ( 8) zero-ref    "NewObj constructor temp"
;  V140 tmp135      [V140,T98] (  2,  1.56)     int  ->  rdi         "Inline return value spill temp"
;* V141 tmp136      [V141    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op "Inlining Arg"
;  V142 tmp137      [V142,T117] (  2,  0.78)     ref  ->  r13         class-hnd "Inline stloc first use temp"
;  V143 tmp138      [V143,T24] (  3,  4.68)     ref  ->  [rsp+20H]   class-hnd exact spill-single-def "Single-def Box Helper"
;  V144 tmp139      [V144,T04] (  7,  9.36)     ref  ->  r13         class-hnd single-def "impImportAndPushBox"
;  V145 tmp140      [V145,T55] (  3,  2.34)    long  ->  [rsp+60H]   spill-single-def "Inline stloc first use temp"
;  V146 tmp141      [V146,T54] (  3,  2.34)     ref  ->  rax         class-hnd "Inline stloc first use temp"
;  V147 tmp142      [V147,T165] (  4,  0   )     ref  ->  rbx         class-hnd "Inline stloc first use temp"
;  V148 tmp143      [V148,T174] (  2,  0   )     ref  ->  r14         class-hnd "Inline stloc first use temp"
;  V149 tmp144      [V149,T169] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V150 tmp145      [V150,T97] (  3,  1.56)    long  ->  registers   "guarded devirt return temp"
;* V151 tmp146      [V151    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V152 tmp147      [V152,T41] (  2,  3.12)    long  ->  rax         "NewObj constructor temp"
;* V153 tmp148      [V153    ] (  0,  0   )    long  ->  zero-ref    "Inlining Arg"
;  V154 tmp149      [V154,T61] (  3,  2.20)     ref  ->  rcx         class-hnd "Inline stloc first use temp"
;  V155 tmp150      [V155,T46] (  4,  2.83)     int  ->  rdx         "Inline stloc first use temp"
;  V156 tmp151      [V156,T40] (  3,  3.12)     ref  ->   r8         class-hnd exact single-def "Inlining Arg"
;* V157 tmp152      [V157    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V158 tmp153      [V158    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op "Inlining Arg"
;  V159 tmp154      [V159,T76] (  3,  1.88)   short  ->  r13         "Inline stloc first use temp"
;  V160 tmp155      [V160,T36] (  4,  3.73)     int  ->  rdx         "Inline stloc first use temp"
;  V161 tmp156      [V161,T20] (  3,  5.60)     ref  ->  rcx         class-hnd single-def "impAppendStmt"
;* V162 tmp157      [V162    ] (  0,  0   )  struct ( 8) zero-ref    "impAppendStmt"
;* V163 tmp158      [V163    ] (  0,  0   )  struct (16) zero-ref    "struct address for call/obj"
;* V164 tmp159      [V164    ] (  0,  0   )  struct (16) zero-ref    "Inline return value spill temp"
;  V165 tmp160      [V165,T144] (  5,  0.06)     ref  ->  rcx         class-hnd single-def "Inlining Arg"
;  V166 tmp161      [V166,T145] (  5,  0.05)     int  ->  rax         "Inlining Arg"
;* V167 tmp162      [V167    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V168 tmp163      [V168    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inline ldloca(s) first use temp"
;  V169 tmp164      [V169,T148] (  2,  0.02)   byref  ->  rdx         single-def "Inlining Arg"
;  V170 tmp165      [V170,T149] (  2,  0.02)     int  ->   r8         "Inlining Arg"
;  V171 tmp166      [V171,T158] (  2,  0.01)   short  ->  rcx         ld-addr-op "Inline stloc first use temp"
;* V172 tmp167      [V172    ] (  0,  0   )  struct (16) zero-ref    "Inlining Arg"
;* V173 tmp168      [V173    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V174 tmp169      [V174    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V175 tmp170      [V175    ] (  0,  0   )   byref  ->  zero-ref    single-def "Inlining Arg"
;* V176 tmp171      [V176    ] (  0,  0   )   short  ->  zero-ref    "Inlining Arg"
;  V177 tmp172      [V177,T31] (  2,  3.76)     int  ->  r13         "Inlining Arg"
;* V178 tmp173      [V178    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op "Inlining Arg"
;* V179 tmp174      [V179    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op "Inlining Arg"
;* V180 tmp175      [V180    ] (  0,  0   )  struct (16) zero-ref    "struct address for call/obj"
;* V181 tmp176      [V181    ] (  0,  0   )  struct (16) zero-ref    "Inline return value spill temp"
;  V182 tmp177      [V182,T03] (  5,  9.39)     ref  ->  rcx         class-hnd single-def "Inlining Arg"
;  V183 tmp178      [V183,T06] (  5,  7.51)     int  ->   r9         "Inlining Arg"
;* V184 tmp179      [V184    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V185 tmp180      [V185    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inline ldloca(s) first use temp"
;  V186 tmp181      [V186,T33] (  2,  3.76)   byref  ->  rdx         single-def "Inlining Arg"
;  V187 tmp182      [V187,T34] (  2,  3.76)     int  ->  r10         "Inlining Arg"
;* V188 tmp183      [V188    ] (  0,  0   )  struct (16) zero-ref    "Inlining Arg"
;  V189 tmp184      [V189,T35] (  2,  3.76)     int  ->  rdi         ld-addr-op "Inlining Arg"
;* V190 tmp185      [V190    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V191 tmp186      [V191    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V192 tmp187      [V192    ] (  0,  0   )   byref  ->  zero-ref    single-def "Inlining Arg"
;* V193 tmp188      [V193    ] (  0,  0   )     int  ->  zero-ref    "Inlining Arg"
;* V194 tmp189      [V194    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;  V195 tmp190      [V195,T140] (  4,  0.12)     int  ->  r12         V09.m_value(offs=0x00) P-INDEP "field V09.m_value (fldOffset=0x0)"
;  V196 tmp191      [V196,T141] (  4,  0.12)     int  ->  r15         V09.m_flags(offs=0x04) P-INDEP "field V09.m_flags (fldOffset=0x4)"
;  V197 tmp192      [V197,T77] (  3,  1.88)     int  ->  rbp         V13.m_value(offs=0x00) P-INDEP "field V13.m_value (fldOffset=0x0)"
;  V198 tmp193      [V198,T78] (  3,  1.88)     int  ->  r14         V13.m_flags(offs=0x04) P-INDEP "field V13.m_flags (fldOffset=0x4)"
;  V199 tmp194      [V199,T88] (  2,  1.88)     int  ->  rbp         V118.m_value(offs=0x00) P-INDEP "field V118.m_value (fldOffset=0x0)"
;  V200 tmp195      [V200,T12] (  4,  3.76)     int  ->  r14         V118.m_flags(offs=0x04) P-INDEP "field V118.m_flags (fldOffset=0x4)"
;  V201 tmp196      [V201,T99] (  2,  1.55)     ref  ->  rdi         single-def V124.m_value(offs=0x00) P-INDEP "field V124.m_value (fldOffset=0x0)"
;  V202 tmp197      [V202,T100] (  2,  1.55)     ref  ->  r12         single-def V125.m_type(offs=0x00) P-INDEP "field V125.m_type (fldOffset=0x0)"
;  V203 tmp198      [V203,T101] (  2,  1.55)     ref  ->  rdi         single-def V126.m_value(offs=0x00) P-INDEP "field V126.m_value (fldOffset=0x0)"
;  V204 tmp199      [V204,T102] (  2,  1.55)     ref  ->  r12         single-def V127.m_type(offs=0x00) P-INDEP "field V127.m_type (fldOffset=0x0)"
;  V205 tmp200      [V205,T103] (  2,  1.55)     ref  ->  rdi         single-def V128.m_value(offs=0x00) P-INDEP "field V128.m_value (fldOffset=0x0)"
;  V206 tmp201      [V206,T104] (  2,  1.55)     ref  ->  r12         single-def V129.m_type(offs=0x00) P-INDEP "field V129.m_type (fldOffset=0x0)"
;  V207 tmp202      [V207,T105] (  2,  1.55)     ref  ->  rdx         single-def V132.m_value(offs=0x00) P-INDEP "field V132.m_value (fldOffset=0x0)"
;  V208 tmp203      [V208,T106] (  2,  1.55)     ref  ->  r12         single-def V133.m_type(offs=0x00) P-INDEP "field V133.m_type (fldOffset=0x0)"
;* V209 tmp204      [V209,T118] (  0,  0   )     ref  ->  zero-ref    single-def V138.m_value(offs=0x00) P-INDEP "field V138.m_value (fldOffset=0x0)"
;* V210 tmp205      [V210,T119] (  0,  0   )     ref  ->  zero-ref    single-def V139.m_value(offs=0x00) P-INDEP "field V139.m_value (fldOffset=0x0)"
;  V211 tmp206      [V211,T29] (  6,  3.90)     ref  ->  rdi         single-def V141.m_value(offs=0x00) P-INDEP "field V141.m_value (fldOffset=0x0)"
;* V212 tmp207      [V212    ] (  0,  0   )     int  ->  zero-ref    V158.m_value(offs=0x00) P-INDEP "field V158.m_value (fldOffset=0x0)"
;  V213 tmp208      [V213,T89] (  2,  1.88)     int  ->  rcx         V158.m_flags(offs=0x04) P-INDEP "field V158.m_flags (fldOffset=0x4)"
;* V214 tmp209      [V214    ] (  0,  0   )     int  ->  zero-ref    V162.m_value(offs=0x00) P-INDEP "field V162.m_value (fldOffset=0x0)"
;* V215 tmp210      [V215,T114] (  0,  0   )     int  ->  zero-ref    V162.m_flags(offs=0x04) P-INDEP "field V162.m_flags (fldOffset=0x4)"
;  V216 tmp211      [V216,T154] (  2,  0.01)   byref  ->  rdx         single-def V163._reference(offs=0x00) P-INDEP "field V163._reference (fldOffset=0x0)"
;* V217 tmp212      [V217    ] (  0,  0   )     int  ->  zero-ref    V163._length(offs=0x08) P-INDEP "field V163._length (fldOffset=0x8)"
;  V218 tmp213      [V218,T152] (  3,  0.01)   byref  ->  rdx         V164._reference(offs=0x00) P-INDEP "field V164._reference (fldOffset=0x0)"
;  V219 tmp214      [V219,T153] (  3,  0.01)     int  ->   r8         V164._length(offs=0x08) P-INDEP "field V164._length (fldOffset=0x8)"
;  V220 tmp215      [V220,T155] (  2,  0.01)   byref  ->  rdx         V167._reference(offs=0x00) P-INDEP "field V167._reference (fldOffset=0x0)"
;  V221 tmp216      [V221,T159] (  2,  0.01)     int  ->   r8         V167._length(offs=0x08) P-INDEP "field V167._length (fldOffset=0x8)"
;  V222 tmp217      [V222,T175] (  2,  0   )   byref  ->  rdx         single-def V168._reference(offs=0x00) P-INDEP "field V168._reference (fldOffset=0x0)"
;* V223 tmp218      [V223,T183] (  0,  0   )     int  ->  zero-ref    V168._length(offs=0x08) P-INDEP "field V168._length (fldOffset=0x8)"
;  V224 tmp219      [V224,T156] (  2,  0.01)   byref  ->  rdx         single-def V172._reference(offs=0x00) P-INDEP "field V172._reference (fldOffset=0x0)"
;* V225 tmp220      [V225    ] (  0,  0   )     int  ->  zero-ref    V172._length(offs=0x08) P-INDEP "field V172._length (fldOffset=0x8)"
;  V226 tmp221      [V226,T157] (  2,  0.01)   byref  ->  rdx         single-def V173._reference(offs=0x00) P-INDEP "field V173._reference (fldOffset=0x0)"
;* V227 tmp222      [V227    ] (  0,  0   )     int  ->  zero-ref    V173._length(offs=0x08) P-INDEP "field V173._length (fldOffset=0x8)"
;* V228 tmp223      [V228    ] (  0,  0   )   byref  ->  zero-ref    single-def V174._reference(offs=0x00) P-INDEP "field V174._reference (fldOffset=0x0)"
;* V229 tmp224      [V229    ] (  0,  0   )     int  ->  zero-ref    V174._length(offs=0x08) P-INDEP "field V174._length (fldOffset=0x8)"
;* V230 tmp225      [V230    ] (  0,  0   )     int  ->  zero-ref    V178.m_value(offs=0x00) P-INDEP "field V178.m_value (fldOffset=0x0)"
;* V231 tmp226      [V231,T115] (  0,  0   )     int  ->  zero-ref    V178.m_flags(offs=0x04) P-INDEP "field V178.m_flags (fldOffset=0x4)"
;* V232 tmp227      [V232    ] (  0,  0   )     int  ->  zero-ref    V179.m_value(offs=0x00) P-INDEP "field V179.m_value (fldOffset=0x0)"
;* V233 tmp228      [V233,T116] (  0,  0   )     int  ->  zero-ref    V179.m_flags(offs=0x04) P-INDEP "field V179.m_flags (fldOffset=0x4)"
;  V234 tmp229      [V234,T83] (  2,  1.88)   byref  ->  rdx         single-def V180._reference(offs=0x00) P-INDEP "field V180._reference (fldOffset=0x0)"
;* V235 tmp230      [V235    ] (  0,  0   )     int  ->  zero-ref    V180._length(offs=0x08) P-INDEP "field V180._length (fldOffset=0x8)"
;  V236 tmp231      [V236,T72] (  3,  1.88)   byref  ->  rdx         V181._reference(offs=0x00) P-INDEP "field V181._reference (fldOffset=0x0)"
;  V237 tmp232      [V237,T79] (  3,  1.88)     int  ->  r10         V181._length(offs=0x08) P-INDEP "field V181._length (fldOffset=0x8)"
;  V238 tmp233      [V238,T84] (  2,  1.88)   byref  ->  rdx         V184._reference(offs=0x00) P-INDEP "field V184._reference (fldOffset=0x0)"
;  V239 tmp234      [V239,T90] (  2,  1.88)     int  ->  r10         V184._length(offs=0x08) P-INDEP "field V184._length (fldOffset=0x8)"
;  V240 tmp235      [V240,T176] (  2,  0   )   byref  ->  rdx         single-def V185._reference(offs=0x00) P-INDEP "field V185._reference (fldOffset=0x0)"
;* V241 tmp236      [V241,T184] (  0,  0   )     int  ->  zero-ref    V185._length(offs=0x08) P-INDEP "field V185._length (fldOffset=0x8)"
;  V242 tmp237      [V242,T85] (  2,  1.88)   byref  ->  rdx         single-def V188._reference(offs=0x00) P-INDEP "field V188._reference (fldOffset=0x0)"
;* V243 tmp238      [V243    ] (  0,  0   )     int  ->  zero-ref    V188._length(offs=0x08) P-INDEP "field V188._length (fldOffset=0x8)"
;  V244 tmp239      [V244,T86] (  2,  1.88)   byref  ->  rdx         single-def V190._reference(offs=0x00) P-INDEP "field V190._reference (fldOffset=0x0)"
;* V245 tmp240      [V245    ] (  0,  0   )     int  ->  zero-ref    V190._length(offs=0x08) P-INDEP "field V190._length (fldOffset=0x8)"
;* V246 tmp241      [V246    ] (  0,  0   )   byref  ->  zero-ref    single-def V191._reference(offs=0x00) P-INDEP "field V191._reference (fldOffset=0x0)"
;* V247 tmp242      [V247    ] (  0,  0   )     int  ->  zero-ref    V191._length(offs=0x08) P-INDEP "field V191._length (fldOffset=0x8)"
;  V248 tmp243      [V248,T177] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V249 tmp244      [V249,T178] (  2,  0   )     ref  ->  rdx         "argument with side effect"
;  V250 tmp245      [V250,T126] (  6,  0.39)     ref  ->   r8         "arr expr"
;  V251 tmp246      [V251,T127] (  6,  0.39)     int  ->  registers   "index expr"
;  V252 tmp247      [V252,T19] (  3,  5.64)   byref  ->  rcx         single-def "BlockOp address local"
;  V253 tmp248      [V253,T179] (  2,  0   )     ref  ->  rbp         single-def "argument with side effect"
;  V254 tmp249      [V254,T180] (  2,  0   )     ref  ->   r8         single-def "argument with side effect"
;  V255 tmp250      [V255,T170] (  3,  0   )     ref  ->  rax         single-def "argument with side effect"
;  V256 tmp251      [V256,T181] (  2,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V257 tmp252      [V257,T182] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V258 tmp253      [V258,T128] (  9,  0.36)  struct ( 8) [rsp+58H]   do-not-enreg[SF] "by-value struct argument"
;  V259 tmp254      [V259,T171] (  3,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V260 tmp255      [V260,T132] (  3,  0.36)   byref  ->  rcx         single-def "BlockOp address local"
;  V261 tmp256      [V261,T172] (  3,  0   )   byref  ->  rcx         single-def "BlockOp address local"
;  V262 tmp257      [V262,T135] (  2,  0.24)     ref  ->  rcx         single-def "argument with side effect"
;  V263 tmp258      [V263,T173] (  3,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V264 cse0        [V264,T27] (  6,  3.90)     int  ->  r13         "CSE - conservative"
;  V265 cse1        [V265,T28] (  6,  3.90)     int  ->  rax         "CSE - conservative"
;  V266 cse2        [V266,T44] (  4,  2.90)    long  ->  [rsp+50H]   "CSE - conservative"
;  V267 cse3        [V267,T136] (  3,  0.19)     int  ->  rax         "CSE - conservative"
;  V268 cse4        [V268,T147] (  4,  0.03)    long  ->  [rsp+48H]   spill-single-def "CSE - conservative"
;  V269 cse5        [V269,T160] (  3,  0.00)     int  ->  rdx         "CSE - conservative"
;  V270 cse6        [V270,T69] (  3,  1.89)     int  ->  r13         "CSE - conservative"
;  V271 cse7        [V271,T49] (  3,  2.82)     int  ->  r14         "CSE - conservative"
;  V272 cse8        [V272,T137] (  3,  0.18)    long  ->  r14         "CSE - conservative"
;
; Lcl frame size = 104

G_M63408_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 104
       mov      rsi, rcx
       ; gcrRegs +[rsi]
						;; size=19 bbWeight=1    PerfScore 8.50
G_M63408_IG02:        ; gcrefRegs=00000044 {rdx rsi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[rdx]
       mov      rdi, rdx
       ; gcrRegs +[rdi]
       test     rdi, rdi
       je       SHORT G_M63408_IG05
						;; size=8 bbWeight=1    PerfScore 1.50
G_M63408_IG03:        ; gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref, isz
       mov      rcx, 0xD1FFAB1E      ; NewExpression
       cmp      qword ptr [rdi], rcx
       je       SHORT G_M63408_IG05
						;; size=15 bbWeight=0.50 PerfScore 2.12
G_M63408_IG04:        ; gcrefRegs=00000044 {rdx rsi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdi]
       mov      rax, 0xD1FFAB1E      ; code for HELPER:CORINFO_HELP_CHKCASTCLASS_SPECIAL
       call     [rax]CORINFO_HELP_CHKCASTCLASS_SPECIAL
       ; gcrRegs -[rdx] +[rax]
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
						;; size=15 bbWeight=0.25 PerfScore 0.88
G_M63408_IG05:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       cmp      gword ptr [rdi+10H], 0
       je       G_M63408_IG92
						;; size=11 bbWeight=1    PerfScore 4.00
G_M63408_IG06:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [rdi+10H]
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; RuntimeConstructorInfo
       cmp      qword ptr [rcx], rax
       jne      G_M63408_IG139
       mov      rax, gword ptr [rcx+10H]
       ; gcrRegs +[rax]
       cmp      byte  ptr [rax+8CH], 0
       jne      G_M63408_IG138
       mov      rcx, gword ptr [rcx+08H]
						;; size=44 bbWeight=0.94 PerfScore 13.38
G_M63408_IG07:        ; gcrefRegs=000000C2 {rcx rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rcx], rax
       jne      G_M63408_IG140
						;; size=19 bbWeight=0.94 PerfScore 3.99
G_M63408_IG08:        ; gcrefRegs=000000C2 {rcx rsi rdi}, byrefRegs=00000000 {}, byref
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     al, 128
       jne      G_M63408_IG141
						;; size=13 bbWeight=0.94 PerfScore 2.11
G_M63408_IG09:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rbx, gword ptr [rdi+10H]
       ; gcrRegs +[rbx]
       mov      rcx, 0xD1FFAB1E      ; const ptr
       mov      rbp, gword ptr [rcx]
       ; gcrRegs +[rbp]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rcx], rax
       jne      G_M63408_IG32
						;; size=39 bbWeight=0.94 PerfScore 8.22
G_M63408_IG10:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx]
       mov      rcx, qword ptr [rbx+50H]
       mov      rax, rcx
       sar      rax, 32
       xor      eax, ecx
       mov      rcx, gword ptr [rbx+38H]
       ; gcrRegs +[rcx]
       mov      rcx, qword ptr [rcx+18H]
       ; gcrRegs -[rcx]
       mov      rdx, rcx
       sar      rdx, 32
       xor      edx, ecx
       imul     ecx, eax, 0xD1FFAB1E
       add      ecx, 0xD1FFAB1E
       rol      ecx, 17
       imul     ecx, ecx, 0xD1FFAB1E
       imul     eax, edx, 0xD1FFAB1E
       add      ecx, eax
       rol      ecx, 17
       imul     ecx, ecx, 0xD1FFAB1E
       mov      eax, ecx
       shr      eax, 15
       xor      eax, ecx
       imul     eax, eax, 0xD1FFAB1E
       mov      ecx, eax
       shr      ecx, 13
       xor      eax, ecx
       imul     eax, eax, 0xD1FFAB1E
       mov      ecx, eax
       shr      ecx, 16
       xor      eax, ecx
       mov      r14d, eax
						;; size=104 bbWeight=0.58 PerfScore 14.41
G_M63408_IG11:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       mov      edx, r14d
       and      edx, dword ptr [rbp+10H]
       mov      rcx, gword ptr [rbp+08H]
       ; gcrRegs +[rcx]
       movsxd   rdx, edx
       mov      r8, 0xD1FFAB1E      ; hackishClassName
       call     CORINFO_HELP_LDELEMA_REF
       ; gcrRegs -[rcx]
       ; byrRegs +[rax]
       ; gcr arg pop 0
       mov      r15, gword ptr [rax]
       ; gcrRegs +[r15]
       test     r15, r15
       je       G_M63408_IG39
						;; size=40 bbWeight=0.94 PerfScore 9.39
G_M63408_IG12:        ; gcrefRegs=000080E8 {rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rax]
       cmp      dword ptr [r15+18H], r14d
       jne      G_M63408_IG39
						;; size=10 bbWeight=0.90 PerfScore 3.60
G_M63408_IG13:        ; gcrefRegs=000080E8 {rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [r15+08H]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rcx], rdx
       jne      G_M63408_IG36
						;; size=23 bbWeight=0.72 PerfScore 4.50
G_M63408_IG14:        ; gcrefRegs=000080EA {rcx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rbx], rax
       jne      G_M63408_IG30
						;; size=22 bbWeight=0.54 PerfScore 2.43
G_M63408_IG15:        ; gcrefRegs=000080EE {rcx rdx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref, isz
       test     rdx, rdx
       je       SHORT G_M63408_IG17
						;; size=5 bbWeight=0.54 PerfScore 0.68
G_M63408_IG16:        ; gcrefRegs=000080EE {rcx rdx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       mov      rax, qword ptr [rcx+50H]
       cmp      rax, qword ptr [rdx+50H]
       je       G_M63408_IG26
						;; size=14 bbWeight=0.54 PerfScore 3.24
G_M63408_IG17:        ; gcrefRegs=000080E8 {rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx]
       xor      r14d, r14d
						;; size=3 bbWeight=0.54 PerfScore 0.14
G_M63408_IG18:        ; gcrefRegs=000080E8 {rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       test     r14d, r14d
       je       G_M63408_IG39
       mov      r14, gword ptr [r15+10H]
       ; gcrRegs +[r14]
       mov      ecx, 1
						;; size=18 bbWeight=0.72 PerfScore 2.52
G_M63408_IG19:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r15]
       test     ecx, ecx
       je       SHORT G_M63408_IG24
						;; size=4 bbWeight=0.94 PerfScore 1.17
G_M63408_IG20:        ; gcrefRegs=000040C0 {rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx rbp]
       xor      r15, r15
       ; gcrRegs +[r15]
       xor      r12d, r12d
       mov      r13d, dword ptr [r14+08H]
       mov      ebp, r13d
       test     ebp, ebp
       jle      G_M63408_IG65
       test     ebp, ebp
       jl       G_M63408_IG99
						;; size=29 bbWeight=0.94 PerfScore 4.93
G_M63408_IG21:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       mov      edx, r12d
       mov      rbx, gword ptr [r14+8*rdx+10H]
       ; gcrRegs +[rbx]
       mov      rdx, 0xD1FFAB1E      ; InstanceMethodCallExpression1
       cmp      qword ptr [rdi], rdx
       jne      G_M63408_IG27
						;; size=27 bbWeight=0.97 PerfScore 6.29
G_M63408_IG22:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       test     r12d, r12d
       jne      G_M63408_IG122
       mov      r13, gword ptr [rdi+18H]
       ; gcrRegs +[r13]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rcx, 0xD1FFAB1E      ; Expression
       mov      rax, 0xD1FFAB1E      ; code for HELPER:CORINFO_HELP_ISINSTANCEOFCLASS
       call     [rax]CORINFO_HELP_ISINSTANCEOFCLASS
       ; gcrRegs -[rdx] +[rax]
       ; gcr arg pop 0
       test     rax, rax
       je       G_M63408_IG86
						;; size=47 bbWeight=0.48 PerfScore 3.99
G_M63408_IG23:        ; gcrefRegs=0000C0C9 {rax rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13]
       mov      r13, rax
       ; gcrRegs +[r13]
       jmp      G_M63408_IG28
						;; size=8 bbWeight=0.48 PerfScore 1.09
G_M63408_IG24:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax r13-r15] +[rbp]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rbx], rcx
       jne      G_M63408_IG43
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for RuntimeMethodInfo:GetParameters
       call     [rax]RuntimeMethodInfo:GetParameters():ref:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       mov      rcx, 0xD1FFAB1E      ; RuntimeConstructorInfo
       cmp      qword ptr [rbx], rcx
       jne      G_M63408_IG80
						;; size=56 bbWeight=0.30 PerfScore 3.72
G_M63408_IG25:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       jmp      G_M63408_IG44
						;; size=5 bbWeight=0.23 PerfScore 0.46
G_M63408_IG26:        ; gcrefRegs=000080EE {rcx rdx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r14] +[rcx rdx r15]
       mov      rax, gword ptr [rcx+38H]
       ; gcrRegs +[rax]
       cmp      rax, gword ptr [rdx+38H]
       jne      G_M63408_IG17
       mov      rcx, gword ptr [rcx+08H]
       mov      rcx, gword ptr [rcx+08H]
       mov      rdx, gword ptr [rdx+08H]
       xor      r14d, r14d
       cmp      rcx, gword ptr [rdx+08H]
       sete     r14b
       jmp      G_M63408_IG18
						;; size=42 bbWeight=0.16 PerfScore 2.97
G_M63408_IG27:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rcx rdx rbp] +[r14]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      edx, r12d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName(int):Expression:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
						;; size=22 bbWeight=0.48 PerfScore 1.94
G_M63408_IG28:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax]
       mov      rcx, 0xD1FFAB1E      ; RuntimeParameterInfo
       cmp      qword ptr [rbx], rcx
       jne      G_M63408_IG145
       cmp      gword ptr [rbx+08H], 0
       jne      SHORT G_M63408_IG34
						;; size=26 bbWeight=0.97 PerfScore 7.98
G_M63408_IG29:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       jmp      G_M63408_IG89
						;; size=5 bbWeight=0.06 PerfScore 0.13
G_M63408_IG30:        ; gcrefRegs=000080EA {rcx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13-r14] +[rcx rbp]
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       jmp      G_M63408_IG15
						;; size=7 bbWeight=0.14 PerfScore 0.30
G_M63408_IG31:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx rdx rbp] +[r13-r14]
       mov      rdx, gword ptr [rbx+30H]
       ; gcrRegs +[rdx]
       mov      r8, gword ptr [rdx+08H]
       ; gcrRegs +[r8]
       cmp      eax, dword ptr [r8+08H]
       jae      G_M63408_IG153
       mov      edx, eax
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [r8+8*rdx+10H]
       ; gcrRegs +[rdx]
       jmp      SHORT G_M63408_IG33
						;; size=27 bbWeight=0.06 PerfScore 0.78
G_M63408_IG32:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdx r8 r13-r15] +[rbp]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      r14d, eax
       jmp      G_M63408_IG11
						;; size=21 bbWeight=0.36 PerfScore 3.39
G_M63408_IG33:        ; gcrefRegs=0000E0CC {rdx rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbp] +[rdx r13-r15]
       lea      rcx, bword ptr [rbx+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
						;; size=9 bbWeight=0.06 PerfScore 0.10
G_M63408_IG34:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       mov      rbx, gword ptr [rbx+08H]
						;; size=4 bbWeight=0.97 PerfScore 1.94
G_M63408_IG35:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       mov      rax, qword ptr [rbx]
       mov      rcx, 0xD1FFAB1E      ; RuntimeType
       cmp      rax, rcx
       jne      SHORT G_M63408_IG37
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       cmp      eax, 16
       jne      SHORT G_M63408_IG40
       jmp      G_M63408_IG97
						;; size=36 bbWeight=0.97 PerfScore 7.74
G_M63408_IG36:        ; gcrefRegs=000080EA {rcx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13-r14] +[rcx rbp]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+10H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      r14d, eax
       jmp      G_M63408_IG18
						;; size=21 bbWeight=0.18 PerfScore 1.71
G_M63408_IG37:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rbp] +[r13-r14]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      qword ptr [rsp+50H], rax
       mov      rdx, qword ptr [rax+58H]
       call     [rdx+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M63408_IG40
						;; size=19 bbWeight=0.97 PerfScore 7.26
G_M63408_IG38:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       mov      r8, qword ptr [rsp+50H]
       jmp      G_M63408_IG146
						;; size=10 bbWeight=0.01 PerfScore 0.03
G_M63408_IG39:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13-r15] +[rbp]
       xor      r14, r14
       ; gcrRegs +[r14]
       xor      ecx, ecx
       jmp      G_M63408_IG19
						;; size=10 bbWeight=0.22 PerfScore 0.55
G_M63408_IG40:        ; gcrefRegs=0000E0C0 {rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx rbp] +[r13 r15]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      r8d, 0x401
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r13]
       ; gcr arg pop 0
						;; size=24 bbWeight=0.96 PerfScore 3.83
G_M63408_IG41:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       inc      r12d
       cmp      r12d, ebp
       jl       G_M63408_IG21
						;; size=12 bbWeight=0.97 PerfScore 1.45
G_M63408_IG42:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r14]
       jmp      G_M63408_IG65
						;; size=5 bbWeight=0.94 PerfScore 1.88
G_M63408_IG43:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r15] +[rbx rbp]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+50H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       jmp      G_M63408_IG80
						;; size=21 bbWeight=0.08 PerfScore 0.72
G_M63408_IG44:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      rdx, gword ptr [rdx+10H]
       cmp      byte  ptr [rdx+8CH], 0
       jne      G_M63408_IG142
       mov      rcx, gword ptr [rbx+08H]
       ; gcrRegs +[rcx]
						;; size=24 bbWeight=0.23 PerfScore 1.88
G_M63408_IG45:        ; gcrefRegs=000040EA {rcx rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdx]
       test     rcx, rcx
       je       G_M63408_IG20
						;; size=9 bbWeight=0.30 PerfScore 0.38
G_M63408_IG46:        ; gcrefRegs=000040EA {rcx rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rcx], rax
       jne      G_M63408_IG143
       mov      rax, 0xD1FFAB1E      ; code for RuntimeType:get_IsCollectible
       call     [rax]RuntimeType:get_IsCollectible():bool:this
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
						;; size=31 bbWeight=0.30 PerfScore 2.27
G_M63408_IG47:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       test     eax, eax
       jne      G_M63408_IG20
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      r8, r14
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for CacheDict`2:Add
       call     [rax]CacheDict`2:Add(__Canon,__Canon):this
       ; gcrRegs -[rcx rdx rbx rbp r8]
       ; gcr arg pop 0
       jmp      G_M63408_IG20
						;; size=34 bbWeight=0.30 PerfScore 2.20
G_M63408_IG48:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdi r14] +[rbx r15]
       mov      rcx, gword ptr [rbx+08H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [rbx+58H]
       lea      eax, [rdx+01H]
       mov      dword ptr [rbx+58H], eax
       cmp      edx, dword ptr [rcx+08H]
       jae      G_M63408_IG153
       mov      edx, edx
       mov      byte  ptr [rcx+rdx+10H], r13b
						;; size=29 bbWeight=0.93 PerfScore 10.03
G_M63408_IG49:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx]
       mov      r13d, r14d
       sar      r13d, 28
       cmp      dword ptr [rbx+74H], 0
       jge      SHORT G_M63408_IG51
						;; size=13 bbWeight=0.94 PerfScore 4.46
G_M63408_IG50:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       xor      eax, eax
       mov      dword ptr [rbx+74H], eax
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M63408_IG51:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       add      r13d, dword ptr [rbx+74H]
       mov      dword ptr [rbx+74H], r13d
       test     r13d, r13d
       jl       G_M63408_IG127
       cmp      dword ptr [rbx+7CH], r13d
       jl       G_M63408_IG79
						;; size=27 bbWeight=0.94 PerfScore 8.71
G_M63408_IG52:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       mov      ecx, dword ptr [rbx+74H]
       mov      dword ptr [rbx+78H], ecx
       and      r14d, 0xD1FFAB1E
       jne      G_M63408_IG78
						;; size=19 bbWeight=0.94 PerfScore 3.99
G_M63408_IG53:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       cmp      dword ptr [rbx+74H], 0
       jl       G_M63408_IG63
						;; size=10 bbWeight=0.94 PerfScore 3.76
G_M63408_IG54:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       mov      eax, dword ptr [rbx+74H]
       inc      eax
       mov      dword ptr [rbx+74H], eax
       test     eax, eax
       jl       G_M63408_IG128
       cmp      dword ptr [rbx+7CH], eax
       jl       G_M63408_IG62
						;; size=25 bbWeight=0.94 PerfScore 8.00
G_M63408_IG55:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref, isz
       mov      ecx, dword ptr [rbx+74H]
       mov      dword ptr [rbx+78H], ecx
       test     r14d, r14d
       jne      SHORT G_M63408_IG60
						;; size=11 bbWeight=0.94 PerfScore 3.99
G_M63408_IG56:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [rbx+08H]
       ; gcrRegs +[rcx]
       mov      r9d, dword ptr [rbx+58H]
       test     rcx, rcx
       je       G_M63408_IG129
       cmp      dword ptr [rcx+08H], r9d
       jb       G_M63408_IG130
       mov      edx, r9d
       lea      rdx, bword ptr [rcx+rdx+10H]
       ; byrRegs +[rdx]
       mov      r10d, dword ptr [rcx+08H]
       sub      r10d, r9d
						;; size=42 bbWeight=0.94 PerfScore 11.98
G_M63408_IG57:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000004 {rdx}, byref
       ; gcrRegs -[rcx]
       cmp      r10d, 4
       jb       G_M63408_IG131
       mov      dword ptr [rdx], edi
       add      dword ptr [rbx+58H], 4
						;; size=16 bbWeight=0.94 PerfScore 4.93
G_M63408_IG58:        ; gcrefRegs=00008040 {rsi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx]
       ; byrRegs -[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r15
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rsi r15]
       ; gcr arg pop 0
       nop      
						;; size=19 bbWeight=0.94 PerfScore 3.76
G_M63408_IG59:        ; , epilog, nogc, extend
       add      rsp, 104
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=0.94 PerfScore 4.93
G_M63408_IG60:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs +[rbx rsi r15]
       mov      dword ptr [rbx+74H], -1
       jmp      SHORT G_M63408_IG56
						;; size=9 bbWeight=0.07 PerfScore 0.22
G_M63408_IG61:        ; gcVars=000000000000000000000000000000008000000000000000 {V40}, gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[rbx] +[rdi r14]
       ; GC ptr vars +{V40 V63}
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rsp+40H]
       ; gcrRegs +[rdx]
       mov      r8d, 0x401
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; GC ptr vars -{V40 V63}
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       jmp      SHORT G_M63408_IG64
						;; size=28 bbWeight=0.01 PerfScore 0.07
G_M63408_IG62:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdi r14] +[rbx]
       mov      dword ptr [rbx+7CH], eax
       jmp      G_M63408_IG55
						;; size=8 bbWeight=0.14 PerfScore 0.41
G_M63408_IG63:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       xor      ecx, ecx
       mov      dword ptr [rbx+74H], ecx
       jmp      G_M63408_IG54
						;; size=10 bbWeight=0.00 PerfScore 0.00
G_M63408_IG64:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx] +[rdi r14]
       inc      r12d
       cmp      r12d, ebp
       jl       G_M63408_IG99
						;; size=12 bbWeight=0.01 PerfScore 0.01
G_M63408_IG65:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r14]
       mov      rbx, gword ptr [rsi+10H]
       ; gcrRegs +[rbx]
       mov      rcx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rcx, gword ptr [rcx]
       ; gcrRegs +[rcx]
       add      rcx, 8
       ; gcrRegs -[rcx]
       ; byrRegs +[rcx]
       mov      ebp, dword ptr [rcx]
       mov      r14d, dword ptr [rcx+04H]
       mov      r8, gword ptr [rdi+10H]
       ; gcrRegs +[r8]
       mov      rcx, 0xD1FFAB1E      ; DynamicILGenerator
       ; byrRegs -[rcx]
       cmp      qword ptr [rbx], rcx
       jne      G_M63408_IG132
       cmp      byte  ptr [rbx], bl
       test     r8, r8
       je       G_M63408_IG121
       mov      rdi, r8
       mov      rcx, 0xD1FFAB1E      ; RuntimeConstructorInfo
       cmp      qword ptr [rdi], rcx
       jne      G_M63408_IG77
						;; size=83 bbWeight=0.94 PerfScore 22.07
G_M63408_IG66:        ; gcrefRegs=000080C8 {rbx rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r8]
       test     rdi, rdi
       je       G_M63408_IG123
       mov      r12, gword ptr [rdi+08H]
       ; gcrRegs +[r12]
       test     r12, r12
       je       G_M63408_IG81
						;; size=22 bbWeight=0.94 PerfScore 4.23
G_M63408_IG67:        ; gcrefRegs=000090C8 {rbx rsi rdi r12 r15}, byrefRegs=00000000 {}, byref, isz
       cmp      byte  ptr [r12], r12b
       mov      rcx, r12
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M63408_IG69
						;; size=16 bbWeight=0.93 PerfScore 5.13
G_M63408_IG68:        ; gcrefRegs=000090C8 {rbx rsi rdi r12 r15}, byrefRegs=00000000 {}, byref, isz
       cmp      byte  ptr [r12], r12b
       mov      rcx, r12
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       cmp      eax, 20
       je       SHORT G_M63408_IG69
       cmp      eax, 29
       jne      G_M63408_IG81
						;; size=26 bbWeight=0.77 PerfScore 5.22
G_M63408_IG69:        ; gcrefRegs=000090C8 {rbx rsi rdi r12 r15}, byrefRegs=00000000 {}, byref
       mov      r13, gword ptr [rbx+80H]
       ; gcrRegs +[r13]
       cmp      byte  ptr [rdi], dil
       cmp      byte  ptr [r12], r12b
       mov      rcx, 0xD1FFAB1E      ; GenericMethodInfo
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+30H], rax
       ; GC ptr vars +{V130}
       mov      r8, gword ptr [r13+08H]
       ; gcrRegs +[r8]
       mov      gword ptr [rsp+28H], r8
       ; GC ptr vars +{V131}
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       lea      rcx, bword ptr [rax+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rax rdx rdi r8]
       ; byrRegs -[rcx]
       mov      rdi, gword ptr [rsp+30H]
       ; gcrRegs +[rdi]
       lea      rcx, bword ptr [rdi+10H]
       ; byrRegs +[rcx]
       mov      rdx, r12
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx r12]
       ; byrRegs -[rcx]
       mov      r12, gword ptr [rsp+28H]
       ; gcrRegs +[r12]
       inc      dword ptr [r12+14H]
       mov      rcx, gword ptr [r12+08H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [r12+10H]
       cmp      dword ptr [rcx+08H], edx
       jbe      G_M63408_IG96
						;; size=101 bbWeight=0.77 PerfScore 23.02
G_M63408_IG70:        ; gcVars=000000000000000000000000000000000000000000400000 {V130}, gcrefRegs=0000B0CA {rcx rbx rsi rdi r12 r13 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; GC ptr vars -{V131}
       lea      r8d, [rdx+01H]
       mov      dword ptr [r12+10H], r8d
       movsxd   rdx, edx
       mov      r8, rdi
       ; gcrRegs +[r8]
       ; GC ptr vars -{V130}
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx rdi r8 r12]
       ; gcr arg pop 0
						;; size=20 bbWeight=0.13 PerfScore 0.39
G_M63408_IG71:        ; gcrefRegs=0000A048 {rbx rsi r13 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [r13+08H]
       ; gcrRegs +[rcx]
       mov      edi, dword ptr [rcx+10H]
       dec      edi
       or       edi, 0xD1FFAB1E
						;; size=15 bbWeight=0.16 PerfScore 0.72
G_M63408_IG72:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx r13]
       mov      ecx, dword ptr [rbx+58H]
       add      ecx, 7
       mov      rdx, gword ptr [rbx+08H]
       ; gcrRegs +[rdx]
       cmp      ecx, dword ptr [rdx+08H]
       jge      SHORT G_M63408_IG76
						;; size=15 bbWeight=0.94 PerfScore 7.75
G_M63408_IG73:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdx]
       mov      ecx, r14d
       movsx    r13, bp
       sar      ecx, 22
       and      ecx, 3
       cmp      ecx, 1
       je       G_M63408_IG48
						;; size=22 bbWeight=0.94 PerfScore 2.35
G_M63408_IG74:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [rbx+08H]
       ; gcrRegs +[rcx]
       mov      eax, dword ptr [rbx+58H]
       test     rcx, rcx
       je       G_M63408_IG126
       cmp      dword ptr [rcx+08H], eax
       jb       G_M63408_IG130
       mov      edx, eax
       lea      rdx, bword ptr [rcx+rdx+10H]
       ; byrRegs +[rdx]
       mov      r8d, dword ptr [rcx+08H]
       sub      r8d, eax
						;; size=39 bbWeight=0.01 PerfScore 0.08
G_M63408_IG75:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000004 {rdx}, byref
       ; gcrRegs -[rcx]
       mov      ecx, r13d
       ror      cx, 8
       movsx    rcx, cx
       cmp      r8d, 2
       jb       G_M63408_IG131
       mov      word  ptr [rdx], cx
       add      dword ptr [rbx+58H], 2
       jmp      G_M63408_IG49
						;; size=33 bbWeight=0.01 PerfScore 0.05
G_M63408_IG76:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rdx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      edx, 7
       mov      rax, 0xD1FFAB1E      ; code for ILGenerator:IncreaseCapacity
       call     [rax]ILGenerator:IncreaseCapacity(int):this
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       jmp      SHORT G_M63408_IG73
						;; size=22 bbWeight=0.01 PerfScore 0.05
G_M63408_IG77:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       xor      rdi, rdi
       ; gcrRegs +[rdi]
       jmp      G_M63408_IG66
						;; size=7 bbWeight=0.23 PerfScore 0.53
G_M63408_IG78:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdi]
       mov      dword ptr [rbx+74H], -1
       jmp      G_M63408_IG53
						;; size=12 bbWeight=0.07 PerfScore 0.22
G_M63408_IG79:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       mov      dword ptr [rbx+7CH], r13d
       jmp      G_M63408_IG52
						;; size=9 bbWeight=0.14 PerfScore 0.41
G_M63408_IG80:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r15] +[rbp rdi r14]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       jmp      G_M63408_IG45
						;; size=21 bbWeight=0.08 PerfScore 0.72
G_M63408_IG81:        ; gcrefRegs=000080C8 {rbx rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rcx rbp r14] +[r15]
       mov      r12, gword ptr [rbx+80H]
       ; gcrRegs +[r12]
       cmp      byte  ptr [rdi], dil
       cmp      byte  ptr [r12], r12b
       mov      r13, rdi
       ; gcrRegs +[r13]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rdi], rcx
       jne      G_M63408_IG124
       mov      rax, qword ptr [rdi+50H]
						;; size=40 bbWeight=0.78 PerfScore 11.31
G_M63408_IG82:        ; gcrefRegs=0000B0C8 {rbx rsi rdi r12 r13 r15}, byrefRegs=00000000 {}, byref, isz
       mov      qword ptr [rsp+60H], rax
       mov      rcx, rax
       call     hackishModuleName:hackishMethodName()
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M63408_IG83
       mov      rcx, qword ptr [rsp+60H]
       call     hackishModuleName:hackishMethodName(long):RuntimeType
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       test     rax, rax
       je       SHORT G_M63408_IG83
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M63408_IG125
						;; size=48 bbWeight=0.78 PerfScore 7.22
G_M63408_IG83:        ; gcrefRegs=000090C8 {rbx rsi rdi r12 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r13]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodHandle
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      gword ptr [rsp+20H], r8
       ; GC ptr vars +{V143}
       mov      r13, gword ptr [r12+08H]
       ; gcrRegs +[r13]
       lea      rcx, bword ptr [r8+08H]
       ; byrRegs +[rcx]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rax rdx rdi r8]
       ; byrRegs -[rcx]
       mov      r8, gword ptr [rsp+20H]
       ; gcrRegs +[r8]
       inc      dword ptr [r13+14H]
       mov      rcx, gword ptr [r13+08H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [r13+10H]
       cmp      dword ptr [rcx+08H], edx
       jbe      SHORT G_M63408_IG88
						;; size=62 bbWeight=0.78 PerfScore 14.24
G_M63408_IG84:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000B14A {rcx rbx rsi r8 r12 r13 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; GC ptr vars -{V143}
       lea      eax, [rdx+01H]
       mov      dword ptr [r13+10H], eax
       movsxd   rdx, edx
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx r8 r13]
       ; gcr arg pop 0
						;; size=15 bbWeight=0.64 PerfScore 1.75
G_M63408_IG85:        ; gcrefRegs=00009048 {rbx rsi r12 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [r12+08H]
       ; gcrRegs +[rcx]
       mov      edi, dword ptr [rcx+10H]
       dec      edi
       or       edi, 0xD1FFAB1E
       jmp      G_M63408_IG72
						;; size=21 bbWeight=0.78 PerfScore 5.07
G_M63408_IG86:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx r12] +[rdi r13-r14]
       mov      r8, r13
       ; gcrRegs +[r8]
       test     r8, r8
       jne      SHORT G_M63408_IG90
						;; size=8 bbWeight=0.01 PerfScore 0.02
G_M63408_IG87:        ; gcrefRegs=0000C1C8 {rbx rsi rdi r8 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13]
       mov      rcx, gword ptr [r8+08H]
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       xor      edx, edx
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r8] +[rax]
       ; gcr arg pop 0
       jmp      G_M63408_IG23
						;; size=24 bbWeight=0.01 PerfScore 0.09
G_M63408_IG88:        ; gcrefRegs=0000B148 {rbx rsi r8 r12 r13 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rdi r14] +[r8 r12-r13]
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rdx, r8
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r8 r13]
       ; gcr arg pop 0
       jmp      SHORT G_M63408_IG85
						;; size=20 bbWeight=0.14 PerfScore 0.82
G_M63408_IG89:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r12] +[rdi r13-r14]
       mov      eax, dword ptr [rbx+2CH]
       cmp      eax, -1
       je       G_M63408_IG144
       jmp      G_M63408_IG31
						;; size=17 bbWeight=0.06 PerfScore 0.33
G_M63408_IG90:        ; gcrefRegs=0000E1C8 {rbx rsi rdi r8 r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[r8]
       mov      rcx, 0xD1FFAB1E      ; ReadOnlyCollection`1
       cmp      qword ptr [r8], rcx
       je       SHORT G_M63408_IG87
						;; size=15 bbWeight=0.01 PerfScore 0.03
G_M63408_IG91:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r8]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for HELPER:CORINFO_HELP_CHKCASTCLASS_SPECIAL
       call     [rax]CORINFO_HELP_CHKCASTCLASS_SPECIAL
       ; gcrRegs -[rdx r13] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       jmp      SHORT G_M63408_IG87
						;; size=20 bbWeight=0.00 PerfScore 0.02
G_M63408_IG92:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rbx r8 r14-r15]
       mov      r14, 0xD1FFAB1E      ; NewValueTypeExpression
       cmp      qword ptr [rdi], r14
       jne      G_M63408_IG133
       mov      rdx, gword ptr [rdi+20H]
       ; gcrRegs +[rdx]
						;; size=23 bbWeight=0.06 PerfScore 0.38
G_M63408_IG93:        ; gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for LambdaCompiler:GetLocal
       call     [rax]LambdaCompiler:GetLocal(Type):LocalBuilder:this
       ; gcrRegs -[rcx rdx] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
       mov      rcx, gword ptr [rsi+10H]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; DynamicILGenerator
       cmp      qword ptr [rcx], rdx
       jne      G_M63408_IG134
       mov      rdx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rdx, qword ptr [rdx+08H]
       ; gcrRegs -[rdx]
       mov      r8, r13
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for ILGenerator:Emit
       ; gcrRegs -[rax]
       cmp      dword ptr [rcx], ecx
       call     [rax]ILGenerator:Emit(OpCode,LocalBuilder):this
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       mov      rbp, gword ptr [rsi+10H]
       ; gcrRegs +[rbp]
       mov      rcx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rcx, gword ptr [rcx]
       ; gcrRegs +[rcx]
       add      rcx, 8
       ; gcrRegs -[rcx]
       ; byrRegs +[rcx]
       mov      r12d, dword ptr [rcx]
       mov      r15d, dword ptr [rcx+04H]
       cmp      qword ptr [rdi], r14
       jne      G_M63408_IG135
       mov      r8, gword ptr [rdi+20H]
       ; gcrRegs +[r8]
       mov      rcx, 0xD1FFAB1E      ; DynamicILGenerator
       ; byrRegs -[rcx]
       cmp      qword ptr [rbp], rcx
       jne      G_M63408_IG136
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      dword ptr [rsp+58H], r12d
       mov      dword ptr [rsp+5CH], r15d
       mov      rdx, qword ptr [rsp+58H]
       mov      rax, 0xD1FFAB1E      ; code for DynamicILGenerator:Emit
       cmp      dword ptr [rcx], ecx
       call     [rax]DynamicILGenerator:Emit(OpCode,Type):this
       ; gcrRegs -[rcx rbp rdi r8]
       ; gcr arg pop 0
       mov      rcx, gword ptr [rsi+10H]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; DynamicILGenerator
       cmp      qword ptr [rcx], rdx
       jne      G_M63408_IG137
       mov      rdx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rdx, qword ptr [rdx+08H]
       ; gcrRegs -[rdx]
       mov      r8, r13
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for ILGenerator:Emit
       cmp      dword ptr [rcx], ecx
       call     [rax]ILGenerator:Emit(OpCode,LocalBuilder):this
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
						;; size=225 bbWeight=0.06 PerfScore 4.01
G_M63408_IG94:        ; gcrefRegs=00002040 {rsi r13}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [rsi+48H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [r13+08H]
       ; gcrRegs +[rdx]
       mov      r8, r13
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for KeyedStack`2:Push
       cmp      dword ptr [rcx], ecx
       call     [rax]KeyedStack`2:Push(__Canon,__Canon):this
       ; gcrRegs -[rcx rdx rsi r8 r13]
       ; gcr arg pop 0
       nop      
						;; size=26 bbWeight=0.06 PerfScore 0.65
G_M63408_IG95:        ; , epilog, nogc, extend
       add      rsp, 104
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=0.06 PerfScore 0.32
G_M63408_IG96:        ; gcVars=000000000000000000000000000000000000000000400000 {V130}, gcrefRegs=0000B0C8 {rbx rsi rdi r12 r13 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs +[rbx rsi rdi r12-r13 r15]
       ; GC ptr vars +{V22 V130}
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; GC ptr vars -{V22 V130}
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rdi r12]
       ; gcr arg pop 0
       jmp      G_M63408_IG71
						;; size=23 bbWeight=0.03 PerfScore 0.17
G_M63408_IG97:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rdi r14]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbx] +[rax]
       ; gcr arg pop 0
						;; size=8 bbWeight=0.01 PerfScore 0.01
G_M63408_IG98:        ; gcrefRegs=0000E0C1 {rax rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for LambdaCompiler:EmitAddressWriteBack
       ; gcrRegs -[rax]
       call     [rax]LambdaCompiler:EmitAddressWriteBack(Expression,Type):WriteBack:this
       ; gcrRegs -[rcx rdx r8 r13] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       test     rbx, rbx
       jne      G_M63408_IG147
       jmp      G_M63408_IG41
						;; size=38 bbWeight=0.01 PerfScore 0.08
G_M63408_IG99:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rbx]
       cmp      r12d, r13d
       jae      G_M63408_IG153
       mov      edx, r12d
       mov      rbx, gword ptr [r14+8*rdx+10H]
       ; gcrRegs +[rbx]
       mov      rdx, 0xD1FFAB1E      ; InstanceMethodCallExpression1
       cmp      qword ptr [rdi], rdx
       jne      SHORT G_M63408_IG104
						;; size=32 bbWeight=0.01 PerfScore 0.08
G_M63408_IG100:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       test     r12d, r12d
       jne      G_M63408_IG122
       mov      rdx, gword ptr [rdi+18H]
       ; gcrRegs +[rdx]
       mov      rax, rdx
       ; gcrRegs +[rax]
       mov      gword ptr [rsp+38H], rax
       ; GC ptr vars +{V102}
       mov      rdx, rax
       mov      rcx, 0xD1FFAB1E      ; Expression
       mov      r8, 0xD1FFAB1E      ; code for HELPER:CORINFO_HELP_ISINSTANCEOFCLASS
       call     [r8]CORINFO_HELP_ISINSTANCEOFCLASS
       ; gcrRegs -[rdx]
       ; gcr arg pop 0
       test     rax, rax
       je       SHORT G_M63408_IG102
						;; size=52 bbWeight=0.00 PerfScore 0.05
G_M63408_IG101:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000C0C9 {rax rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; GC ptr vars -{V102}
       jmp      SHORT G_M63408_IG105
						;; size=2 bbWeight=0.00 PerfScore 0.01
G_M63408_IG102:        ; gcVars=000000000000000000000000000000004000000000000000 {V102}, gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[rax]
       ; GC ptr vars +{V62 V102}
       mov      rdx, gword ptr [rsp+38H]
       ; gcrRegs +[rdx]
       mov      r8, rdx
       ; gcrRegs +[r8]
       test     r8, r8
       jne      SHORT G_M63408_IG107
						;; size=13 bbWeight=0.00 PerfScore 0.00
G_M63408_IG103:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000C1C8 {rbx rsi rdi r8 r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[rdx]
       ; GC ptr vars -{V62 V102}
       mov      rcx, gword ptr [r8+08H]
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       xor      edx, edx
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r8] +[rax]
       ; gcr arg pop 0
       jmp      SHORT G_M63408_IG101
						;; size=21 bbWeight=0.00 PerfScore 0.00
G_M63408_IG104:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      edx, r12d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName(int):Expression:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
						;; size=19 bbWeight=0.00 PerfScore 0.02
G_M63408_IG105:        ; gcrefRegs=0000C0C9 {rax rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       mov      gword ptr [rsp+40H], rax
       ; GC ptr vars +{V40}
       mov      rcx, 0xD1FFAB1E      ; RuntimeParameterInfo
       cmp      qword ptr [rbx], rcx
       jne      G_M63408_IG151
       cmp      gword ptr [rbx+08H], 0
       jne      SHORT G_M63408_IG111
						;; size=31 bbWeight=0.01 PerfScore 0.09
G_M63408_IG106:        ; gcVars=000000000000000000000000000000008000000000000000 {V40}, gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[rax]
       jmp      SHORT G_M63408_IG113
						;; size=2 bbWeight=0.00 PerfScore 0.00
G_M63408_IG107:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000C1CC {rdx rbx rsi rdi r8 r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs +[rdx r8]
       ; GC ptr vars -{V40}
       mov      rcx, 0xD1FFAB1E      ; ReadOnlyCollection`1
       cmp      qword ptr [r8], rcx
       je       SHORT G_M63408_IG103
						;; size=15 bbWeight=0.00 PerfScore 0.00
G_M63408_IG108:        ; gcrefRegs=0000C0CC {rdx rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r8]
       mov      rax, 0xD1FFAB1E      ; code for HELPER:CORINFO_HELP_CHKCASTCLASS_SPECIAL
       call     [rax]CORINFO_HELP_CHKCASTCLASS_SPECIAL
       ; gcrRegs -[rdx] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       jmp      SHORT G_M63408_IG103
						;; size=17 bbWeight=0.00 PerfScore 0.00
G_M63408_IG109:        ; gcVars=000000000000000000000000000000008000000000000000 {V40}, gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rax r8]
       ; GC ptr vars +{V40 V63}
       mov      rcx, gword ptr [rbx+30H]
       ; gcrRegs +[rcx]
       mov      r8, gword ptr [rcx+08H]
       ; gcrRegs +[r8]
       cmp      edx, dword ptr [r8+08H]
       jae      G_M63408_IG153
       mov      edx, edx
       mov      rdx, gword ptr [r8+8*rdx+10H]
       ; gcrRegs +[rdx]
						;; size=25 bbWeight=0.00 PerfScore 0.01
G_M63408_IG110:        ; gcrefRegs=0000C0CC {rdx rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx r8]
       lea      rcx, bword ptr [rbx+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
						;; size=9 bbWeight=0.00 PerfScore 0.00
G_M63408_IG111:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       mov      rbx, gword ptr [rbx+08H]
						;; size=4 bbWeight=0.01 PerfScore 0.02
G_M63408_IG112:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       mov      rdx, qword ptr [rbx]
       mov      qword ptr [rsp+48H], rdx
       mov      rcx, 0xD1FFAB1E      ; RuntimeType
       cmp      rdx, rcx
       jne      SHORT G_M63408_IG114
       cmp      byte  ptr [rbx], bl
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       cmp      eax, 16
       jne      G_M63408_IG61
       jmp      SHORT G_M63408_IG116
						;; size=44 bbWeight=0.01 PerfScore 0.12
G_M63408_IG113:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       mov      edx, dword ptr [rbx+2CH]
       cmp      edx, -1
       je       G_M63408_IG150
       jmp      SHORT G_M63408_IG109
						;; size=14 bbWeight=0.00 PerfScore 0.00
G_M63408_IG114:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      r8, qword ptr [rdx+58H]
       call     [r8+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M63408_IG61
						;; size=19 bbWeight=0.01 PerfScore 0.06
G_M63408_IG115:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       jmp      G_M63408_IG152
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M63408_IG116:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       cmp      byte  ptr [rbx], bl
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbx] +[rax]
       ; gcr arg pop 0
						;; size=10 bbWeight=0.00 PerfScore 0.00
G_M63408_IG117:        ; gcrefRegs=0000C0C1 {rax rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rsp+40H]
       ; gcrRegs +[rdx]
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for LambdaCompiler:EmitAddressWriteBack
       ; gcrRegs -[rax]
       ; GC ptr vars -{V40 V63}
       call     [rax]LambdaCompiler:EmitAddressWriteBack(Expression,Type):WriteBack:this
       ; gcrRegs -[rcx rdx r8] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       test     rbx, rbx
       je       G_M63408_IG64
						;; size=35 bbWeight=0.00 PerfScore 0.00
G_M63408_IG118:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax]
       test     r15, r15
       jne      SHORT G_M63408_IG119
       mov      rcx, 0xD1FFAB1E      ; List`1
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs -[r15] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for List`1:.ctor
       ; gcrRegs -[rax]
       call     [rax]List`1:.ctor():this
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
						;; size=38 bbWeight=0    PerfScore 0.00
G_M63408_IG119:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       inc      dword ptr [r15+14H]
       mov      rcx, gword ptr [r15+08H]
       ; gcrRegs +[rcx]
       mov      eax, dword ptr [r15+10H]
       cmp      dword ptr [rcx+08H], eax
       jbe      SHORT G_M63408_IG120
       lea      edx, [rax+01H]
       mov      dword ptr [r15+10H], edx
       movsxd   rdx, eax
       mov      r8, rbx
       ; gcrRegs +[r8]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx rbx r8]
       ; gcr arg pop 0
       jmp      G_M63408_IG64
						;; size=40 bbWeight=0    PerfScore 0.00
G_M63408_IG120:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbx]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rbx]
       ; gcr arg pop 0
       jmp      G_M63408_IG64
						;; size=23 bbWeight=0    PerfScore 0.00
G_M63408_IG121:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi rdi r14-r15]
       mov      ecx, 0x1A038
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for ArgumentNullException:Throw
       ; gcrRegs -[rax]
       call     [rax]ArgumentNullException:Throw(String)
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       int3     
						;; size=36 bbWeight=0    PerfScore 0.00
G_M63408_IG122:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentOutOfRangeException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x262B
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for ArgumentOutOfRangeException:.ctor
       ; gcrRegs -[rax]
       call     [rax]ArgumentOutOfRangeException:.ctor(String):this
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=64 bbWeight=0    PerfScore 0.00
G_M63408_IG123:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0x7F15
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName(String):String
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       mov      ecx, 0x1A038
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rdx, rbp
       ; gcrRegs +[rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for ArgumentException:.ctor
       ; gcrRegs -[rax]
       call     [rax]ArgumentException:.ctor(String,String):this
       ; gcrRegs -[rcx rdx rbp r8]
       ; gcr arg pop 0
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rdi]
       ; gcr arg pop 0
						;; size=105 bbWeight=0    PerfScore 0.00
G_M63408_IG124:        ; gcrefRegs=0000B0C8 {rbx rsi rdi r12 r13 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbx rsi rdi r12-r13 r15]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rdx, rax
       jmp      G_M63408_IG82
						;; size=24 bbWeight=0    PerfScore 0.00
G_M63408_IG125:        ; gcrefRegs=00002000 {r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx rsi rdi r12 r15]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for RuntimeType:GetMethodBase
       call     [rax]RuntimeType:GetMethodBase(RuntimeType,IRuntimeMethodInfo):MethodBase
       ; gcrRegs -[rcx rdx r13] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbx]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+68H]
       call     [rax+08H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x7D2B
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName(String):String
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      r8, r14
       ; gcrRegs +[r8]
       mov      rax, 0xD1FFAB1E      ; code for SR:Format
       ; gcrRegs -[rax]
       call     [rax]SR:Format(String,Object,Object):String
       ; gcrRegs -[rcx rdx rbx r8 r14] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for ArgumentException:.ctor
       ; gcrRegs -[rax]
       call     [rax]ArgumentException:.ctor(String):this
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=149 bbWeight=0    PerfScore 0.00
G_M63408_IG126:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[rbx rsi r15]
       test     eax, eax
       jne      SHORT G_M63408_IG130
       xor      rdx, rdx
       ; byrRegs +[rdx]
       xor      r8d, r8d
       jmp      G_M63408_IG75
						;; size=14 bbWeight=0    PerfScore 0.00
G_M63408_IG127:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rdx]
       movsxd   rax, r13d
       sub      qword ptr [rbx+50H], rax
       xor      eax, eax
       mov      dword ptr [rbx+74H], eax
       jmp      G_M63408_IG52
						;; size=17 bbWeight=0    PerfScore 0.00
G_M63408_IG128:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref
       cdqe     
       sub      qword ptr [rbx+50H], rax
       xor      eax, eax
       mov      dword ptr [rbx+74H], eax
       jmp      G_M63408_IG55
						;; size=16 bbWeight=0    PerfScore 0.00
G_M63408_IG129:        ; gcrefRegs=00008048 {rbx rsi r15}, byrefRegs=00000000 {}, byref, isz
       test     r9d, r9d
       jne      SHORT G_M63408_IG130
       xor      rdx, rdx
       ; byrRegs +[rdx]
       xor      r10d, r10d
       jmp      G_M63408_IG57
						;; size=15 bbWeight=0    PerfScore 0.00
G_M63408_IG130:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx rsi r15]
       ; byrRegs -[rdx]
       mov      rax, 0xD1FFAB1E      ; code for ThrowHelper:ThrowArgumentOutOfRangeException
       call     [rax]ThrowHelper:ThrowArgumentOutOfRangeException()
       ; gcr arg pop 0
       int3     
						;; size=13 bbWeight=0    PerfScore 0.00
G_M63408_IG131:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      ecx, 41
       mov      rax, 0xD1FFAB1E      ; code for ThrowHelper:ThrowArgumentOutOfRangeException
       call     [rax]ThrowHelper:ThrowArgumentOutOfRangeException(int)
       ; gcr arg pop 0
       int3     
						;; size=18 bbWeight=0    PerfScore 0.00
G_M63408_IG132:        ; gcrefRegs=00008148 {rbx rsi r8 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbx rsi r8 r15]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      dword ptr [rsp+58H], ebp
       mov      dword ptr [rsp+5CH], r14d
       mov      rdx, qword ptr [rsp+58H]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+48H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbx r8]
       ; gcr arg pop 0
       jmp      G_M63408_IG58
						;; size=32 bbWeight=0    PerfScore 0.00
G_M63408_IG133:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r15] +[rdi]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       jmp      G_M63408_IG93
						;; size=21 bbWeight=0    PerfScore 0.00
G_M63408_IG134:        ; gcrefRegs=000020C2 {rcx rsi rdi r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rdx] +[rcx r13]
       mov      rdx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rdx, qword ptr [rdx+08H]
       ; gcrRegs -[rdx]
       mov      r8, r13
       ; gcrRegs +[r8]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+58H]
       call     [rax]ILGenerator:Emit(OpCode,LocalBuilder):this
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       mov      rbp, gword ptr [rsi+10H]
       ; gcrRegs +[rbp]
       mov      rcx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rcx, gword ptr [rcx]
       ; gcrRegs +[rcx]
       add      rcx, 8
       ; gcrRegs -[rcx]
       ; byrRegs +[rcx]
       mov      r12d, dword ptr [rcx]
       mov      r15d, dword ptr [rcx+04H]
						;; size=57 bbWeight=0    PerfScore 0.00
G_M63408_IG135:        ; gcrefRegs=000020E0 {rbp rsi rdi r13}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rcx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx rdi] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
						;; size=16 bbWeight=0    PerfScore 0.00
G_M63408_IG136:        ; gcrefRegs=00002160 {rbp rsi r8 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      dword ptr [rsp+58H], r12d
       mov      dword ptr [rsp+5CH], r15d
       mov      rdx, qword ptr [rsp+58H]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+50H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbp r8]
       ; gcr arg pop 0
       mov      rcx, gword ptr [rsi+10H]
       ; gcrRegs +[rcx]
						;; size=31 bbWeight=0    PerfScore 0.00
G_M63408_IG137:        ; gcrefRegs=00002042 {rcx rsi r13}, byrefRegs=00000000 {}, byref
       mov      rdx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rdx, qword ptr [rdx+08H]
       ; gcrRegs -[rdx]
       mov      r8, r13
       ; gcrRegs +[r8]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+58H]
       call     [rax]ILGenerator:Emit(OpCode,LocalBuilder):this
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       jmp      G_M63408_IG94
						;; size=34 bbWeight=0    PerfScore 0.00
G_M63408_IG138:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13] +[rdi]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       jmp      G_M63408_IG07
						;; size=7 bbWeight=0    PerfScore 0.00
G_M63408_IG139:        ; gcrefRegs=000000C2 {rcx rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       ; gcrRegs -[rax]
       cmp      qword ptr [rcx], rax
       je       G_M63408_IG08
						;; size=32 bbWeight=0    PerfScore 0.00
G_M63408_IG140:        ; gcrefRegs=000000C2 {rcx rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+68H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     al, 128
       je       G_M63408_IG09
						;; size=18 bbWeight=0    PerfScore 0.00
G_M63408_IG141:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi rdi]
       mov      rcx, 0xD1FFAB1E      ; InvalidOperationException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      ecx, 0x21C7
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName(String):String
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for InvalidOperationException:.ctor
       ; gcrRegs -[rax]
       call     [rax]InvalidOperationException:.ctor(String):this
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      rcx, r15
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx r15]
       ; gcr arg pop 0
						;; size=79 bbWeight=0    PerfScore 0.00
G_M63408_IG142:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbx rbp rsi rdi r14]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       jmp      G_M63408_IG45
						;; size=7 bbWeight=0    PerfScore 0.00
G_M63408_IG143:        ; gcrefRegs=000040EA {rcx rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+50H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       jmp      G_M63408_IG47
						;; size=14 bbWeight=0    PerfScore 0.00
G_M63408_IG144:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbp] +[r13 r15]
       mov      rax, gword ptr [rbx+30H]
       ; gcrRegs +[rax]
       mov      rdx, gword ptr [rax+18H]
       ; gcrRegs +[rdx]
       jmp      G_M63408_IG33
						;; size=13 bbWeight=0    PerfScore 0.00
G_M63408_IG145:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rdx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbx] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       jmp      G_M63408_IG35
						;; size=21 bbWeight=0    PerfScore 0.00
G_M63408_IG146:        ; gcrefRegs=0000E0C8 {rbx rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r8+60H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbx] +[rax]
       ; gcr arg pop 0
       jmp      G_M63408_IG98
						;; size=15 bbWeight=0    PerfScore 0.00
G_M63408_IG147:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax r13] +[rbx]
       test     r15, r15
       jne      SHORT G_M63408_IG148
       mov      rcx, 0xD1FFAB1E      ; List`1
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs -[r15] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for List`1:.ctor
       ; gcrRegs -[rax]
       call     [rax]List`1:.ctor():this
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
						;; size=38 bbWeight=0    PerfScore 0.00
G_M63408_IG148:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       inc      dword ptr [r15+14H]
       mov      rcx, gword ptr [r15+08H]
       ; gcrRegs +[rcx]
       mov      eax, dword ptr [r15+10H]
       cmp      dword ptr [rcx+08H], eax
       jbe      SHORT G_M63408_IG149
       lea      edx, [rax+01H]
       mov      dword ptr [r15+10H], edx
       movsxd   rdx, eax
       mov      r8, rbx
       ; gcrRegs +[r8]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx rbx r8]
       ; gcr arg pop 0
       jmp      G_M63408_IG41
						;; size=40 bbWeight=0    PerfScore 0.00
G_M63408_IG149:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbx]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rbx]
       ; gcr arg pop 0
       jmp      G_M63408_IG41
						;; size=23 bbWeight=0    PerfScore 0.00
G_M63408_IG150:        ; gcVars=000000000000000000000000000000008000000000000000 {V40}, gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs +[rbx]
       ; GC ptr vars +{V40 V63}
       mov      rcx, gword ptr [rbx+30H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rcx+18H]
       ; gcrRegs +[rdx]
       jmp      G_M63408_IG110
						;; size=13 bbWeight=0    PerfScore 0.00
G_M63408_IG151:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rdx, qword ptr [rbx]
       mov      rdx, qword ptr [rdx+40H]
       call     [rdx+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbx] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       jmp      G_M63408_IG112
						;; size=21 bbWeight=0    PerfScore 0.00
G_M63408_IG152:        ; gcrefRegs=0000C0C8 {rbx rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rbx, qword ptr [rsp+48H]
       ; gcrRegs -[rbx]
       mov      rax, qword ptr [rbx+60H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       jmp      G_M63408_IG117
						;; size=20 bbWeight=0    PerfScore 0.00
G_M63408_IG153:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rax rsi rdi r14-r15]
       ; GC ptr vars -{V40 V63}
       call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
       int3     
						;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 3929, prolog size 16, PerfScore 740.75, instruction count 932, allocated bytes for code 3929 (MethodHash=e27a084f) for method LambdaCompiler:EmitNewExpression(Expression):this
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x10
  CountOfUnwindCodes: 9
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x10 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 12 * 8 + 8 = 104 = 0x68
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x08 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
