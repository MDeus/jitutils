; Assembly listing for method LambdaCompiler:EmitNewExpression(Expression):this
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; optimized using profile data
; rsp based frame
; partially interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 214
; 32 inlinees with PGO data; 66 single block inlinees; 1 inlinees without PGO data
; Final local variable assignments
;
;  V00 this         [V00,T07] ( 15,  5.16)     ref  ->  rsi         this class-hnd single-def
;  V01 arg1         [V01,T19] (  4,  3.25)     ref  ->  rdx         class-hnd single-def
;  V02 loc0         [V02,T05] ( 19,  7.02)     ref  ->  rdi         class-hnd single-def
;  V03 loc1         [V03,T72] (  2,  1.88)     ref  ->  r15         class-hnd single-def
;  V04 loc2         [V04,T126] (  7,  0.30)     ref  ->  r15         class-hnd single-def
;  V05 OutArgs      [V05    ] (  1,  1   )  lclBlk (32) [rsp+00H]   "OutgoingArgSpace"
;  V06 tmp1         [V06,T47] (  3,  2.50)    long  ->  rcx         "fgMakeTemp is creating a new local variable"
;  V07 tmp2         [V07,T06] (  5,  7.50)     ref  ->  rdi         class-hnd "spilling QMark2"
;  V08 tmp3         [V08,T115] (  5,  0.36)     ref  ->  rbp         class-hnd "impAppendStmt"
;* V09 tmp4         [V09    ] (  0,  0   )  struct ( 8) zero-ref    "impAppendStmt"
;  V10 tmp5         [V10,T127] (  4,  0.24)     ref  ->   r8         class-hnd "spilling ret_expr"
;  V11 tmp6         [V11,T14] (  5,  5.64)     ref  ->  rcx         class-hnd single-def "spilling ret_expr"
;  V12 tmp7         [V12,T15] (  4,  5.64)     ref  ->  r13         class-hnd single-def "impAppendStmt"
;* V13 tmp8         [V13    ] (  0,  0   )  struct ( 8) zero-ref    "impAppendStmt"
;  V14 tmp9         [V14,T16] (  4,  5.64)     ref  ->   r8         class-hnd single-def "spilling ret_expr"
;  V15 tmp10        [V15,T42] (  8,  2.82)     ref  ->  rcx         "guarded devirt return temp"
;  V16 tmp11        [V16,T43] (  3,  2.82)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V17 tmp12        [V17,T00] ( 42, 23.00)     ref  ->  r13         class-hnd exact single-def "guarded devirt this exact temp"
;  V18 tmp13        [V18,T133] (  3,  0.12)     ref  ->  rdx         "guarded devirt return temp"
;* V19 tmp14        [V19    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V20 tmp15        [V20,T116] (  5,  0.36)     ref  ->  rcx         single-def "guarded devirt this temp"
;* V21 tmp16        [V21    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V22 tmp17        [V22,T130] (  4,  0.12)     ref  ->   r8         "guarded devirt return temp"
;* V23 tmp18        [V23    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;* V24 tmp19        [V24    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V25 tmp20        [V25,T114] (  6,  0.36)     ref  ->  rcx         "guarded devirt this temp"
;* V26 tmp21        [V26    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;* V27 tmp22        [V27    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V28 tmp23        [V28    ] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;* V29 tmp24        [V29    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V30 tmp25        [V30,T63] (  4,  1.88)     int  ->  rax         "guarded devirt return temp"
;* V31 tmp26        [V31    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V32 tmp27        [V32,T156] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V33 tmp28        [V33,T01] ( 18, 13.11)     ref  ->  rbx         class-hnd single-def "Inlining Arg"
;  V34 tmp29        [V34,T73] (  2,  1.88)     ref  ->  r15         class-hnd single-def "Inline return value spill temp"
;  V35 tmp30        [V35,T40] (  4,  2.86)     ref  ->  r14         class-hnd "Inline stloc first use temp"
;  V36 tmp31        [V36,T62] ( 18,  1.88)     ref  ->  r15         class-hnd "Inline stloc first use temp"
;  V37 tmp32        [V37,T12] ( 14,  5.84)     int  ->  r12         "Inline stloc first use temp"
;  V38 tmp33        [V38,T27] (  5,  3.80)     int  ->  rbx         "Inline stloc first use temp"
;  V39 tmp34        [V39,T38] ( 10,  2.93)     ref  ->  rbp         class-hnd "Inline stloc first use temp"
;  V40 tmp35        [V40,T59] (  6,  1.95)     ref  ->  [rsp+40H]   class-hnd "Inline stloc first use temp"
;  V41 tmp36        [V41,T23] ( 14,  3.93)     ref  ->  rbp         class-hnd "Inline stloc first use temp"
;  V42 tmp37        [V42,T141] (  8,  0.02)     ref  ->  rbp         class-hnd "Inline stloc first use temp"
;  V43 tmp38        [V43,T153] (  6,  0   )     ref  ->  r15         class-hnd exact "NewObj constructor temp"
;  V44 tmp39        [V44,T55] (  6,  1.95)     ref  ->  registers   "guarded devirt return temp"
;* V45 tmp40        [V45,T110] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V46 tmp41        [V46,T56] (  6,  1.95)     ref  ->  rbp         "guarded devirt return temp"
;  V47 tmp42        [V47,T34] ( 14,  3.72)     ref  ->  rbp         class-hnd exact "guarded devirt this exact temp"
;  V48 tmp43        [V48,T142] (  6,  0.02)     ref  ->  rax         "guarded devirt return temp"
;* V49 tmp44        [V49    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V50 tmp45        [V50,T74] (  2,  1.88)     ref  ->  r14         class-hnd single-def "Inline return value spill temp"
;  V51 tmp46        [V51,T35] (  4,  3.13)     ref  ->  rbp         class-hnd exact "Inline stloc first use temp"
;  V52 tmp47        [V52,T46] (  5,  2.51)     ref  ->  r14         ld-addr-op class-hnd "Inline ldloca(s) first use temp"
;* V53 tmp48        [V53    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "dup spill"
;  V54 tmp49        [V54,T93] (  6,  1.27)     ref  ->  rcx         single-def
;* V55 tmp50        [V55,T173] (  0,  0   )     int  ->  zero-ref   
;  V56 tmp51        [V56,T106] (  3,  0.63)     ref  ->  r14         "guarded devirt return temp"
;* V57 tmp52        [V57    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V58 tmp53        [V58,T105] (  4,  0.63)     ref  ->  rcx         "guarded devirt return temp"
;  V59 tmp54        [V59,T111] (  2,  0.48)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V60 tmp55        [V60,T107] (  3,  0.63)     int  ->  rax         "guarded devirt return temp"
;* V61 tmp56        [V61    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V62 tmp57        [V62,T65] (  3,  1.88)    bool  ->  rcx         "Inline return value spill temp"
;* V63 tmp58        [V63,T83] (  0,  0   )     ref  ->  zero-ref    ld-addr-op class-hnd single-def "Inlining Arg"
;  V64 tmp59        [V64,T45] (  3,  2.78)     int  ->  r14         "Inline stloc first use temp"
;  V65 tmp60        [V65,T79] (  2,  1.88)     int  ->  rdx         "Inline stloc first use temp"
;  V66 tmp61        [V66,T22] (  5,  4.20)     ref  ->  r15         class-hnd "Inline stloc first use temp"
;  V67 tmp62        [V67,T90] (  2,  1.42)     ref  ->  rcx         ld-addr-op class-hnd "Inline stloc first use temp"
;  V68 tmp63        [V68,T66] (  3,  1.88)     int  ->  r14         "guarded devirt return temp"
;  V69 tmp64        [V69,T29] (  2,  3.76)     ref  ->  rcx         single-def "guarded devirt this temp"
;* V70 tmp65        [V70    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V71 tmp66        [V71,T88] (  4,  1.50)     int  ->  r14         "guarded devirt return temp"
;  V72 tmp67        [V72,T21] (  5,  4.62)     ref  ->  rcx         single-def "guarded devirt this temp"
;  V73 tmp68        [V73,T91] (  4,  1.38)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;* V74 tmp69        [V74    ] (  0,  0   )   byref  ->  zero-ref    "Inlining Arg"
;* V75 tmp70        [V75    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inlining Arg"
;  V76 tmp71        [V76,T48] (  3,  2.40)     ref  ->  rdx         class-hnd "spilling QMark2"
;  V77 tmp72        [V77,T60] (  5,  1.92)     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;* V78 tmp73        [V78    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;* V79 tmp74        [V79    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V80 tmp75        [V80    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V81 tmp76        [V81    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V82 tmp77        [V82    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inlining Arg"
;  V83 tmp78        [V83,T157] (  3,  0   )     ref  ->  rsi         class-hnd exact "NewObj constructor temp"
;  V84 tmp79        [V84,T96] (  4,  0.98)     ref  ->  rax         class-hnd "Inline stloc first use temp"
;  V85 tmp80        [V85,T95] (  6,  0.98)     ref  ->  rax         class-hnd "Inline return value spill temp"
;  V86 tmp81        [V86,T53] (  8,  1.99)     ref  ->  [rsp+38H]   class-hnd "Inlining Arg"
;  V87 tmp82        [V87,T89] (  6,  1.45)     ref  ->  rax         class-hnd "Inline stloc first use temp"
;  V88 tmp83        [V88,T137] (  6,  0.03)    long  ->  rcx         "fgMakeTemp is creating a new local variable"
;  V89 tmp84        [V89,T134] ( 10,  0.09)     ref  ->   r8         class-hnd "spilling QMark2"
;  V90 tmp85        [V90,T109] (  6,  0.53)     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;* V91 tmp86        [V91    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V92 tmp87        [V92    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V93 tmp88        [V93,T57] (  4,  1.95)     int  ->  rax         "guarded devirt return temp"
;* V94 tmp89        [V94    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V95 tmp90        [V95,T58] (  4,  1.95)   ubyte  ->  rax         "Inline stloc first use temp"
;  V96 tmp91        [V96,T154] (  6,  0   )     ref  ->  rcx         class-hnd "Inline stloc first use temp"
;  V97 tmp92        [V97,T152] (  8,  0   )     int  ->  rax         "Inline stloc first use temp"
;  V98 tmp93        [V98,T11] (  4,  6.11)     ref  ->  r14         class-hnd "spilling QMark2"
;  V99 tmp94        [V99,T09] (  7,  4.70)     ref  ->  r14         class-hnd "Inline stloc first use temp"
;  V100 tmp95       [V100,T13] (  8,  5.65)     ref  ->  rdi         class-hnd "Inline stloc first use temp"
;  V101 tmp96       [V101,T67] (  3,  1.88)     int  ->  rdi         "Inline stloc first use temp"
;* V102 tmp97       [V102    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;  V103 tmp98       [V103,T158] (  3,  0   )     ref  ->  rdi         class-hnd exact single-def "NewObj constructor temp"
;* V104 tmp99       [V104    ] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;* V105 tmp100      [V105,T101] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;  V106 tmp101      [V106,T49] (  3,  2.33)   ubyte  ->  rax         "Inline stloc first use temp"
;  V107 tmp102      [V107,T94] (  3,  0.98)     ref  ->  r12         class-hnd single-def "impAppendStmt"
;* V108 tmp103      [V108    ] (  0,  0   )  struct ( 8) zero-ref    "impAppendStmt"
;* V109 tmp104      [V109    ] (  0,  0   )  struct ( 8) zero-ref    "struct address for call/obj"
;* V110 tmp105      [V110    ] (  0,  0   )  struct ( 8) zero-ref    "NewObj constructor temp"
;* V111 tmp106      [V111    ] (  0,  0   )  struct ( 8) zero-ref    "NewObj constructor temp"
;* V112 tmp107      [V112    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;* V113 tmp108      [V113    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;  V114 tmp109      [V114,T92] (  5,  1.31)     ref  ->  [rsp+30H]   class-hnd exact spill-single-def "NewObj constructor temp"
;  V115 tmp110      [V115,T54] (  7,  1.97)     ref  ->  [rsp+28H]   class-hnd single-def "impAppendStmt"
;* V116 tmp111      [V116    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;* V117 tmp112      [V117    ] (  0,  0   )  struct ( 8) zero-ref    "Inlining Arg"
;  V118 tmp113      [V118,T112] (  3,  0.46)     ref  ->  rcx         class-hnd "Inline stloc first use temp"
;  V119 tmp114      [V119,T108] (  4,  0.60)     int  ->  rax         "Inline stloc first use temp"
;* V120 tmp115      [V120    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V121 tmp116      [V121,T10] (  4,  6.20)     ref  ->  r12         class-hnd single-def "impAppendStmt"
;* V122 tmp117      [V122    ] (  0,  0   )  struct ( 8) zero-ref    "struct address for call/obj"
;* V123 tmp118      [V123    ] (  0,  0   )  struct ( 8) zero-ref    "NewObj constructor temp"
;  V124 tmp119      [V124,T87] (  2,  1.55)     int  ->  rdi         "Inline return value spill temp"
;* V125 tmp120      [V125    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op "Inlining Arg"
;  V126 tmp121      [V126,T102] (  2,  0.78)     ref  ->  rdi         class-hnd "Inline stloc first use temp"
;  V127 tmp122      [V127,T20] (  3,  4.65)     ref  ->  [rsp+20H]   class-hnd exact spill-single-def "Single-def Box Helper"
;  V128 tmp123      [V128,T03] (  7,  9.30)     ref  ->  rdi         class-hnd single-def "impImportAndPushBox"
;  V129 tmp124      [V129,T51] (  3,  2.33)    long  ->  [rsp+60H]   spill-single-def "Inline stloc first use temp"
;  V130 tmp125      [V130,T50] (  3,  2.33)     ref  ->  rax         class-hnd "Inline stloc first use temp"
;  V131 tmp126      [V131,T155] (  4,  0   )     ref  ->  r13         class-hnd "Inline stloc first use temp"
;  V132 tmp127      [V132,T164] (  2,  0   )     ref  ->  rbx         class-hnd "Inline stloc first use temp"
;  V133 tmp128      [V133,T159] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V134 tmp129      [V134,T86] (  3,  1.55)    long  ->  registers   "guarded devirt return temp"
;* V135 tmp130      [V135    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V136 tmp131      [V136,T37] (  2,  3.10)    long  ->  rax         "NewObj constructor temp"
;* V137 tmp132      [V137    ] (  0,  0   )    long  ->  zero-ref    "Inlining Arg"
;  V138 tmp133      [V138,T52] (  3,  2.19)     ref  ->  rcx         class-hnd "Inline stloc first use temp"
;  V139 tmp134      [V139,T41] (  4,  2.83)     int  ->  rdx         "Inline stloc first use temp"
;  V140 tmp135      [V140,T36] (  3,  3.10)     ref  ->   r8         class-hnd exact single-def "Inlining Arg"
;* V141 tmp136      [V141    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V142 tmp137      [V142    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op "Inlining Arg"
;  V143 tmp138      [V143,T68] (  3,  1.88)   short  ->  rax         "Inline stloc first use temp"
;  V144 tmp139      [V144,T33] (  4,  3.73)     int  ->  rdx         "Inline stloc first use temp"
;  V145 tmp140      [V145,T18] (  3,  5.60)     ref  ->  rcx         class-hnd single-def "impAppendStmt"
;* V146 tmp141      [V146    ] (  0,  0   )  struct ( 8) zero-ref    "impAppendStmt"
;* V147 tmp142      [V147    ] (  0,  0   )  struct (16) zero-ref    "struct address for call/obj"
;* V148 tmp143      [V148    ] (  0,  0   )  struct (16) zero-ref    "Inline return value spill temp"
;  V149 tmp144      [V149,T135] (  5,  0.06)     ref  ->  rcx         class-hnd single-def "Inlining Arg"
;  V150 tmp145      [V150,T136] (  5,  0.05)     int  ->   r8         "Inlining Arg"
;* V151 tmp146      [V151    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V152 tmp147      [V152    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inline ldloca(s) first use temp"
;  V153 tmp148      [V153,T139] (  2,  0.02)   byref  ->  rdx         single-def "Inlining Arg"
;  V154 tmp149      [V154,T140] (  2,  0.02)     int  ->   r9         "Inlining Arg"
;  V155 tmp150      [V155,T149] (  2,  0.01)   short  ->  rcx         ld-addr-op "Inline stloc first use temp"
;* V156 tmp151      [V156    ] (  0,  0   )  struct (16) zero-ref    "Inlining Arg"
;* V157 tmp152      [V157    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V158 tmp153      [V158    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V159 tmp154      [V159    ] (  0,  0   )   byref  ->  zero-ref    single-def "Inlining Arg"
;* V160 tmp155      [V160    ] (  0,  0   )   short  ->  zero-ref    "Inlining Arg"
;  V161 tmp156      [V161,T28] (  2,  3.77)     int  ->  rbp         "Inlining Arg"
;* V162 tmp157      [V162    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op "Inlining Arg"
;* V163 tmp158      [V163    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op "Inlining Arg"
;* V164 tmp159      [V164    ] (  0,  0   )  struct (16) zero-ref    "struct address for call/obj"
;* V165 tmp160      [V165    ] (  0,  0   )  struct (16) zero-ref    "Inline return value spill temp"
;  V166 tmp161      [V166,T02] (  5,  9.39)     ref  ->  rcx         class-hnd single-def "Inlining Arg"
;  V167 tmp162      [V167,T04] (  5,  7.51)     int  ->  r10         "Inlining Arg"
;* V168 tmp163      [V168    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V169 tmp164      [V169    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inline ldloca(s) first use temp"
;  V170 tmp165      [V170,T30] (  2,  3.76)   byref  ->  rdx         single-def "Inlining Arg"
;  V171 tmp166      [V171,T31] (  2,  3.76)     int  ->  r11         "Inlining Arg"
;* V172 tmp167      [V172    ] (  0,  0   )  struct (16) zero-ref    "Inlining Arg"
;  V173 tmp168      [V173,T32] (  2,  3.76)     int  ->  rdi         ld-addr-op "Inlining Arg"
;* V174 tmp169      [V174    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V175 tmp170      [V175    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V176 tmp171      [V176    ] (  0,  0   )   byref  ->  zero-ref    single-def "Inlining Arg"
;* V177 tmp172      [V177    ] (  0,  0   )     int  ->  zero-ref    "Inlining Arg"
;* V178 tmp173      [V178    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;  V179 tmp174      [V179,T131] (  4,  0.12)     int  ->  rbx         V09.m_value(offs=0x00) P-INDEP "field V09.m_value (fldOffset=0x0)"
;  V180 tmp175      [V180,T132] (  4,  0.12)     int  ->  r13         V09.m_flags(offs=0x04) P-INDEP "field V09.m_flags (fldOffset=0x4)"
;  V181 tmp176      [V181,T69] (  3,  1.88)     int  ->  rbp         V13.m_value(offs=0x00) P-INDEP "field V13.m_value (fldOffset=0x0)"
;  V182 tmp177      [V182,T70] (  3,  1.88)     int  ->  rbx         V13.m_flags(offs=0x04) P-INDEP "field V13.m_flags (fldOffset=0x4)"
;  V183 tmp178      [V183,T80] (  2,  1.88)     int  ->  rbp         V102.m_value(offs=0x00) P-INDEP "field V102.m_value (fldOffset=0x0)"
;  V184 tmp179      [V184,T08] (  4,  3.76)     int  ->  rbx         V102.m_flags(offs=0x04) P-INDEP "field V102.m_flags (fldOffset=0x4)"
;  V185 tmp180      [V185,T118] (  2,  0.33)     ref  ->  r14         single-def V108.m_value(offs=0x00) P-INDEP "field V108.m_value (fldOffset=0x0)"
;  V186 tmp181      [V186,T119] (  2,  0.33)     ref  ->  rdi         single-def V109.m_type(offs=0x00) P-INDEP "field V109.m_type (fldOffset=0x0)"
;  V187 tmp182      [V187,T120] (  2,  0.33)     ref  ->  r14         single-def V110.m_value(offs=0x00) P-INDEP "field V110.m_value (fldOffset=0x0)"
;  V188 tmp183      [V188,T121] (  2,  0.33)     ref  ->  rdi         single-def V111.m_type(offs=0x00) P-INDEP "field V111.m_type (fldOffset=0x0)"
;  V189 tmp184      [V189,T122] (  2,  0.33)     ref  ->  r14         single-def V112.m_value(offs=0x00) P-INDEP "field V112.m_value (fldOffset=0x0)"
;  V190 tmp185      [V190,T123] (  2,  0.33)     ref  ->  rdi         single-def V113.m_type(offs=0x00) P-INDEP "field V113.m_type (fldOffset=0x0)"
;  V191 tmp186      [V191,T124] (  2,  0.33)     ref  ->  rdx         single-def V116.m_value(offs=0x00) P-INDEP "field V116.m_value (fldOffset=0x0)"
;  V192 tmp187      [V192,T125] (  2,  0.33)     ref  ->  rdi         single-def V117.m_type(offs=0x00) P-INDEP "field V117.m_type (fldOffset=0x0)"
;* V193 tmp188      [V193,T103] (  0,  0   )     ref  ->  zero-ref    single-def V122.m_value(offs=0x00) P-INDEP "field V122.m_value (fldOffset=0x0)"
;* V194 tmp189      [V194,T104] (  0,  0   )     ref  ->  zero-ref    single-def V123.m_value(offs=0x00) P-INDEP "field V123.m_value (fldOffset=0x0)"
;  V195 tmp190      [V195,T26] (  6,  3.88)     ref  ->  r14         single-def V125.m_value(offs=0x00) P-INDEP "field V125.m_value (fldOffset=0x0)"
;* V196 tmp191      [V196    ] (  0,  0   )     int  ->  zero-ref    V142.m_value(offs=0x00) P-INDEP "field V142.m_value (fldOffset=0x0)"
;  V197 tmp192      [V197,T81] (  2,  1.88)     int  ->  rcx         V142.m_flags(offs=0x04) P-INDEP "field V142.m_flags (fldOffset=0x4)"
;* V198 tmp193      [V198    ] (  0,  0   )     int  ->  zero-ref    V146.m_value(offs=0x00) P-INDEP "field V146.m_value (fldOffset=0x0)"
;* V199 tmp194      [V199,T97] (  0,  0   )     int  ->  zero-ref    V146.m_flags(offs=0x04) P-INDEP "field V146.m_flags (fldOffset=0x4)"
;  V200 tmp195      [V200,T145] (  2,  0.01)   byref  ->  rdx         single-def V147._reference(offs=0x00) P-INDEP "field V147._reference (fldOffset=0x0)"
;* V201 tmp196      [V201    ] (  0,  0   )     int  ->  zero-ref    V147._length(offs=0x08) P-INDEP "field V147._length (fldOffset=0x8)"
;  V202 tmp197      [V202,T143] (  3,  0.01)   byref  ->  rdx         V148._reference(offs=0x00) P-INDEP "field V148._reference (fldOffset=0x0)"
;  V203 tmp198      [V203,T144] (  3,  0.01)     int  ->   r9         V148._length(offs=0x08) P-INDEP "field V148._length (fldOffset=0x8)"
;  V204 tmp199      [V204,T146] (  2,  0.01)   byref  ->  rdx         V151._reference(offs=0x00) P-INDEP "field V151._reference (fldOffset=0x0)"
;  V205 tmp200      [V205,T150] (  2,  0.01)     int  ->   r9         V151._length(offs=0x08) P-INDEP "field V151._length (fldOffset=0x8)"
;  V206 tmp201      [V206,T165] (  2,  0   )   byref  ->  rdx         single-def V152._reference(offs=0x00) P-INDEP "field V152._reference (fldOffset=0x0)"
;* V207 tmp202      [V207,T174] (  0,  0   )     int  ->  zero-ref    V152._length(offs=0x08) P-INDEP "field V152._length (fldOffset=0x8)"
;  V208 tmp203      [V208,T147] (  2,  0.01)   byref  ->  rdx         single-def V156._reference(offs=0x00) P-INDEP "field V156._reference (fldOffset=0x0)"
;* V209 tmp204      [V209    ] (  0,  0   )     int  ->  zero-ref    V156._length(offs=0x08) P-INDEP "field V156._length (fldOffset=0x8)"
;  V210 tmp205      [V210,T148] (  2,  0.01)   byref  ->  rdx         single-def V157._reference(offs=0x00) P-INDEP "field V157._reference (fldOffset=0x0)"
;* V211 tmp206      [V211    ] (  0,  0   )     int  ->  zero-ref    V157._length(offs=0x08) P-INDEP "field V157._length (fldOffset=0x8)"
;* V212 tmp207      [V212    ] (  0,  0   )   byref  ->  zero-ref    single-def V158._reference(offs=0x00) P-INDEP "field V158._reference (fldOffset=0x0)"
;* V213 tmp208      [V213    ] (  0,  0   )     int  ->  zero-ref    V158._length(offs=0x08) P-INDEP "field V158._length (fldOffset=0x8)"
;* V214 tmp209      [V214    ] (  0,  0   )     int  ->  zero-ref    V162.m_value(offs=0x00) P-INDEP "field V162.m_value (fldOffset=0x0)"
;* V215 tmp210      [V215,T98] (  0,  0   )     int  ->  zero-ref    V162.m_flags(offs=0x04) P-INDEP "field V162.m_flags (fldOffset=0x4)"
;* V216 tmp211      [V216    ] (  0,  0   )     int  ->  zero-ref    V163.m_value(offs=0x00) P-INDEP "field V163.m_value (fldOffset=0x0)"
;* V217 tmp212      [V217,T99] (  0,  0   )     int  ->  zero-ref    V163.m_flags(offs=0x04) P-INDEP "field V163.m_flags (fldOffset=0x4)"
;  V218 tmp213      [V218,T75] (  2,  1.88)   byref  ->  rdx         single-def V164._reference(offs=0x00) P-INDEP "field V164._reference (fldOffset=0x0)"
;* V219 tmp214      [V219    ] (  0,  0   )     int  ->  zero-ref    V164._length(offs=0x08) P-INDEP "field V164._length (fldOffset=0x8)"
;  V220 tmp215      [V220,T64] (  3,  1.88)   byref  ->  rdx         V165._reference(offs=0x00) P-INDEP "field V165._reference (fldOffset=0x0)"
;  V221 tmp216      [V221,T71] (  3,  1.88)     int  ->  r11         V165._length(offs=0x08) P-INDEP "field V165._length (fldOffset=0x8)"
;  V222 tmp217      [V222,T76] (  2,  1.88)   byref  ->  rdx         V168._reference(offs=0x00) P-INDEP "field V168._reference (fldOffset=0x0)"
;  V223 tmp218      [V223,T82] (  2,  1.88)     int  ->  r11         V168._length(offs=0x08) P-INDEP "field V168._length (fldOffset=0x8)"
;  V224 tmp219      [V224,T166] (  2,  0   )   byref  ->  rdx         single-def V169._reference(offs=0x00) P-INDEP "field V169._reference (fldOffset=0x0)"
;* V225 tmp220      [V225,T175] (  0,  0   )     int  ->  zero-ref    V169._length(offs=0x08) P-INDEP "field V169._length (fldOffset=0x8)"
;  V226 tmp221      [V226,T77] (  2,  1.88)   byref  ->  rdx         single-def V172._reference(offs=0x00) P-INDEP "field V172._reference (fldOffset=0x0)"
;* V227 tmp222      [V227    ] (  0,  0   )     int  ->  zero-ref    V172._length(offs=0x08) P-INDEP "field V172._length (fldOffset=0x8)"
;  V228 tmp223      [V228,T78] (  2,  1.88)   byref  ->  rdx         single-def V174._reference(offs=0x00) P-INDEP "field V174._reference (fldOffset=0x0)"
;* V229 tmp224      [V229    ] (  0,  0   )     int  ->  zero-ref    V174._length(offs=0x08) P-INDEP "field V174._length (fldOffset=0x8)"
;* V230 tmp225      [V230    ] (  0,  0   )   byref  ->  zero-ref    single-def V175._reference(offs=0x00) P-INDEP "field V175._reference (fldOffset=0x0)"
;* V231 tmp226      [V231    ] (  0,  0   )     int  ->  zero-ref    V175._length(offs=0x08) P-INDEP "field V175._length (fldOffset=0x8)"
;  V232 tmp227      [V232,T167] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V233 tmp228      [V233,T168] (  2,  0   )     ref  ->  rdx         "argument with side effect"
;  V234 tmp229      [V234,T84] (  6,  1.58)     ref  ->   r8         "arr expr"
;  V235 tmp230      [V235,T85] (  6,  1.58)     int  ->  registers   "index expr"
;  V236 tmp231      [V236,T17] (  3,  5.64)   byref  ->  rcx         single-def "BlockOp address local"
;  V237 tmp232      [V237,T169] (  2,  0   )     ref  ->  rsi         single-def "argument with side effect"
;  V238 tmp233      [V238,T170] (  2,  0   )     ref  ->   r8         single-def "argument with side effect"
;  V239 tmp234      [V239,T160] (  3,  0   )     ref  ->  rax         single-def "argument with side effect"
;  V240 tmp235      [V240,T171] (  2,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V241 tmp236      [V241,T172] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V242 tmp237      [V242,T113] (  9,  0.36)  struct ( 8) [rsp+58H]   do-not-enreg[SF] "by-value struct argument"
;  V243 tmp238      [V243,T161] (  3,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V244 tmp239      [V244,T117] (  3,  0.36)   byref  ->  rcx         single-def "BlockOp address local"
;  V245 tmp240      [V245,T162] (  3,  0   )   byref  ->  rcx         single-def "BlockOp address local"
;  V246 tmp241      [V246,T128] (  2,  0.24)     ref  ->  rcx         single-def "argument with side effect"
;  V247 tmp242      [V247,T163] (  3,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V248 cse0        [V248,T24] (  6,  3.91)     int  ->  rbp         "CSE - conservative"
;  V249 cse1        [V249,T25] (  6,  3.91)     int  ->   r8         "CSE - conservative"
;  V250 cse2        [V250,T39] (  4,  2.90)    long  ->  [rsp+50H]   "CSE - conservative"
;  V251 cse3        [V251,T138] (  4,  0.03)    long  ->  [rsp+48H]   spill-single-def "CSE - conservative"
;  V252 cse4        [V252,T61] (  3,  1.89)     int  ->  r13         "CSE - conservative"
;  V253 cse5        [V253,T44] (  3,  2.82)     int  ->  rbx         "CSE - conservative"
;  V254 cse6        [V254,T100] (  3,  0.78)     int  ->  rax         "CSE - conservative"
;  V255 cse7        [V255,T151] (  3,  0.01)     int  ->  rdx         "CSE - conservative"
;  V256 cse8        [V256,T129] (  3,  0.18)    long  ->  r12         "CSE - conservative"
;
; Lcl frame size = 104

G_M63408_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 104
       mov      rsi, rcx
       ; gcrRegs +[rsi]
						;; size=19 bbWeight=1    PerfScore 8.50
G_M63408_IG02:        ; gcrefRegs=00000044 {rdx rsi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[rdx]
       mov      rdi, rdx
       ; gcrRegs +[rdi]
       test     rdi, rdi
       je       SHORT G_M63408_IG05
						;; size=8 bbWeight=1    PerfScore 1.50
G_M63408_IG03:        ; gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref, isz
       mov      rcx, 0xD1FFAB1E      ; NewExpression
       cmp      qword ptr [rdi], rcx
       je       SHORT G_M63408_IG05
						;; size=15 bbWeight=0.50 PerfScore 2.12
G_M63408_IG04:        ; gcrefRegs=00000044 {rdx rsi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdi]
       call     [CORINFO_HELP_CHKCASTCLASS_SPECIAL]
       ; gcrRegs -[rdx] +[rax]
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
						;; size=9 bbWeight=0.25 PerfScore 0.81
G_M63408_IG05:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       cmp      gword ptr [rdi+10H], 0
       je       G_M63408_IG101
						;; size=11 bbWeight=1    PerfScore 4.00
G_M63408_IG06:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [rdi+10H]
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; RuntimeConstructorInfo
       cmp      qword ptr [rcx], rax
       jne      G_M63408_IG137
       mov      rax, gword ptr [rcx+10H]
       ; gcrRegs +[rax]
       cmp      byte  ptr [rax+8CH], 0
       jne      G_M63408_IG136
       mov      rcx, gword ptr [rcx+08H]
						;; size=44 bbWeight=0.94 PerfScore 13.38
G_M63408_IG07:        ; gcrefRegs=000000C2 {rcx rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rcx], rax
       jne      G_M63408_IG138
						;; size=19 bbWeight=0.94 PerfScore 3.99
G_M63408_IG08:        ; gcrefRegs=000000C2 {rcx rsi rdi}, byrefRegs=00000000 {}, byref
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     al, 128
       jne      G_M63408_IG139
						;; size=13 bbWeight=0.94 PerfScore 2.11
G_M63408_IG09:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz
       mov      rbx, gword ptr [rdi+10H]
       ; gcrRegs +[rbx]
       mov      rcx, 0xD1FFAB1E      ; const ptr
       mov      rbp, gword ptr [rcx]
       ; gcrRegs +[rbp]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rcx], rax
       jne      SHORT G_M63408_IG11
						;; size=35 bbWeight=0.94 PerfScore 8.22
G_M63408_IG10:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      r14d, eax
       jmp      SHORT G_M63408_IG12
						;; size=13 bbWeight=0.47 PerfScore 1.64
G_M63408_IG11:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      r14d, eax
						;; size=16 bbWeight=0.47 PerfScore 3.52
G_M63408_IG12:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       mov      edx, r14d
       and      edx, dword ptr [rbp+10H]
       mov      rcx, gword ptr [rbp+08H]
       ; gcrRegs +[rcx]
       movsxd   rdx, edx
       mov      r8, 0xD1FFAB1E      ; hackishClassName
       call     CORINFO_HELP_LDELEMA_REF
       ; gcrRegs -[rcx]
       ; byrRegs +[rax]
       ; gcr arg pop 0
       mov      r15, gword ptr [rax]
       ; gcrRegs +[r15]
       test     r15, r15
       je       G_M63408_IG46
						;; size=40 bbWeight=0.94 PerfScore 9.39
G_M63408_IG13:        ; gcrefRegs=000080E8 {rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rax]
       cmp      dword ptr [r15+18H], r14d
       jne      G_M63408_IG46
						;; size=10 bbWeight=0.90 PerfScore 3.60
G_M63408_IG14:        ; gcrefRegs=000080E8 {rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [r15+08H]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rcx], rdx
       jne      G_M63408_IG42
						;; size=23 bbWeight=0.71 PerfScore 4.45
G_M63408_IG15:        ; gcrefRegs=000080EA {rcx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rbx], rax
       jne      G_M63408_IG38
						;; size=22 bbWeight=0.53 PerfScore 2.40
G_M63408_IG16:        ; gcrefRegs=000080EE {rcx rdx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref, isz
       test     rdx, rdx
       je       SHORT G_M63408_IG17
       mov      rax, qword ptr [rcx+50H]
       cmp      rax, qword ptr [rdx+50H]
       je       G_M63408_IG35
						;; size=19 bbWeight=0.53 PerfScore 3.87
G_M63408_IG17:        ; gcrefRegs=000080E8 {rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx]
       xor      r14d, r14d
						;; size=3 bbWeight=0.45 PerfScore 0.11
G_M63408_IG18:        ; gcrefRegs=000080E8 {rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       test     r14d, r14d
       je       G_M63408_IG46
       mov      r14, gword ptr [r15+10H]
       ; gcrRegs +[r14]
       mov      ecx, 1
						;; size=18 bbWeight=0.71 PerfScore 2.49
G_M63408_IG19:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r15]
       test     ecx, ecx
       jne      SHORT G_M63408_IG26
						;; size=4 bbWeight=0.94 PerfScore 1.17
G_M63408_IG20:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r14]
       mov      rcx, 0xD1FFAB1E      ; RuntimeConstructorInfo
       cmp      qword ptr [rbx], rcx
       jne      G_M63408_IG69
						;; size=19 bbWeight=0.32 PerfScore 1.35
G_M63408_IG21:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     [RuntimeConstructorInfo:GetParameters():ref:this]
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
						;; size=12 bbWeight=0.20 PerfScore 0.69
G_M63408_IG22:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rbx], rcx
       jne      G_M63408_IG71
						;; size=19 bbWeight=0.32 PerfScore 1.35
G_M63408_IG23:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       cmp      byte  ptr [rcx+8CH], 0
       jne      G_M63408_IG140
       mov      rcx, gword ptr [rbx+38H]
						;; size=24 bbWeight=0.24 PerfScore 1.96
G_M63408_IG24:        ; gcrefRegs=000040EA {rcx rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref, isz
       test     rcx, rcx
       je       SHORT G_M63408_IG26
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rcx], rax
       jne      G_M63408_IG141
       call     [RuntimeType:get_IsCollectible():bool:this]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
						;; size=30 bbWeight=0.32 PerfScore 2.69
G_M63408_IG25:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref, isz
       test     eax, eax
       jne      SHORT G_M63408_IG26
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      r8, r14
       ; gcrRegs +[r8]
       call     [CacheDict`2:Add(__Canon,__Canon):this]
       ; gcrRegs -[rcx rdx rbx rbp r8]
       ; gcr arg pop 0
						;; size=19 bbWeight=0.32 PerfScore 1.58
G_M63408_IG26:        ; gcrefRegs=000040C0 {rsi rdi r14}, byrefRegs=00000000 {}, byref
       xor      r15, r15
       ; gcrRegs +[r15]
       xor      r12d, r12d
       mov      r13d, dword ptr [r14+08H]
       mov      ebx, r13d
       test     ebx, ebx
       jle      G_M63408_IG65
       test     ebx, ebx
       jl       G_M63408_IG90
						;; size=29 bbWeight=0.94 PerfScore 4.93
G_M63408_IG27:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       mov      edx, r12d
       mov      rbp, gword ptr [r14+8*rdx+10H]
       ; gcrRegs +[rbp]
       mov      rdx, 0xD1FFAB1E      ; InstanceMethodCallExpression1
       cmp      qword ptr [rdi], rdx
       jne      G_M63408_IG85
						;; size=27 bbWeight=0.97 PerfScore 6.29
G_M63408_IG28:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       test     r12d, r12d
       jne      G_M63408_IG120
       mov      r13, gword ptr [rdi+18H]
       ; gcrRegs +[r13]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rcx, 0xD1FFAB1E      ; Expression
       call     [CORINFO_HELP_ISINSTANCEOFCLASS]
       ; gcrRegs -[rdx] +[rax]
       ; gcr arg pop 0
       test     rax, rax
       je       G_M63408_IG80
						;; size=41 bbWeight=0.48 PerfScore 3.87
G_M63408_IG29:        ; gcrefRegs=0000C0E1 {rax rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13]
       mov      r13, rax
       ; gcrRegs +[r13]
						;; size=3 bbWeight=0.48 PerfScore 0.12
G_M63408_IG30:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax]
       mov      rdx, 0xD1FFAB1E      ; RuntimeParameterInfo
       cmp      qword ptr [rbp], rdx
       jne      G_M63408_IG143
       cmp      gword ptr [rbp+08H], 0
       je       SHORT G_M63408_IG33
						;; size=27 bbWeight=0.97 PerfScore 7.98
G_M63408_IG31:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       mov      rbp, gword ptr [rbp+08H]
						;; size=4 bbWeight=0.97 PerfScore 1.94
G_M63408_IG32:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       mov      rax, qword ptr [rbp]
       mov      rcx, 0xD1FFAB1E      ; RuntimeType
       cmp      rax, rcx
       jne      SHORT G_M63408_IG36
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       cmp      eax, 16
       jne      G_M63408_IG39
       jmp      G_M63408_IG88
						;; size=41 bbWeight=0.97 PerfScore 7.74
G_M63408_IG33:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       mov      eax, dword ptr [rbp+2CH]
       cmp      eax, -1
       je       G_M63408_IG142
       mov      rdx, gword ptr [rbp+30H]
       ; gcrRegs +[rdx]
       mov      r8, gword ptr [rdx+08H]
       ; gcrRegs +[r8]
       cmp      eax, dword ptr [r8+08H]
       jae      G_M63408_IG151
       mov      edx, eax
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [r8+8*rdx+10H]
       ; gcrRegs +[rdx]
						;; size=37 bbWeight=0.26 PerfScore 3.51
G_M63408_IG34:        ; gcrefRegs=0000E0E4 {rdx rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r8]
       lea      rcx, bword ptr [rbp+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       jmp      SHORT G_M63408_IG31
						;; size=11 bbWeight=0.26 PerfScore 0.91
G_M63408_IG35:        ; gcrefRegs=000080EE {rcx rdx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13-r14] +[rcx rdx rbx]
       mov      rax, gword ptr [rcx+38H]
       ; gcrRegs +[rax]
       cmp      rax, gword ptr [rdx+38H]
       jne      G_M63408_IG17
       mov      rcx, gword ptr [rcx+08H]
       mov      rcx, gword ptr [rcx+08H]
       mov      rdx, gword ptr [rdx+08H]
       xor      r14d, r14d
       cmp      rcx, gword ptr [rdx+08H]
       sete     r14b
       jmp      G_M63408_IG18
						;; size=42 bbWeight=0.16 PerfScore 2.89
G_M63408_IG36:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rcx rdx rbx] +[r13-r14]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      qword ptr [rsp+50H], rax
       mov      rdx, qword ptr [rax+58H]
       call     [rdx+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M63408_IG39
						;; size=19 bbWeight=0.97 PerfScore 7.26
G_M63408_IG37:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       mov      rax, qword ptr [rsp+50H]
       jmp      G_M63408_IG144
						;; size=10 bbWeight=0.01 PerfScore 0.03
G_M63408_IG38:        ; gcrefRegs=000080EA {rcx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13-r14] +[rcx rbx]
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       jmp      G_M63408_IG16
						;; size=7 bbWeight=0.13 PerfScore 0.30
G_M63408_IG39:        ; gcrefRegs=0000E0C0 {rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx rbx rbp] +[r13-r14]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      r8d, 0x401
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx r13]
       ; gcr arg pop 0
						;; size=18 bbWeight=0.96 PerfScore 3.58
G_M63408_IG40:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       inc      r12d
       cmp      r12d, ebx
       jl       G_M63408_IG27
						;; size=12 bbWeight=0.97 PerfScore 1.45
G_M63408_IG41:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r14]
       jmp      G_M63408_IG65
						;; size=5 bbWeight=0.94 PerfScore 1.88
G_M63408_IG42:        ; gcrefRegs=000080EA {rcx rbx rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rcx rbx rbp]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+10H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      r14d, eax
       jmp      G_M63408_IG18
						;; size=21 bbWeight=0.18 PerfScore 1.69
G_M63408_IG43:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx rbp rdi] +[r13]
       mov      rcx, gword ptr [r13+08H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [r13+58H]
       lea      r8d, [rdx+01H]
       mov      dword ptr [r13+58H], r8d
       cmp      edx, dword ptr [rcx+08H]
       jae      G_M63408_IG151
       mov      edx, edx
       mov      byte  ptr [rcx+rdx+10H], al
						;; size=31 bbWeight=0.93 PerfScore 10.03
G_M63408_IG44:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx]
       mov      ebp, ebx
       sar      ebp, 28
       cmp      dword ptr [r13+74H], 0
       jge      SHORT G_M63408_IG48
						;; size=12 bbWeight=0.94 PerfScore 4.46
G_M63408_IG45:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref, isz
       jmp      SHORT G_M63408_IG47
						;; size=2 bbWeight=0.00 PerfScore 0.00
G_M63408_IG46:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13 r15] +[rbx rbp rdi]
       xor      r14, r14
       ; gcrRegs +[r14]
       xor      ecx, ecx
       jmp      G_M63408_IG19
						;; size=10 bbWeight=0.23 PerfScore 0.57
G_M63408_IG47:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx rbp rdi r14] +[r13 r15]
       xor      ecx, ecx
       mov      dword ptr [r13+74H], ecx
						;; size=6 bbWeight=0.00 PerfScore 0.00
G_M63408_IG48:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       add      ebp, dword ptr [r13+74H]
       mov      dword ptr [r13+74H], ebp
       test     ebp, ebp
       jl       G_M63408_IG125
       cmp      dword ptr [r13+7CH], ebp
       jl       G_M63408_IG68
						;; size=26 bbWeight=0.94 PerfScore 8.73
G_M63408_IG49:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       mov      ecx, dword ptr [r13+74H]
       mov      dword ptr [r13+78H], ecx
       and      ebx, 0xD1FFAB1E
       jne      G_M63408_IG63
						;; size=20 bbWeight=0.94 PerfScore 3.99
G_M63408_IG50:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       cmp      dword ptr [r13+74H], 0
       jl       G_M63408_IG61
						;; size=11 bbWeight=0.94 PerfScore 3.76
G_M63408_IG51:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       mov      r8d, dword ptr [r13+74H]
       inc      r8d
       mov      dword ptr [r13+74H], r8d
       test     r8d, r8d
       jl       G_M63408_IG126
       cmp      dword ptr [r13+7CH], r8d
       jl       G_M63408_IG60
						;; size=30 bbWeight=0.94 PerfScore 8.02
G_M63408_IG52:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref, isz
       mov      ecx, dword ptr [r13+74H]
       mov      dword ptr [r13+78H], ecx
       test     ebx, ebx
       jne      SHORT G_M63408_IG57
						;; size=12 bbWeight=0.94 PerfScore 3.99
G_M63408_IG53:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [r13+08H]
       ; gcrRegs +[rcx]
       mov      r10d, dword ptr [r13+58H]
       test     rcx, rcx
       je       G_M63408_IG127
       cmp      dword ptr [rcx+08H], r10d
       jb       G_M63408_IG128
       mov      edx, r10d
       lea      rdx, bword ptr [rcx+rdx+10H]
       ; byrRegs +[rdx]
       mov      r11d, dword ptr [rcx+08H]
       sub      r11d, r10d
						;; size=42 bbWeight=0.94 PerfScore 11.98
G_M63408_IG54:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000004 {rdx}, byref
       ; gcrRegs -[rcx]
       cmp      r11d, 4
       jb       G_M63408_IG129
       mov      dword ptr [rdx], edi
       add      dword ptr [r13+58H], 4
						;; size=17 bbWeight=0.94 PerfScore 4.93
G_M63408_IG55:        ; gcrefRegs=00008040 {rsi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13]
       ; byrRegs -[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r15
       ; gcrRegs +[rdx]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx rsi r15]
       ; gcr arg pop 0
       nop      
						;; size=13 bbWeight=0.94 PerfScore 3.52
G_M63408_IG56:        ; , epilog, nogc, extend
       add      rsp, 104
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=0.94 PerfScore 4.93
G_M63408_IG57:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs +[rsi r13 r15]
       mov      dword ptr [r13+74H], -1
       jmp      SHORT G_M63408_IG53
						;; size=10 bbWeight=0.07 PerfScore 0.22
G_M63408_IG58:        ; gcrefRegs=0000E040 {rsi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[r14]
       mov      rdi, gword ptr [r14+08H]
       ; gcrRegs +[rdi]
       test     rdi, rdi
       je       G_M63408_IG86
       cmp      byte  ptr [rdi], dil
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M63408_IG95
						;; size=32 bbWeight=0.94 PerfScore 8.24
G_M63408_IG59:        ; gcrefRegs=0000E0C0 {rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       jmp      G_M63408_IG82
						;; size=5 bbWeight=0.78 PerfScore 1.56
G_M63408_IG60:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdi r14]
       mov      dword ptr [r13+7CH], r8d
       jmp      G_M63408_IG52
						;; size=9 bbWeight=0.14 PerfScore 0.41
G_M63408_IG61:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       xor      ecx, ecx
       mov      dword ptr [r13+74H], ecx
       jmp      G_M63408_IG51
						;; size=11 bbWeight=0.00 PerfScore 0.00
G_M63408_IG62:        ; gcVars=000000000000000000000000000000000800000000000000 {V40}, gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[r13] +[rdi r14]
       ; GC ptr vars +{V40 V59}
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rsp+40H]
       ; gcrRegs +[rdx]
       mov      r8d, 0x401
       ; GC ptr vars -{V40 V59}
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       jmp      SHORT G_M63408_IG64
						;; size=22 bbWeight=0.01 PerfScore 0.06
G_M63408_IG63:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdi r14] +[r13]
       mov      dword ptr [r13+74H], -1
       jmp      G_M63408_IG50
						;; size=13 bbWeight=0.07 PerfScore 0.22
G_M63408_IG64:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13] +[rdi r14]
       inc      r12d
       cmp      r12d, ebx
       jl       G_M63408_IG90
						;; size=12 bbWeight=0.01 PerfScore 0.01
G_M63408_IG65:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r14]
       mov      r13, gword ptr [rsi+10H]
       ; gcrRegs +[r13]
       mov      rcx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rcx, gword ptr [rcx]
       ; gcrRegs +[rcx]
       add      rcx, 8
       ; gcrRegs -[rcx]
       ; byrRegs +[rcx]
       mov      ebp, dword ptr [rcx]
       mov      ebx, dword ptr [rcx+04H]
       mov      r8, gword ptr [rdi+10H]
       ; gcrRegs +[r8]
       mov      rcx, 0xD1FFAB1E      ; DynamicILGenerator
       ; byrRegs -[rcx]
       cmp      qword ptr [r13], rcx
       jne      G_M63408_IG130
       cmp      byte  ptr [r13], r13b
       test     r8, r8
       je       G_M63408_IG119
       mov      r14, r8
       ; gcrRegs +[r14]
       mov      rcx, 0xD1FFAB1E      ; RuntimeConstructorInfo
       cmp      qword ptr [r14], rcx
       jne      SHORT G_M63408_IG67
						;; size=81 bbWeight=0.94 PerfScore 22.07
G_M63408_IG66:        ; gcrefRegs=0000E040 {rsi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdi r8]
       test     r14, r14
       je       G_M63408_IG121
       jmp      G_M63408_IG58
						;; size=14 bbWeight=0.94 PerfScore 3.05
G_M63408_IG67:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r14]
       xor      r14, r14
       ; gcrRegs +[r14]
       jmp      SHORT G_M63408_IG66
						;; size=5 bbWeight=0.23 PerfScore 0.53
G_M63408_IG68:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r14]
       mov      dword ptr [r13+7CH], ebp
       jmp      G_M63408_IG49
						;; size=9 bbWeight=0.14 PerfScore 0.41
G_M63408_IG69:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13 r15] +[rbx rbp rdi]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+50H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       jmp      G_M63408_IG22
						;; size=21 bbWeight=0.12 PerfScore 1.14
G_M63408_IG70:        ; gcrefRegs=0000B1C0 {rsi rdi r8 r12 r13 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rbx rbp r14] +[r8 r12-r13 r15]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rdx, r8
       ; gcrRegs +[rdx]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx rdi r8]
       ; gcr arg pop 0
       jmp      SHORT G_M63408_IG74
						;; size=14 bbWeight=0.13 PerfScore 0.74
G_M63408_IG71:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r12-r13 r15] +[rbx rbp rdi r14]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       jmp      G_M63408_IG24
						;; size=21 bbWeight=0.08 PerfScore 0.75
G_M63408_IG72:        ; gcrefRegs=0000F040 {rsi r12 r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rcx rbx rbp rdi] +[r12-r13 r15]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodHandle
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      gword ptr [rsp+20H], r8
       ; GC ptr vars +{V127}
       mov      rdi, gword ptr [r12+08H]
       ; gcrRegs +[rdi]
       lea      rcx, bword ptr [r8+08H]
       ; byrRegs +[rcx]
       mov      rdx, r14
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rax rdx r8 r14]
       ; byrRegs -[rcx]
       mov      r8, gword ptr [rsp+20H]
       ; gcrRegs +[r8]
       inc      dword ptr [rdi+14H]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [rdi+10H]
       cmp      dword ptr [rcx+08H], edx
       jbe      SHORT G_M63408_IG70
						;; size=60 bbWeight=0.78 PerfScore 14.15
G_M63408_IG73:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000B1C2 {rcx rsi rdi r8 r12 r13 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; GC ptr vars -{V127}
       lea      eax, [rdx+01H]
       mov      dword ptr [rdi+10H], eax
       movsxd   rdx, edx
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx rdi r8]
       ; gcr arg pop 0
						;; size=14 bbWeight=0.64 PerfScore 1.76
G_M63408_IG74:        ; gcrefRegs=0000B040 {rsi r12 r13 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [r12+08H]
       ; gcrRegs +[rcx]
       mov      edi, dword ptr [rcx+10H]
       dec      edi
       or       edi, 0xD1FFAB1E
						;; size=16 bbWeight=0.78 PerfScore 3.49
G_M63408_IG75:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx r12]
       mov      ecx, dword ptr [r13+58H]
       add      ecx, 7
       mov      rdx, gword ptr [r13+08H]
       ; gcrRegs +[rdx]
       cmp      ecx, dword ptr [rdx+08H]
       jge      SHORT G_M63408_IG79
						;; size=16 bbWeight=0.94 PerfScore 7.75
G_M63408_IG76:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdx]
       mov      ecx, ebx
       movsx    rax, bp
       sar      ecx, 22
       and      ecx, 3
       cmp      ecx, 1
       je       G_M63408_IG43
						;; size=21 bbWeight=0.94 PerfScore 2.35
G_M63408_IG77:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [r13+08H]
       ; gcrRegs +[rcx]
       mov      r8d, dword ptr [r13+58H]
       test     rcx, rcx
       je       G_M63408_IG124
       cmp      dword ptr [rcx+08H], r8d
       jb       G_M63408_IG128
       mov      edx, r8d
       lea      rdx, bword ptr [rcx+rdx+10H]
       ; byrRegs +[rdx]
       mov      r9d, dword ptr [rcx+08H]
       sub      r9d, r8d
						;; size=42 bbWeight=0.01 PerfScore 0.08
G_M63408_IG78:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000004 {rdx}, byref
       ; gcrRegs -[rcx]
       ror      ax, 8
       movsx    rcx, ax
       cmp      r9d, 2
       jb       G_M63408_IG129
       mov      word  ptr [rdx], cx
       add      dword ptr [r13+58H], 2
       jmp      G_M63408_IG44
						;; size=31 bbWeight=0.01 PerfScore 0.05
G_M63408_IG79:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rdx]
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      edx, 7
       call     [ILGenerator:IncreaseCapacity(int):this]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       jmp      SHORT G_M63408_IG76
						;; size=16 bbWeight=0.01 PerfScore 0.05
G_M63408_IG80:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[rbp rdi r14]
       mov      r8, r13
       ; gcrRegs +[r8]
       test     r8, r8
       jne      SHORT G_M63408_IG83
						;; size=8 bbWeight=0.01 PerfScore 0.02
G_M63408_IG81:        ; gcrefRegs=0000C1E0 {rbp rsi rdi r8 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13]
       mov      rcx, gword ptr [r8+08H]
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       xor      edx, edx
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r8] +[rax]
       ; gcr arg pop 0
       jmp      G_M63408_IG29
						;; size=24 bbWeight=0.01 PerfScore 0.09
G_M63408_IG82:        ; gcrefRegs=0000E0C0 {rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rbp] +[r13]
       cmp      byte  ptr [rdi], dil
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       cmp      eax, 20
       je       G_M63408_IG95
       cmp      eax, 29
       jne      SHORT G_M63408_IG86
       jmp      G_M63408_IG95
						;; size=30 bbWeight=0.78 PerfScore 6.80
G_M63408_IG83:        ; gcrefRegs=0000E1E0 {rbp rsi rdi r8 r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[rbp r8]
       mov      rcx, 0xD1FFAB1E      ; ReadOnlyCollection`1
       cmp      qword ptr [r8], rcx
       je       SHORT G_M63408_IG81
						;; size=15 bbWeight=0.01 PerfScore 0.03
G_M63408_IG84:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r8]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       call     [CORINFO_HELP_CHKCASTCLASS_SPECIAL]
       ; gcrRegs -[rdx r13] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       jmp      SHORT G_M63408_IG81
						;; size=14 bbWeight=0.00 PerfScore 0.02
G_M63408_IG85:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax r8]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      edx, r12d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName(int):Expression:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
       jmp      G_M63408_IG30
						;; size=27 bbWeight=0.48 PerfScore 2.90
G_M63408_IG86:        ; gcrefRegs=0000E040 {rsi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rbp rdi]
       mov      r12, gword ptr [r13+80H]
       ; gcrRegs +[r12]
       cmp      byte  ptr [r14], r14b
       cmp      byte  ptr [r12], r12b
       mov      rdi, r14
       ; gcrRegs +[rdi]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [r14], rcx
       jne      G_M63408_IG122
       mov      rax, qword ptr [r14+50H]
						;; size=40 bbWeight=0.78 PerfScore 11.24
G_M63408_IG87:        ; gcrefRegs=0000F0C0 {rsi rdi r12 r13 r14 r15}, byrefRegs=00000000 {}, byref
       mov      qword ptr [rsp+60H], rax
       mov      rcx, rax
       call     hackishModuleName:hackishMethodName()
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M63408_IG72
       mov      rcx, qword ptr [rsp+60H]
       call     hackishModuleName:hackishMethodName(long):RuntimeType
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       test     rax, rax
       je       G_M63408_IG72
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M63408_IG123
       jmp      G_M63408_IG72
						;; size=61 bbWeight=0.78 PerfScore 8.72
G_M63408_IG88:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r12] +[rbp]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbp] +[rax]
       ; gcr arg pop 0
						;; size=8 bbWeight=0.01 PerfScore 0.01
G_M63408_IG89:        ; gcrefRegs=0000E0C1 {rax rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      r8, rax
       ; gcrRegs +[r8]
       call     [LambdaCompiler:EmitAddressWriteBack(Expression,Type):WriteBack:this]
       ; gcrRegs -[rcx rdx r8 r13]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       test     rbp, rbp
       jne      G_M63408_IG145
       jmp      G_M63408_IG40
						;; size=32 bbWeight=0.01 PerfScore 0.07
G_M63408_IG90:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rbp]
       cmp      r12d, r13d
       jae      G_M63408_IG151
       mov      edx, r12d
       mov      rbp, gword ptr [r14+8*rdx+10H]
       ; gcrRegs +[rbp]
       mov      rdx, 0xD1FFAB1E      ; InstanceMethodCallExpression1
       cmp      qword ptr [rdi], rdx
       jne      G_M63408_IG106
						;; size=36 bbWeight=0.01 PerfScore 0.08
G_M63408_IG91:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       test     r12d, r12d
       jne      G_M63408_IG120
       mov      rdx, gword ptr [rdi+18H]
       ; gcrRegs +[rdx]
       mov      rax, rdx
       ; gcrRegs +[rax]
       mov      gword ptr [rsp+38H], rax
       ; GC ptr vars +{V86}
       mov      rdx, rax
       mov      rcx, 0xD1FFAB1E      ; Expression
       call     [CORINFO_HELP_ISINSTANCEOFCLASS]
       ; gcrRegs -[rdx]
       ; gcr arg pop 0
       test     rax, rax
       je       SHORT G_M63408_IG93
						;; size=45 bbWeight=0.00 PerfScore 0.05
G_M63408_IG92:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000C0E1 {rax rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; GC ptr vars -{V86}
       jmp      G_M63408_IG107
						;; size=5 bbWeight=0.00 PerfScore 0.01
G_M63408_IG93:        ; gcVars=000000000000000000000000000000000020000000000000 {V86}, gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[rax]
       ; GC ptr vars +{V86}
       mov      rdx, gword ptr [rsp+38H]
       ; gcrRegs +[rdx]
       mov      r8, rdx
       ; gcrRegs +[r8]
       test     r8, r8
       jne      SHORT G_M63408_IG97
						;; size=13 bbWeight=0.00 PerfScore 0.00
G_M63408_IG94:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000C1E0 {rbp rsi rdi r8 r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[rdx]
       ; GC ptr vars -{V86}
       mov      rcx, gword ptr [r8+08H]
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       xor      edx, edx
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r8] +[rax]
       ; gcr arg pop 0
       jmp      SHORT G_M63408_IG92
						;; size=21 bbWeight=0.00 PerfScore 0.00
G_M63408_IG95:        ; gcrefRegs=0000E0C0 {rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rbp] +[r13]
       mov      r12, gword ptr [r13+80H]
       ; gcrRegs +[r12]
       cmp      byte  ptr [r14], r14b
       cmp      byte  ptr [rdi], dil
       mov      rcx, 0xD1FFAB1E      ; GenericMethodInfo
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+30H], rax
       ; GC ptr vars +{V114}
       mov      r8, gword ptr [r12+08H]
       ; gcrRegs +[r8]
       mov      gword ptr [rsp+28H], r8
       ; GC ptr vars +{V115}
       mov      rdx, r14
       ; gcrRegs +[rdx]
       lea      rcx, bword ptr [rax+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rax rdx r8 r14]
       ; byrRegs -[rcx]
       mov      r14, gword ptr [rsp+30H]
       ; gcrRegs +[r14]
       lea      rcx, bword ptr [r14+10H]
       ; byrRegs +[rcx]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx rdi]
       ; byrRegs -[rcx]
       mov      rdi, gword ptr [rsp+28H]
       ; gcrRegs +[rdi]
       inc      dword ptr [rdi+14H]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      eax, dword ptr [rdi+10H]
       cmp      dword ptr [rcx+08H], eax
       jbe      G_M63408_IG105
						;; size=96 bbWeight=0.16 PerfScore 4.88
G_M63408_IG96:        ; gcVars=000000000000000000000000100000000000000000000000 {V114}, gcrefRegs=0000F0C2 {rcx rsi rdi r12 r13 r14 r15}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; GC ptr vars -{V115}
       jmp      SHORT G_M63408_IG99
						;; size=2 bbWeight=0.14 PerfScore 0.27
G_M63408_IG97:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=0000C1E4 {rdx rbp rsi rdi r8 r14 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rcx r12-r13] +[rdx rbp r8]
       ; GC ptr vars -{V114}
       mov      rcx, 0xD1FFAB1E      ; ReadOnlyCollection`1
       cmp      qword ptr [r8], rcx
       je       G_M63408_IG94
						;; size=19 bbWeight=0.00 PerfScore 0.00
G_M63408_IG98:        ; gcrefRegs=0000C0E4 {rdx rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r8]
       call     [CORINFO_HELP_CHKCASTCLASS_SPECIAL]
       ; gcrRegs -[rdx] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       jmp      G_M63408_IG94
						;; size=14 bbWeight=0.00 PerfScore 0.00
G_M63408_IG99:        ; gcVars=000000000000000000000000100000000000000000000000 {V114}, gcrefRegs=0000F0C2 {rcx rsi rdi r12 r13 r14 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rax rbp r8] +[rcx r12-r13]
       ; GC ptr vars +{V114}
       lea      edx, [rax+01H]
       mov      dword ptr [rdi+10H], edx
       movsxd   rdx, eax
       mov      r8, r14
       ; gcrRegs +[r8]
       ; GC ptr vars -{V114}
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx rdi r8 r14]
       ; gcr arg pop 0
						;; size=17 bbWeight=0.14 PerfScore 0.41
G_M63408_IG100:        ; gcrefRegs=0000B040 {rsi r12 r13 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [r12+08H]
       ; gcrRegs +[rcx]
       mov      edi, dword ptr [rcx+10H]
       dec      edi
       or       edi, 0xD1FFAB1E
       jmp      G_M63408_IG75
						;; size=21 bbWeight=0.16 PerfScore 1.07
G_M63408_IG101:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx r12-r13 r15] +[rdi]
       mov      r12, 0xD1FFAB1E      ; NewValueTypeExpression
       cmp      qword ptr [rdi], r12
       jne      G_M63408_IG131
       mov      rdx, gword ptr [rdi+20H]
       ; gcrRegs +[rdx]
						;; size=23 bbWeight=0.06 PerfScore 0.38
G_M63408_IG102:        ; gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [LambdaCompiler:GetLocal(Type):LocalBuilder:this]
       ; gcrRegs -[rcx rdx] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rcx, gword ptr [rsi+10H]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; DynamicILGenerator
       cmp      qword ptr [rcx], rdx
       jne      G_M63408_IG132
       mov      rdx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rdx, qword ptr [rdx+08H]
       ; gcrRegs -[rdx]
       mov      r8, r15
       ; gcrRegs +[r8]
       cmp      dword ptr [rcx], ecx
       call     [ILGenerator:Emit(OpCode,LocalBuilder):this]
       ; gcrRegs -[rax rcx r8]
       ; gcr arg pop 0
       mov      rbp, gword ptr [rsi+10H]
       ; gcrRegs +[rbp]
       mov      rcx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rcx, gword ptr [rcx]
       ; gcrRegs +[rcx]
       add      rcx, 8
       ; gcrRegs -[rcx]
       ; byrRegs +[rcx]
       mov      ebx, dword ptr [rcx]
       mov      r13d, dword ptr [rcx+04H]
       cmp      qword ptr [rdi], r12
       jne      G_M63408_IG133
       mov      r8, gword ptr [rdi+20H]
       ; gcrRegs +[r8]
       mov      rcx, 0xD1FFAB1E      ; DynamicILGenerator
       ; byrRegs -[rcx]
       cmp      qword ptr [rbp], rcx
       jne      G_M63408_IG134
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      dword ptr [rsp+58H], ebx
       mov      dword ptr [rsp+5CH], r13d
       mov      rdx, qword ptr [rsp+58H]
       cmp      dword ptr [rcx], ecx
       call     [DynamicILGenerator:Emit(OpCode,Type):this]
       ; gcrRegs -[rcx rbp rdi r8]
       ; gcr arg pop 0
       mov      rcx, gword ptr [rsi+10H]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; DynamicILGenerator
       cmp      qword ptr [rcx], rdx
       jne      G_M63408_IG135
       mov      rdx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rdx, qword ptr [rdx+08H]
       ; gcrRegs -[rdx]
       mov      r8, r15
       ; gcrRegs +[r8]
       cmp      dword ptr [rcx], ecx
       call     [ILGenerator:Emit(OpCode,LocalBuilder):this]
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
						;; size=199 bbWeight=0.06 PerfScore 3.95
G_M63408_IG103:        ; gcrefRegs=00008040 {rsi r15}, byrefRegs=00000000 {}, byref
       mov      rcx, gword ptr [rsi+48H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [r15+08H]
       ; gcrRegs +[rdx]
       mov      r8, r15
       ; gcrRegs +[r8]
       cmp      dword ptr [rcx], ecx
       call     [KeyedStack`2:Push(__Canon,__Canon):this]
       ; gcrRegs -[rcx rdx rsi r8 r15]
       ; gcr arg pop 0
       nop      
						;; size=20 bbWeight=0.06 PerfScore 0.64
G_M63408_IG104:        ; , epilog, nogc, extend
       add      rsp, 104
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=0.06 PerfScore 0.32
G_M63408_IG105:        ; gcVars=000000000000000000000000100000000000000000000000 {V114}, gcrefRegs=0000F0C0 {rsi rdi r12 r13 r14 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs +[rsi rdi r12-r15]
       ; GC ptr vars +{V114}
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rdx, r14
       ; gcrRegs +[rdx]
       ; GC ptr vars -{V114}
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx rdi r14]
       ; gcr arg pop 0
       jmp      G_M63408_IG100
						;; size=17 bbWeight=0.03 PerfScore 0.16
G_M63408_IG106:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r12-r13] +[rbp rdi r14]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      edx, r12d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName(int):Expression:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
						;; size=19 bbWeight=0.00 PerfScore 0.02
G_M63408_IG107:        ; gcrefRegs=0000C0E1 {rax rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       mov      gword ptr [rsp+40H], rax
       ; GC ptr vars +{V40}
       mov      rdx, 0xD1FFAB1E      ; RuntimeParameterInfo
       cmp      qword ptr [rbp], rdx
       jne      G_M63408_IG149
       cmp      gword ptr [rbp+08H], 0
       je       SHORT G_M63408_IG110
						;; size=32 bbWeight=0.01 PerfScore 0.09
G_M63408_IG108:        ; gcVars=000000000000000000000000000000000800000000000000 {V40}, gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rax]
       mov      rbp, gword ptr [rbp+08H]
						;; size=4 bbWeight=0.01 PerfScore 0.02
G_M63408_IG109:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       mov      rdx, qword ptr [rbp]
       mov      qword ptr [rsp+48H], rdx
       mov      rcx, 0xD1FFAB1E      ; RuntimeType
       cmp      rdx, rcx
       jne      SHORT G_M63408_IG112
       cmp      byte  ptr [rbp], bpl
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       cmp      eax, 16
       jne      G_M63408_IG62
       jmp      SHORT G_M63408_IG114
						;; size=47 bbWeight=0.01 PerfScore 0.12
G_M63408_IG110:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       mov      edx, dword ptr [rbp+2CH]
       cmp      edx, -1
       je       G_M63408_IG148
       mov      rcx, gword ptr [rbp+30H]
       ; gcrRegs +[rcx]
       mov      r8, gword ptr [rcx+08H]
       ; gcrRegs +[r8]
       cmp      edx, dword ptr [r8+08H]
       jae      G_M63408_IG151
       mov      edx, edx
       mov      rdx, gword ptr [r8+8*rdx+10H]
       ; gcrRegs +[rdx]
						;; size=37 bbWeight=0.00 PerfScore 0.04
G_M63408_IG111:        ; gcrefRegs=0000C0E4 {rdx rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx r8]
       lea      rcx, bword ptr [rbp+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       jmp      SHORT G_M63408_IG108
						;; size=11 bbWeight=0.00 PerfScore 0.01
G_M63408_IG112:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      r8, qword ptr [rdx+58H]
       call     [r8+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M63408_IG62
						;; size=19 bbWeight=0.01 PerfScore 0.06
G_M63408_IG113:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       jmp      G_M63408_IG150
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M63408_IG114:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       cmp      byte  ptr [rbp], bpl
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       call     hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbp] +[rax]
       ; gcr arg pop 0
						;; size=12 bbWeight=0.00 PerfScore 0.00
G_M63408_IG115:        ; gcrefRegs=0000C0C1 {rax rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rsp+40H]
       ; gcrRegs +[rdx]
       mov      r8, rax
       ; gcrRegs +[r8]
       ; GC ptr vars -{V40}
       call     [LambdaCompiler:EmitAddressWriteBack(Expression,Type):WriteBack:this]
       ; gcrRegs -[rcx rdx r8]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       test     rbp, rbp
       je       G_M63408_IG64
						;; size=29 bbWeight=0.00 PerfScore 0.00
G_M63408_IG116:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax]
       test     r15, r15
       jne      SHORT G_M63408_IG117
       mov      rcx, 0xD1FFAB1E      ; List`1
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs -[r15] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       call     [List`1:.ctor():this]
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
						;; size=32 bbWeight=0    PerfScore 0.00
G_M63408_IG117:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       inc      dword ptr [r15+14H]
       mov      rcx, gword ptr [r15+08H]
       ; gcrRegs +[rcx]
       mov      eax, dword ptr [r15+10H]
       cmp      dword ptr [rcx+08H], eax
       jbe      SHORT G_M63408_IG118
       lea      edx, [rax+01H]
       mov      dword ptr [r15+10H], edx
       movsxd   rdx, eax
       mov      r8, rbp
       ; gcrRegs +[r8]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx rbp r8]
       ; gcr arg pop 0
       jmp      G_M63408_IG64
						;; size=40 bbWeight=0    PerfScore 0.00
G_M63408_IG118:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbp]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rdx, rbp
       ; gcrRegs +[rdx]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx rbp]
       ; gcr arg pop 0
       jmp      G_M63408_IG64
						;; size=17 bbWeight=0    PerfScore 0.00
G_M63408_IG119:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi rdi r14-r15]
       mov      ecx, 0x1A038
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [ArgumentNullException:Throw(String)]
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
       int3     
						;; size=30 bbWeight=0    PerfScore 0.00
G_M63408_IG120:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentOutOfRangeException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x262B
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [ArgumentOutOfRangeException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=58 bbWeight=0    PerfScore 0.00
G_M63408_IG121:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0x7F15
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x1A038
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String,String):this]
       ; gcrRegs -[rax rcx rdx rsi r8]
       ; gcr arg pop 0
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rdi]
       ; gcr arg pop 0
						;; size=93 bbWeight=0    PerfScore 0.00
G_M63408_IG122:        ; gcrefRegs=0000F0C0 {rsi rdi r12 r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rsi rdi r12-r15]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rdx, rax
       jmp      G_M63408_IG87
						;; size=24 bbWeight=0    PerfScore 0.00
G_M63408_IG123:        ; gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi r12-r15]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       call     [RuntimeType:GetMethodBase(RuntimeType,IRuntimeMethodInfo):MethodBase]
       ; gcrRegs -[rcx rdx rdi] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+68H]
       call     [rax+08H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x7D2B
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      r8, rbx
       ; gcrRegs +[r8]
       call     [SR:Format(String,Object,Object):String]
       ; gcrRegs -[rcx rdx rbx r8 r13]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=126 bbWeight=0    PerfScore 0.00
G_M63408_IG124:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[rsi r13 r15]
       test     r8d, r8d
       jne      SHORT G_M63408_IG128
       xor      rdx, rdx
       ; byrRegs +[rdx]
       xor      r9d, r9d
       jmp      G_M63408_IG78
						;; size=15 bbWeight=0    PerfScore 0.00
G_M63408_IG125:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rdx]
       movsxd   rax, ebp
       sub      qword ptr [r13+50H], rax
       xor      eax, eax
       mov      dword ptr [r13+74H], eax
       jmp      G_M63408_IG49
						;; size=18 bbWeight=0    PerfScore 0.00
G_M63408_IG126:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref
       movsxd   rax, r8d
       sub      qword ptr [r13+50H], rax
       xor      eax, eax
       mov      dword ptr [r13+74H], eax
       jmp      G_M63408_IG52
						;; size=18 bbWeight=0    PerfScore 0.00
G_M63408_IG127:        ; gcrefRegs=0000A040 {rsi r13 r15}, byrefRegs=00000000 {}, byref, isz
       test     r10d, r10d
       jne      SHORT G_M63408_IG128
       xor      rdx, rdx
       ; byrRegs +[rdx]
       xor      r11d, r11d
       jmp      G_M63408_IG54
						;; size=15 bbWeight=0    PerfScore 0.00
G_M63408_IG128:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi r13 r15]
       ; byrRegs -[rdx]
       call     [ThrowHelper:ThrowArgumentOutOfRangeException()]
       ; gcr arg pop 0
       int3     
						;; size=7 bbWeight=0    PerfScore 0.00
G_M63408_IG129:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      ecx, 41
       call     [ThrowHelper:ThrowArgumentOutOfRangeException(int)]
       ; gcr arg pop 0
       int3     
						;; size=12 bbWeight=0    PerfScore 0.00
G_M63408_IG130:        ; gcrefRegs=0000A140 {rsi r8 r13 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rsi r8 r13 r15]
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      dword ptr [rsp+58H], ebp
       mov      dword ptr [rsp+5CH], ebx
       mov      rdx, qword ptr [rsp+58H]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+48H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r8 r13]
       ; gcr arg pop 0
       jmp      G_M63408_IG55
						;; size=31 bbWeight=0    PerfScore 0.00
G_M63408_IG131:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r15] +[rdi]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       jmp      G_M63408_IG102
						;; size=21 bbWeight=0    PerfScore 0.00
G_M63408_IG132:        ; gcrefRegs=000080C2 {rcx rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rdx] +[rcx r15]
       mov      rdx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rdx, qword ptr [rdx+08H]
       ; gcrRegs -[rdx]
       mov      r8, r15
       ; gcrRegs +[r8]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+58H]
       call     [rax]ILGenerator:Emit(OpCode,LocalBuilder):this
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       mov      rbp, gword ptr [rsi+10H]
       ; gcrRegs +[rbp]
       mov      rcx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rcx, gword ptr [rcx]
       ; gcrRegs +[rcx]
       add      rcx, 8
       ; gcrRegs -[rcx]
       ; byrRegs +[rcx]
       mov      ebx, dword ptr [rcx]
       mov      r13d, dword ptr [rcx+04H]
						;; size=56 bbWeight=0    PerfScore 0.00
G_M63408_IG133:        ; gcrefRegs=000080E0 {rbp rsi rdi r15}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rcx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx rdi] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
						;; size=16 bbWeight=0    PerfScore 0.00
G_M63408_IG134:        ; gcrefRegs=00008160 {rbp rsi r8 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      dword ptr [rsp+58H], ebx
       mov      dword ptr [rsp+5CH], r13d
       mov      rdx, qword ptr [rsp+58H]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+50H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbp r8]
       ; gcr arg pop 0
       mov      rcx, gword ptr [rsi+10H]
       ; gcrRegs +[rcx]
						;; size=30 bbWeight=0    PerfScore 0.00
G_M63408_IG135:        ; gcrefRegs=00008042 {rcx rsi r15}, byrefRegs=00000000 {}, byref
       mov      rdx, 0xD1FFAB1E      ; box for (null)hackishFieldName
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rdx, qword ptr [rdx+08H]
       ; gcrRegs -[rdx]
       mov      r8, r15
       ; gcrRegs +[r8]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+58H]
       call     [rax]ILGenerator:Emit(OpCode,LocalBuilder):this
       ; gcrRegs -[rcx r8]
       ; gcr arg pop 0
       jmp      G_M63408_IG103
						;; size=34 bbWeight=0    PerfScore 0.00
G_M63408_IG136:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r15] +[rdi]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       jmp      G_M63408_IG07
						;; size=7 bbWeight=0    PerfScore 0.00
G_M63408_IG137:        ; gcrefRegs=000000C2 {rcx rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; RuntimeType
       ; gcrRegs -[rax]
       cmp      qword ptr [rcx], rax
       je       G_M63408_IG08
						;; size=32 bbWeight=0    PerfScore 0.00
G_M63408_IG138:        ; gcrefRegs=000000C2 {rcx rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+68H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     al, 128
       je       G_M63408_IG09
						;; size=18 bbWeight=0    PerfScore 0.00
G_M63408_IG139:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi rdi]
       mov      rcx, 0xD1FFAB1E      ; InvalidOperationException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x21C7
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [InvalidOperationException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=67 bbWeight=0    PerfScore 0.00
G_M63408_IG140:        ; gcrefRegs=000040E8 {rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbx rbp rsi rdi r14]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       jmp      G_M63408_IG24
						;; size=7 bbWeight=0    PerfScore 0.00
G_M63408_IG141:        ; gcrefRegs=000040EA {rcx rbx rbp rsi rdi r14}, byrefRegs=00000000 {}, byref
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+50H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       jmp      G_M63408_IG25
						;; size=14 bbWeight=0    PerfScore 0.00
G_M63408_IG142:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx] +[r13 r15]
       mov      rcx, gword ptr [rbp+30H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rcx+18H]
       ; gcrRegs +[rdx]
       jmp      G_M63408_IG34
						;; size=13 bbWeight=0    PerfScore 0.00
G_M63408_IG143:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rbp]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbp] +[rax]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       jmp      G_M63408_IG32
						;; size=22 bbWeight=0    PerfScore 0.00
G_M63408_IG144:        ; gcrefRegs=0000E0E0 {rbp rsi rdi r13 r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rax+60H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbp] +[rax]
       ; gcr arg pop 0
       jmp      G_M63408_IG89
						;; size=15 bbWeight=0    PerfScore 0.00
G_M63408_IG145:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax r13] +[rbp]
       test     r15, r15
       jne      SHORT G_M63408_IG146
       mov      rcx, 0xD1FFAB1E      ; List`1
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs -[r15] +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       call     [List`1:.ctor():this]
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
						;; size=32 bbWeight=0    PerfScore 0.00
G_M63408_IG146:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref, isz
       inc      dword ptr [r15+14H]
       mov      rcx, gword ptr [r15+08H]
       ; gcrRegs +[rcx]
       mov      eax, dword ptr [r15+10H]
       cmp      dword ptr [rcx+08H], eax
       jbe      SHORT G_M63408_IG147
       lea      edx, [rax+01H]
       mov      dword ptr [r15+10H], edx
       movsxd   rdx, eax
       mov      r8, rbp
       ; gcrRegs +[r8]
       call     CORINFO_HELP_ARRADDR_ST
       ; gcrRegs -[rcx rbp r8]
       ; gcr arg pop 0
       jmp      G_M63408_IG40
						;; size=40 bbWeight=0    PerfScore 0.00
G_M63408_IG147:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbp]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rdx, rbp
       ; gcrRegs +[rdx]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx rbp]
       ; gcr arg pop 0
       jmp      G_M63408_IG40
						;; size=17 bbWeight=0    PerfScore 0.00
G_M63408_IG148:        ; gcVars=000000000000000000000000000000000800000000000000 {V40}, gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs +[rbp]
       ; GC ptr vars +{V40 V59}
       mov      rcx, gword ptr [rbp+30H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rcx+18H]
       ; gcrRegs +[rdx]
       jmp      G_M63408_IG111
						;; size=13 bbWeight=0    PerfScore 0.00
G_M63408_IG149:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rdx, qword ptr [rbp]
       mov      rdx, qword ptr [rdx+40H]
       call     [rdx+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rbp] +[rax]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       jmp      G_M63408_IG109
						;; size=22 bbWeight=0    PerfScore 0.00
G_M63408_IG150:        ; gcrefRegs=0000C0E0 {rbp rsi rdi r14 r15}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rbp, qword ptr [rsp+48H]
       ; gcrRegs -[rbp]
       mov      rax, qword ptr [rbp+60H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       jmp      G_M63408_IG115
						;; size=20 bbWeight=0    PerfScore 0.00
G_M63408_IG151:        ; gcVars=000000000000000000000000000000000000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rax rsi rdi r14-r15]
       ; GC ptr vars -{V40 V59}
       call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
       int3     
						;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 3639, prolog size 16, PerfScore 687.66, instruction count 869, allocated bytes for code 3639 (MethodHash=e27a084f) for method LambdaCompiler:EmitNewExpression(Expression):this
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x10
  CountOfUnwindCodes: 9
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x10 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 12 * 8 + 8 = 104 = 0x68
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x08 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
