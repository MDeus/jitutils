; Assembly listing for method RuntimeBinderExtensions:AreParametersEquivalent(MethodBase,MethodBase):bool
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; optimized using profile data
; rsp based frame
; fully interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 831
; 9 inlinees with PGO data; 7 single block inlinees; 0 inlinees without PGO data
; Final local variable assignments
;
;  V00 arg0         [V00,T02] ( 13,  7.06)     ref  ->  rsi         class-hnd single-def
;  V01 arg1         [V01,T03] ( 13,  7.06)     ref  ->  rdi         class-hnd single-def
;  V02 loc0         [V02,T14] (  5,  2.82)     ref  ->  rbx         class-hnd
;  V03 loc1         [V03,T10] (  6,  3.61)     ref  ->  rbp         class-hnd single-def
;  V04 loc2         [V04,T04] ( 12,  4.91)     int  ->  r15        
;  V05 OutArgs      [V05    ] (  1,  1   )  lclBlk (40) [rsp+00H]   "OutgoingArgSpace"
;  V06 tmp1         [V06,T23] (  5,  2.00)     ref  ->  rbx         "guarded devirt return temp"
;  V07 tmp2         [V07,T24] (  2,  2.00)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V08 tmp3         [V08,T19] (  4,  2.16)     ref  ->  rbp         "guarded devirt return temp"
;  V09 tmp4         [V09,T25] (  2,  2.00)     ref  ->  rcx         class-hnd exact single-def "guarded devirt this exact temp"
;  V10 tmp5         [V10,T07] (  6,  4.34)     ref  ->  rbx         class-hnd "Inline stloc first use temp"
;  V11 tmp6         [V11,T22] (  3,  2.02)     ref  ->  rbp         class-hnd exact "Inline stloc first use temp"
;* V12 tmp7         [V12    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inline return value spill temp"
;  V13 tmp8         [V13,T08] (  2,  4.00)     ref  ->  rbx         class-hnd single-def "dup spill"
;  V14 tmp9         [V14,T11] (  4,  3.53)     ref  ->  rbx        
;* V15 tmp10        [V15    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "dup spill"
;* V16 tmp11        [V16    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inline stloc first use temp"
;  V17 tmp12        [V17,T20] (  2,  2.13)     ref  ->   r8         class-hnd single-def "dup spill"
;  V18 tmp13        [V18,T26] (  4,  1.71)     ref  ->   r8        
;  V19 tmp14        [V19,T31] (  3,  1.59)     ref  ->  rbx         class-hnd single-def "Inline return value spill temp"
;  V20 tmp15        [V20    ] (  2,  1.06)     ref  ->  [rsp+40H]   do-not-enreg[X] must-init addr-exposed ld-addr-op class-hnd "Inline ldloca(s) first use temp"
;  V21 tmp16        [V21,T05] (  6,  4.84)     ref  ->  rbp         class-hnd "Inline stloc first use temp"
;  V22 tmp17        [V22,T17] (  3,  2.51)     ref  ->  r14         class-hnd exact "Inline stloc first use temp"
;* V23 tmp18        [V23    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "Inline return value spill temp"
;  V24 tmp19        [V24,T09] (  2,  4.00)     ref  ->  rbp         class-hnd single-def "dup spill"
;  V25 tmp20        [V25,T12] (  4,  3.53)     ref  ->  rbp        
;* V26 tmp21        [V26    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def "dup spill"
;* V27 tmp22        [V27    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inline stloc first use temp"
;  V28 tmp23        [V28,T21] (  2,  2.13)     ref  ->   r8         class-hnd single-def "dup spill"
;  V29 tmp24        [V29,T27] (  4,  1.71)     ref  ->   r8        
;  V30 tmp25        [V30,T32] (  3,  1.59)     ref  ->  rbp         class-hnd single-def "Inline return value spill temp"
;  V31 tmp26        [V31    ] (  2,  1.06)     ref  ->  [rsp+38H]   do-not-enreg[X] must-init addr-exposed ld-addr-op class-hnd "Inline ldloca(s) first use temp"
;  V32 tmp27        [V32,T28] ( 10,  1.65)    bool  ->  rax         "Inline return value spill temp"
;  V33 tmp28        [V33,T00] ( 20, 11.52)     ref  ->  r12         class-hnd "Inlining Arg"
;  V34 tmp29        [V34,T01] ( 18,  9.88)     ref  ->  r13         class-hnd "Inlining Arg"
;  V35 tmp30        [V35,T13] (  6,  3.29)     ref  ->  r12         class-hnd "impAppendStmt"
;  V36 tmp31        [V36,T30] (  4,  1.65)     int  ->  rax         "guarded devirt return temp"
;* V37 tmp32        [V37    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V38 tmp33        [V38,T15] ( 14,  2.63)     ref  ->  r12         class-hnd exact "guarded devirt this exact temp"
;  V39 tmp34        [V39,T29] (  6,  1.65)     ref  ->  rdx         "guarded devirt return temp"
;  V40 tmp35        [V40,T16] ( 14,  2.63)     ref  ->  r13         class-hnd exact "guarded devirt this exact temp"
;  V41 tmp36        [V41,T39] (  6,  0.11)     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;* V42 tmp37        [V42    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V43 tmp38        [V43    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V44 tmp39        [V44,T40] (  6,  0.11)     ref  ->  rdx         class-hnd "Inline stloc first use temp"
;* V45 tmp40        [V45    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V46 tmp41        [V46    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V47 tmp42        [V47,T33] (  6,  0.32)     ref  ->   r9         "arr expr"
;  V48 tmp43        [V48,T35] (  6,  0.32)     int  ->   r8         "index expr"
;  V49 tmp44        [V49,T34] (  6,  0.32)     ref  ->   r8         "arr expr"
;  V50 tmp45        [V50,T36] (  6,  0.32)     int  ->  rax         "index expr"
;  V51 cse0         [V51,T37] (  3,  0.16)     int  ->   r8         "CSE - conservative"
;  V52 cse1         [V52,T38] (  3,  0.16)     int  ->  rax         "CSE - conservative"
;  V53 cse2         [V53,T42] (  3,  0.00)     int  ->   r8         "CSE - conservative"
;  V54 cse3         [V54,T43] (  3,  0.00)     int  ->  rax         "CSE - conservative"
;  V55 cse4         [V55,T06] (  7,  4.40)     int  ->  r14         "CSE - moderate"
;  V56 cse5         [V56,T18] (  6,  2.47)    long  ->  [rsp+30H]   "CSE - moderate"
;  V57 cse6         [V57,T41] (  3,  0.02)    long  ->  rcx         "CSE - conservative"
;
; Lcl frame size = 72

G_M57913_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 72
       xor      eax, eax
       mov      qword ptr [rsp+40H], rax
       mov      qword ptr [rsp+38H], rax
       mov      rsi, rcx
       ; gcrRegs +[rsi]
       mov      rdi, rdx
       ; gcrRegs +[rdi]
						;; size=34 bbWeight=1    PerfScore 11.00
G_M57913_IG02:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rsi], rcx
       jne      G_M57913_IG57
						;; size=19 bbWeight=1    PerfScore 4.25
G_M57913_IG03:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rbx, gword ptr [rcx+20H]
       ; gcrRegs +[rbx]
       test     rbx, rbx
       jne      SHORT G_M57913_IG06
						;; size=12 bbWeight=1.00 PerfScore 3.50
G_M57913_IG04:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rbx]
       mov      r8, gword ptr [rsi+30H]
       ; gcrRegs +[r8]
       test     r8, r8
       je       G_M57913_IG35
						;; size=13 bbWeight=0.53 PerfScore 1.73
G_M57913_IG05:        ; gcrefRegs=000001C0 {rsi rdi r8}, byrefRegs=00000000 {}, byref
       xor      r9d, r9d
       mov      dword ptr [rsp+20H], r9d
       lea      r9, [rsp+40H]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName(IRuntimeMethodInfo,MemberInfo,Signature,byref,bool):ref
       ; gcrRegs -[rcx rdx r8] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       mov      gword ptr [rsp+40H], rdx
       lea      rcx, bword ptr [rsi+20H]
       ; byrRegs +[rcx]
       mov      rdx, rbx
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rax rdx]
       ; byrRegs -[rcx]
						;; size=53 bbWeight=0.53 PerfScore 4.65
G_M57913_IG06:        ; gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}, byref
       cmp      dword ptr [rbx+08H], 0
       je       G_M57913_IG33
						;; size=10 bbWeight=1.00 PerfScore 4.00
G_M57913_IG07:        ; gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}, byref
       mov      edx, dword ptr [rbx+08H]
       mov      rcx, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_OBJ
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       mov      r8d, dword ptr [rbx+08H]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       mov      rdx, rbp
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rbx]
       ; gcr arg pop 0
       mov      rbx, rbp
       ; gcrRegs +[rbx]
						;; size=46 bbWeight=0.67 PerfScore 6.38
G_M57913_IG08:        ; gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbp]
       mov      rcx, 0xD1FFAB1E      ; RuntimeMethodInfo
       cmp      qword ptr [rdi], rcx
       jne      G_M57913_IG58
						;; size=19 bbWeight=1    PerfScore 4.25
G_M57913_IG09:        ; gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}, byref, isz
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rbp, gword ptr [rcx+20H]
       ; gcrRegs +[rbp]
       test     rbp, rbp
       jne      SHORT G_M57913_IG12
						;; size=12 bbWeight=1.00 PerfScore 3.50
G_M57913_IG10:        ; gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rbp]
       mov      r8, gword ptr [rdi+30H]
       ; gcrRegs +[r8]
       test     r8, r8
       je       G_M57913_IG34
						;; size=13 bbWeight=0.53 PerfScore 1.73
G_M57913_IG11:        ; gcrefRegs=000001C8 {rbx rsi rdi r8}, byrefRegs=00000000 {}, byref
       xor      r9d, r9d
       mov      dword ptr [rsp+20H], r9d
       lea      r9, [rsp+38H]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName(IRuntimeMethodInfo,MemberInfo,Signature,byref,bool):ref
       ; gcrRegs -[rcx rdx r8] +[rax]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       mov      gword ptr [rsp+38H], rdx
       lea      rcx, bword ptr [rdi+20H]
       ; byrRegs +[rcx]
       mov      rdx, rbp
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rax rdx]
       ; byrRegs -[rcx]
						;; size=53 bbWeight=0.53 PerfScore 4.65
G_M57913_IG12:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       cmp      dword ptr [rbp+08H], 0
       je       G_M57913_IG30
						;; size=10 bbWeight=1.00 PerfScore 4.00
G_M57913_IG13:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       mov      edx, dword ptr [rbp+08H]
       mov      rcx, 0xD1FFAB1E
       call     CORINFO_HELP_NEWARR_1_OBJ
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       mov      r8d, dword ptr [rbp+08H]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rdx, r14
       ; gcrRegs +[rdx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       ; gcrRegs -[rax]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rbp]
       ; gcr arg pop 0
       mov      rbp, r14
       ; gcrRegs +[rbp]
						;; size=46 bbWeight=0.84 PerfScore 7.94
G_M57913_IG14:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r14]
       mov      r14d, dword ptr [rbx+08H]
       cmp      r14d, dword ptr [rbp+08H]
       jne      G_M57913_IG21
						;; size=14 bbWeight=1    PerfScore 6.00
G_M57913_IG15:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       xor      r15d, r15d
       test     r14d, r14d
       jle      G_M57913_IG63
       cmp      dword ptr [rbp+08H], r14d
       jl       G_M57913_IG36
						;; size=22 bbWeight=0.78 PerfScore 4.30
G_M57913_IG16:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref, isz
       mov      ecx, r15d
       mov      r12, gword ptr [rbx+8*rcx+10H]
       ; gcrRegs +[r12]
       mov      ecx, r15d
       mov      r13, gword ptr [rbp+8*rcx+10H]
       ; gcrRegs +[r13]
       test     r12, r12
       je       G_M57913_IG52
       test     r13, r13
       je       G_M57913_IG52
       mov      rax, 0xD1FFAB1E      ; RuntimeParameterInfo
       cmp      qword ptr [r12], rax
       jne      G_M57913_IG23
       cmp      r12, r13
       je       G_M57913_IG53
       cmp      gword ptr [r12+08H], 0
       je       SHORT G_M57913_IG19
						;; size=71 bbWeight=0.81 PerfScore 13.45
G_M57913_IG17:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       mov      r12, gword ptr [r12+08H]
       cmp      qword ptr [r13], rax
       jne      G_M57913_IG56
       cmp      gword ptr [r13+08H], 0
       jne      G_M57913_IG27
						;; size=26 bbWeight=0.81 PerfScore 8.15
G_M57913_IG18:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       jmp      G_M57913_IG25
						;; size=5 bbWeight=0.05 PerfScore 0.11
G_M57913_IG19:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       mov      r8d, dword ptr [r12+2CH]
       cmp      r8d, -1
       je       G_M57913_IG54
       mov      rdx, gword ptr [r12+30H]
       ; gcrRegs +[rdx]
       mov      r9, gword ptr [rdx+08H]
       ; gcrRegs +[r9]
       cmp      r8d, dword ptr [r9+08H]
       jae      G_M57913_IG65
       mov      edx, r8d
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [r9+8*rdx+10H]
       ; gcrRegs +[rdx]
       mov      qword ptr [rsp+30H], rax
						;; size=47 bbWeight=0.05 PerfScore 0.78
G_M57913_IG20:        ; gcrefRegs=000030EC {rdx rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[r9]
       lea      rcx, bword ptr [r12+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       mov      rax, qword ptr [rsp+30H]
       jmp      SHORT G_M57913_IG17
						;; size=17 bbWeight=0.05 PerfScore 0.24
G_M57913_IG21:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx rbp rsi rdi r12-r13]
       xor      eax, eax
						;; size=2 bbWeight=0.22 PerfScore 0.05
G_M57913_IG22:        ; , epilog, nogc, extend
       add      rsp, 72
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=0.22 PerfScore 1.14
G_M57913_IG23:        ; gcVars=0000000000000000 {}, gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs +[rbx rbp rsi rdi r12-r13]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+40H]
       call     [rax+10H]Object:Equals(Object):bool:this
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M57913_IG53
						;; size=25 bbWeight=0.81 PerfScore 7.13
G_M57913_IG24:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx r12] +[rax]
       ; gcr arg pop 0
       mov      r12, rax
       ; gcrRegs +[r12]
       jmp      G_M57913_IG56
						;; size=22 bbWeight=0    PerfScore 0.00
G_M57913_IG25:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      eax, dword ptr [r13+2CH]
       cmp      eax, -1
       je       G_M57913_IG55
       mov      rdx, gword ptr [r13+30H]
       ; gcrRegs +[rdx]
       mov      r8, gword ptr [rdx+08H]
       ; gcrRegs +[r8]
       cmp      eax, dword ptr [r8+08H]
       jae      G_M57913_IG65
       mov      edx, eax
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [r8+8*rdx+10H]
       ; gcrRegs +[rdx]
						;; size=38 bbWeight=0.05 PerfScore 0.72
G_M57913_IG26:        ; gcrefRegs=000030EC {rdx rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r8]
       lea      rcx, bword ptr [r13+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
						;; size=9 bbWeight=0.05 PerfScore 0.08
G_M57913_IG27:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       mov      rdx, gword ptr [r13+08H]
       ; gcrRegs +[rdx]
						;; size=4 bbWeight=0.81 PerfScore 1.63
G_M57913_IG28:        ; gcrefRegs=000010EC {rdx rbx rbp rsi rdi r12}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      r8, rsi
       ; gcrRegs +[r8]
       mov      r9, rdi
       ; gcrRegs +[r9]
       mov      rax, 0xD1FFAB1E      ; code for RuntimeBinderExtensions:IsGenericallyEquivalentTo
       call     [rax]RuntimeBinderExtensions:IsGenericallyEquivalentTo(Type,Type,MemberInfo,MemberInfo):bool
       ; gcrRegs -[rcx rdx r8-r9 r12]
       ; gcr arg pop 0
						;; size=21 bbWeight=0.81 PerfScore 3.26
G_M57913_IG29:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref, isz
       test     eax, eax
       je       SHORT G_M57913_IG31
       inc      r15d
       cmp      r14d, r15d
       jle      G_M57913_IG63
       jmp      G_M57913_IG16
						;; size=21 bbWeight=0.81 PerfScore 3.87
G_M57913_IG30:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       jmp      G_M57913_IG14
						;; size=5 bbWeight=0.33 PerfScore 0.66
G_M57913_IG31:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rbx rbp rsi rdi]
       xor      eax, eax
						;; size=2 bbWeight=0.78 PerfScore 0.20
G_M57913_IG32:        ; , epilog, nogc, extend
       add      rsp, 72
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=0.78 PerfScore 4.11
G_M57913_IG33:        ; gcVars=0000000000000000 {}, gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs +[rbx rsi rdi]
       jmp      G_M57913_IG08
						;; size=5 bbWeight=0.33 PerfScore 0.66
G_M57913_IG34:        ; gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}, byref
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       jmp      G_M57913_IG11
						;; size=23 bbWeight=0.11 PerfScore 0.64
G_M57913_IG35:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rbx r8]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       jmp      G_M57913_IG05
						;; size=23 bbWeight=0.11 PerfScore 0.64
G_M57913_IG36:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax r8] +[rbx rbp]
       cmp      r15d, r14d
       jae      G_M57913_IG65
       mov      ecx, r15d
       mov      r12, gword ptr [rbx+8*rcx+10H]
       ; gcrRegs +[r12]
       cmp      r15d, dword ptr [rbp+08H]
       jae      G_M57913_IG65
       mov      r13, gword ptr [rbp+8*rcx+10H]
       ; gcrRegs +[r13]
       test     r12, r12
       je       G_M57913_IG60
       test     r13, r13
       je       G_M57913_IG60
       mov      rax, 0xD1FFAB1E      ; RuntimeParameterInfo
       mov      qword ptr [rsp+30H], rax
       cmp      qword ptr [r12], rax
       jne      SHORT G_M57913_IG39
       cmp      r12, r13
       je       SHORT G_M57913_IG41
       cmp      gword ptr [r12+08H], 0
       je       SHORT G_M57913_IG42
						;; size=84 bbWeight=0.01 PerfScore 0.19
G_M57913_IG37:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       mov      r12, gword ptr [r12+08H]
       mov      rax, qword ptr [rsp+30H]
       cmp      qword ptr [r13], rax
       jne      G_M57913_IG51
       cmp      gword ptr [r13+08H], 0
       jne      G_M57913_IG46
						;; size=31 bbWeight=0.01 PerfScore 0.09
G_M57913_IG38:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       jmp      G_M57913_IG49
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M57913_IG39:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref, isz
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+40H]
       call     [rax+10H]Object:Equals(Object):bool:this
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M57913_IG41
						;; size=21 bbWeight=0.01 PerfScore 0.07
G_M57913_IG40:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx r12] +[rax]
       ; gcr arg pop 0
       mov      r12, rax
       ; gcrRegs +[r12]
       jmp      G_M57913_IG51
						;; size=22 bbWeight=0    PerfScore 0.00
G_M57913_IG41:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax r12-r13]
       mov      eax, 1
       jmp      SHORT G_M57913_IG48
						;; size=7 bbWeight=0    PerfScore 0.00
G_M57913_IG42:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[r12-r13]
       mov      r8d, dword ptr [r12+2CH]
       cmp      r8d, -1
       je       G_M57913_IG62
       mov      rdx, gword ptr [r12+30H]
       ; gcrRegs +[rdx]
       mov      r9, gword ptr [rdx+08H]
       ; gcrRegs +[r9]
       cmp      r8d, dword ptr [r9+08H]
       jae      G_M57913_IG65
       mov      edx, r8d
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [r9+8*rdx+10H]
       ; gcrRegs +[rdx]
						;; size=42 bbWeight=0.00 PerfScore 0.01
G_M57913_IG43:        ; gcrefRegs=000030EC {rdx rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r9]
       lea      rcx, bword ptr [r12+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       jmp      G_M57913_IG37
						;; size=15 bbWeight=0.00 PerfScore 0.00
G_M57913_IG44:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       mov      rdx, gword ptr [r13+30H]
       ; gcrRegs +[rdx]
       mov      r8, gword ptr [rdx+08H]
       ; gcrRegs +[r8]
       cmp      eax, dword ptr [r8+08H]
       jae      G_M57913_IG65
       mov      edx, eax
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [r8+8*rdx+10H]
       ; gcrRegs +[rdx]
						;; size=25 bbWeight=0.00 PerfScore 0.01
G_M57913_IG45:        ; gcrefRegs=000030EC {rdx rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r8]
       lea      rcx, bword ptr [r13+08H]
       ; byrRegs +[rcx]
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
						;; size=9 bbWeight=0.00 PerfScore 0.00
G_M57913_IG46:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       mov      rdx, gword ptr [r13+08H]
       ; gcrRegs +[rdx]
						;; size=4 bbWeight=0.01 PerfScore 0.02
G_M57913_IG47:        ; gcrefRegs=000010EC {rdx rbx rbp rsi rdi r12}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r13]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      r8, rsi
       ; gcrRegs +[r8]
       mov      r9, rdi
       ; gcrRegs +[r9]
       mov      rax, 0xD1FFAB1E      ; code for RuntimeBinderExtensions:IsGenericallyEquivalentTo
       call     [rax]RuntimeBinderExtensions:IsGenericallyEquivalentTo(Type,Type,MemberInfo,MemberInfo):bool
       ; gcrRegs -[rcx rdx r8-r9 r12]
       ; gcr arg pop 0
						;; size=21 bbWeight=0.01 PerfScore 0.03
G_M57913_IG48:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       test     eax, eax
       je       G_M57913_IG31
       inc      r15d
       cmp      r14d, r15d
       jle      G_M57913_IG63
       jmp      G_M57913_IG36
						;; size=25 bbWeight=0.01 PerfScore 0.04
G_M57913_IG49:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[r12-r13]
       mov      eax, dword ptr [r13+2CH]
       cmp      eax, -1
       jne      SHORT G_M57913_IG44
						;; size=9 bbWeight=0.00 PerfScore 0.00
G_M57913_IG50:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref, isz
       mov      rcx, gword ptr [r13+30H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rcx+18H]
       ; gcrRegs +[rdx]
       jmp      SHORT G_M57913_IG45
						;; size=10 bbWeight=0    PerfScore 0.00
G_M57913_IG51:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx rdx]
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx r13] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       jmp      SHORT G_M57913_IG47
						;; size=19 bbWeight=0    PerfScore 0.00
G_M57913_IG52:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rax rdx] +[r13]
       test     r12, r12
       jne      SHORT G_M57913_IG59
       xor      eax, eax
       test     r13, r13
       sete     al
       jmp      G_M57913_IG29
						;; size=18 bbWeight=0    PerfScore 0.00
G_M57913_IG53:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r12-r13]
       mov      eax, 1
       jmp      G_M57913_IG29
						;; size=10 bbWeight=0    PerfScore 0.00
G_M57913_IG54:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[r12-r13]
       mov      rcx, gword ptr [r12+30H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rcx+18H]
       ; gcrRegs +[rdx]
       mov      qword ptr [rsp+30H], rax
       jmp      G_M57913_IG20
						;; size=19 bbWeight=0    PerfScore 0.00
G_M57913_IG55:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx]
       mov      rcx, gword ptr [r13+30H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rcx+18H]
       ; gcrRegs +[rdx]
       jmp      G_M57913_IG26
						;; size=13 bbWeight=0    PerfScore 0.00
G_M57913_IG56:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx]
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx r13] +[rax]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       jmp      G_M57913_IG28
						;; size=22 bbWeight=0    PerfScore 0.00
G_M57913_IG57:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax rdx rbx rbp r12]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+50H]
       call     [rax+20H]hackishModuleName:hackishMethodName():ref:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
						;; size=16 bbWeight=0    PerfScore 0.00
G_M57913_IG58:        ; gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+50H]
       call     [rax+20H]hackishModuleName:hackishMethodName():ref:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       jmp      G_M57913_IG14
						;; size=21 bbWeight=0    PerfScore 0.00
G_M57913_IG59:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rax]
       xor      eax, eax
       jmp      G_M57913_IG29
						;; size=7 bbWeight=0    PerfScore 0.00
G_M57913_IG60:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs +[r12-r13]
       test     r12, r12
       jne      SHORT G_M57913_IG61
       xor      eax, eax
       test     r13, r13
       sete     al
       jmp      G_M57913_IG48
						;; size=18 bbWeight=0    PerfScore 0.00
G_M57913_IG61:        ; gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[r12-r13]
       xor      eax, eax
       jmp      G_M57913_IG48
						;; size=7 bbWeight=0    PerfScore 0.00
G_M57913_IG62:        ; gcrefRegs=000030E8 {rbx rbp rsi rdi r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[r12-r13]
       mov      rcx, gword ptr [r12+30H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rcx+18H]
       ; gcrRegs +[rdx]
       jmp      G_M57913_IG43
						;; size=14 bbWeight=0    PerfScore 0.00
G_M57913_IG63:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rdx rbx rbp rsi rdi r12-r13]
       mov      eax, 1
						;; size=5 bbWeight=0    PerfScore 0.00
G_M57913_IG64:        ; , epilog, nogc, extend
       add      rsp, 72
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=0    PerfScore 0.00
G_M57913_IG65:        ; gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
       int3     
						;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 1318, prolog size 34, PerfScore 251.65, instruction count 340, allocated bytes for code 1318 (MethodHash=ecb71dc6) for method RuntimeBinderExtensions:AreParametersEquivalent(MethodBase,MethodBase):bool
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x10
  CountOfUnwindCodes: 9
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x10 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 8 * 8 + 8 = 72 = 0x48
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x08 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
