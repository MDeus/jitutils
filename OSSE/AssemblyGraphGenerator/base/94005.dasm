; Assembly listing for method OneOf`1:Parse(ParseContext,byref):bool:this
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; optimized using profile data
; rsp based frame
; fully interruptible
; with Dynamic PGO: edge weights are invalid, and fgCalledCount is 95
; 15 inlinees with PGO data; 22 single block inlinees; 1 inlinees without PGO data
; Final local variable assignments
;
;  V00 this         [V00,T16] (  9,  4   )     ref  ->  rdi         this class-hnd single-def
;  V01 arg1         [V01,T02] ( 45, 16.58)     ref  ->  rsi         class-hnd single-def
;  V02 arg2         [V02,T30] ( 12,  2.48)   byref  ->  rbx         single-def
;  V03 loc0         [V03,T50] (  4,  1   )     ref  ->  rbp         class-hnd single-def
;  V04 loc1         [V04    ] (  3,  0   )  struct (16) [rsp+A8H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op
;  V05 loc2         [V05    ] (  3,  0   )     ref  ->  [rsp+A0H]   do-not-enreg[X] must-init addr-exposed ld-addr-op class-hnd
;  V06 loc3         [V06,T76] (  2,  0   )     int  ->  rbp         single-def
;  V07 loc4         [V07,T56] (  7,  0   )     int  ->  rdi        
;  V08 loc5         [V08    ] (  3,  0   )     ref  ->  [rsp+98H]   do-not-enreg[X] must-init addr-exposed ld-addr-op class-hnd
;  V09 loc6         [V09,T77] (  2,  0   )     int  ->  r13         single-def
;  V10 loc7         [V10,T57] (  7,  0   )     int  ->  r14        
;  V11 loc8         [V11,T29] (  6,  4.96)     ref  ->  r14         class-hnd single-def
;  V12 loc9         [V12,T17] (  5,  5.85)     int  ->  r15         single-def
;  V13 loc10        [V13,T11] ( 10, 11.51)     int  ->  r12        
;  V14 OutArgs      [V14    ] (  1,  1   )  lclBlk (32) [rsp+00H]   "OutgoingArgSpace"
;* V15 tmp1         [V15    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;* V16 tmp2         [V16    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "impAppendStmt"
;  V17 tmp3         [V17,T35] (  6,  2.42)     int  ->  rax         "guarded devirt return temp"
;  V18 tmp4         [V18,T07] ( 10, 12.59)     ref  ->  r13         "guarded devirt this temp"
;  V19 tmp5         [V19,T36] (  9,  2.92)     ref  ->  r13         class-hnd exact "guarded devirt this exact temp"
;  V20 tmp6         [V20,T34] (  2,  4   )     ref  ->  rax         class-hnd single-def "dup spill"
;  V21 tmp7         [V21,T48] (  4,  2   )     ref  ->  rax         single-def
;  V22 tmp8         [V22,T74] (  2,  0   )     ref  ->  rcx         class-hnd single-def "Inlining Arg"
;  V23 tmp9         [V23,T67] (  3,  0   )     ref  ->  rcx         class-hnd "Inlining Arg"
;  V24 tmp10        [V24,T68] (  3,  0   )     ref  ->  rcx         class-hnd single-def "Inlining Arg"
;  V25 tmp11        [V25,T75] (  2,  0   )     ref  ->  rax         class-hnd single-def "Inlining Arg"
;  V26 tmp12        [V26,T69] (  3,  0   )     ref  ->  rcx         class-hnd "Inlining Arg"
;  V27 tmp13        [V27    ] ( 18,  5.81)  struct (24) [rsp+80H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "Inline ldloca(s) first use temp"
;  V28 tmp14        [V28    ] ( 12,  5.81)  struct (16) [rsp+70H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "Inline stloc first use temp"
;  V29 tmp15        [V29    ] (  8,  1.45)  struct (24) [rsp+58H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "Inline ldloca(s) first use temp"
;  V30 tmp16        [V30,T31] (  4,  2.91)     int  ->  rax         "guarded devirt return temp"
;  V31 tmp17        [V31,T05] ( 10, 14.53)     ref  ->  rdi         "guarded devirt this temp"
;  V32 tmp18        [V32,T37] (  7,  2.92)     ref  ->  rdi         class-hnd exact "guarded devirt this exact temp"
;  V33 tmp19        [V33,T18] (  4,  5.81)     ref  ->  rbp         class-hnd "dup spill"
;  V34 tmp20        [V34,T38] (  8,  2.91)     ref  ->  rbp        
;  V35 tmp21        [V35,T08] (  8, 11.62)     ref  ->  rdi         class-hnd "Inlining Arg"
;* V36 tmp22        [V36    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;  V37 tmp23        [V37,T20] (  4,  5.81)     int  ->  rax         "Inlining Arg"
;  V38 tmp24        [V38,T21] (  4,  5.81)     int  ->   r9         "Inlining Arg"
;  V39 tmp25        [V39,T22] (  4,  5.81)     int  ->  r10         "Inlining Arg"
;  V40 tmp26        [V40    ] ( 12,  6.32)  struct (16) [rsp+48H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "Inline stloc first use temp"
;  V41 tmp27        [V41,T40] (  6,  2.91)     int  ->  rax         "guarded devirt return temp"
;  V42 tmp28        [V42,T14] ( 10, 10.17)     ref  ->  rcx         "guarded devirt this temp"
;* V43 tmp29        [V43    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V44 tmp30        [V44,T19] (  4,  5.81)     ref  ->  r11         class-hnd "dup spill"
;  V45 tmp31        [V45,T39] (  8,  2.91)     ref  ->  r11        
;  V46 tmp32        [V46,T09] (  8, 11.62)     ref  ->  rdx         class-hnd "Inlining Arg"
;* V47 tmp33        [V47    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;  V48 tmp34        [V48,T23] (  4,  5.81)     int  ->  rcx         "Inlining Arg"
;  V49 tmp35        [V49,T24] (  4,  5.81)     int  ->   r8         "Inlining Arg"
;  V50 tmp36        [V50,T25] (  4,  5.81)     int  ->  rax         "Inlining Arg"
;  V51 tmp37        [V51    ] (  6,  1.45)  struct (24) [rsp+30H]   do-not-enreg[XS] must-init addr-exposed ld-addr-op "Inline ldloca(s) first use temp"
;* V52 tmp38        [V52    ] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;  V53 tmp39        [V53,T53] ( 14,  0   )     int  ->  [rsp+2CH]   "Inline stloc first use temp"
;  V54 tmp40        [V54,T54] ( 10,  0   )     ref  ->  rbp         class-hnd "Inlining Arg"
;* V55 tmp41        [V55    ] (  0,  0   )     int  ->  zero-ref    "impAppendStmt"
;  V56 tmp42        [V56,T62] (  4,  0   )     int  ->  [rsp+28H]   "Inline stloc first use temp"
;* V57 tmp43        [V57    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V58 tmp44        [V58    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V59 tmp45        [V59    ] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;  V60 tmp46        [V60,T10] ( 14, 11.61)     int  ->  [rsp+24H]   "Inline stloc first use temp"
;  V61 tmp47        [V61,T03] ( 10, 16.25)     ref  ->  rbp         class-hnd "Inlining Arg"
;* V62 tmp48        [V62    ] (  0,  0   )     int  ->  zero-ref    "impAppendStmt"
;  V63 tmp49        [V63,T33] (  4,  4.05)     int  ->  [rsp+20H]   "Inline stloc first use temp"
;* V64 tmp50        [V64    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;* V65 tmp51        [V65    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V66 tmp52        [V66,T15] ( 22,  9.22)  ushort  ->  rcx         "Inline return value spill temp"
;  V67 tmp53        [V67,T01] (  8, 20.81)     ref  ->  rcx         class-hnd "Inlining Arg"
;  V68 tmp54        [V68,T06] ( 10, 13.00)     int  ->  registers   "Inline stloc first use temp"
;  V69 tmp55        [V69,T47] (  4,  0   )    bool  ->  rax         "Inline return value spill temp"
;  V70 tmp56        [V70,T00] ( 48, 47.85)     ref  ->  registers   class-hnd "Inlining Arg"
;  V71 tmp57        [V71,T27] ( 10,  5.25)     int  ->   r9         "Inline stloc first use temp"
;  V72 tmp58        [V72,T26] (  6,  5.26)  ushort  ->  registers   "Inline stloc first use temp"
;  V73 tmp59        [V73,T49] (  6,  1.97)     ref  ->  rcx         class-hnd "Inlining Arg"
;  V74 tmp60        [V74,T63] (  4,  0   )     int  ->  rbp         "Inlining Arg"
;  V75 tmp61        [V75,T64] (  4,  0   )     int  ->  rax         "Inlining Arg"
;* V76 tmp62        [V76    ] (  0,  0   )  struct (16) zero-ref    "Inlining Arg"
;  V77 tmp63        [V77,T58] (  6,  0   )     ref  ->  rcx         class-hnd "Inlining Arg"
;  V78 tmp64        [V78    ] (  3,  0   )     int  ->  [rsp+A8H]   do-not-enreg[X] addr-exposed V04.Offset(offs=0x00) P-DEP "field V04.Offset (fldOffset=0x0)"
;  V79 tmp65        [V79    ] (  2,  0   )     int  ->  [rsp+ACH]   do-not-enreg[X] addr-exposed V04.Line(offs=0x04) P-DEP "field V04.Line (fldOffset=0x4)"
;  V80 tmp66        [V80    ] (  2,  0   )     int  ->  [rsp+B0H]   do-not-enreg[X] addr-exposed V04.Column(offs=0x08) P-DEP "field V04.Column (fldOffset=0x8)"
;  V81 tmp67        [V81    ] (  8,  2.91)     int  ->  [rsp+70H]   do-not-enreg[X] addr-exposed V28.Offset(offs=0x00) P-DEP "field V28.Offset (fldOffset=0x0)"
;  V82 tmp68        [V82    ] (  6,  2.91)     int  ->  [rsp+74H]   do-not-enreg[X] addr-exposed V28.Line(offs=0x04) P-DEP "field V28.Line (fldOffset=0x4)"
;  V83 tmp69        [V83    ] (  6,  2.91)     int  ->  [rsp+78H]   do-not-enreg[X] addr-exposed V28.Column(offs=0x08) P-DEP "field V28.Column (fldOffset=0x8)"
;  V84 tmp70        [V84,T41] (  4,  2.91)     int  ->  rax         V36.Offset(offs=0x00) P-INDEP "field V36.Offset (fldOffset=0x0)"
;  V85 tmp71        [V85,T42] (  4,  2.91)     int  ->   r9         V36.Line(offs=0x04) P-INDEP "field V36.Line (fldOffset=0x4)"
;  V86 tmp72        [V86,T43] (  4,  2.91)     int  ->  r10         V36.Column(offs=0x08) P-INDEP "field V36.Column (fldOffset=0x8)"
;  V87 tmp73        [V87    ] (  8,  3.42)     int  ->  [rsp+48H]   do-not-enreg[X] addr-exposed V40.Offset(offs=0x00) P-DEP "field V40.Offset (fldOffset=0x0)"
;  V88 tmp74        [V88    ] (  6,  2.94)     int  ->  [rsp+4CH]   do-not-enreg[X] addr-exposed V40.Line(offs=0x04) P-DEP "field V40.Line (fldOffset=0x4)"
;  V89 tmp75        [V89    ] (  6,  2.94)     int  ->  [rsp+50H]   do-not-enreg[X] addr-exposed V40.Column(offs=0x08) P-DEP "field V40.Column (fldOffset=0x8)"
;  V90 tmp76        [V90,T44] (  4,  2.91)     int  ->  rcx         V47.Offset(offs=0x00) P-INDEP "field V47.Offset (fldOffset=0x0)"
;  V91 tmp77        [V91,T45] (  4,  2.91)     int  ->   r8         V47.Line(offs=0x04) P-INDEP "field V47.Line (fldOffset=0x4)"
;  V92 tmp78        [V92,T46] (  4,  2.91)     int  ->  rax         V47.Column(offs=0x08) P-INDEP "field V47.Column (fldOffset=0x8)"
;  V93 tmp79        [V93,T61] (  4,  0   )     ref  ->  rdx         V76.Buffer(offs=0x00) P-INDEP "field V76.Buffer (fldOffset=0x0)"
;  V94 tmp80        [V94,T65] (  4,  0   )     int  ->  rdi         V76.Length(offs=0x08) P-INDEP "field V76.Length (fldOffset=0x8)"
;  V95 tmp81        [V95,T66] (  4,  0   )     int  ->  r13         V76.Offset(offs=0x0c) P-INDEP "field V76.Offset (fldOffset=0xc)"
;  V96 tmp82        [V96,T70] (  3,  0   )     ref  ->  rcx         "arr expr"
;  V97 tmp83        [V97,T71] (  3,  0   )     ref  ->  rcx         "argument with side effect"
;  V98 tmp84        [V98,T72] (  3,  0   )     ref  ->  rcx         "arr expr"
;  V99 tmp85        [V99,T73] (  3,  0   )     ref  ->  rcx         "argument with side effect"
;  V100 tmp86       [V100,T04] (  6, 15.60)     ref  ->  registers   "arr expr"
;  V101 tmp87       [V101,T12] (  6, 10.53)     ref  ->  r10         "arr expr"
;  V102 tmp88       [V102,T13] (  6, 10.53)     int  ->  registers   "index expr"
;  V103 tmp89       [V103,T59] (  6,  0   )     ref  ->  rcx         "argument with side effect"
;  V104 tmp90       [V104,T60] (  6,  0   )     ref  ->  rcx         "argument with side effect"
;  V105 tmp91       [V105,T55] (  8,  0   )   byref  ->  rbp         "BlockOp address local"
;  V106 cse0        [V106,T28] (  3,  5.21)     int  ->   r8         "CSE - moderate"
;  V107 cse1        [V107,T51] (  3,  0.05)     int  ->  rcx         "CSE - conservative"
;  V108 cse2        [V108,T32] (  4,  4.31)     ref  ->  rbp         "CSE - conservative"
;  V109 cse3        [V109,T52] (  4,  0.04)     ref  ->  rbp         "CSE - conservative"
;
; Lcl frame size = 184

G_M51820_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 184
       vzeroupper 
       vxorps   xmm4, xmm4
       vmovdqa  xmmword ptr [rsp+30H], xmm4
       vmovdqa  xmmword ptr [rsp+40H], xmm4
       mov      rax, -96
       vmovdqa  xmmword ptr [rsp+rax+B0H], xmm4
       vmovdqa  xmmword ptr [rsp+rax+C0H], xmm4
       vmovdqa  xmmword ptr [rsp+rax+D0H], xmm4
       add      rax, 48
       jne      SHORT  -5 instr
       mov      qword ptr [rsp+B0H], rax
       mov      rdi, rcx
       ; gcrRegs +[rdi]
       mov      rsi, rdx
       ; gcrRegs +[rsi]
       mov      rbx, r8
       ; byrRegs +[rbx]
						;; size=98 bbWeight=1    PerfScore 22.83
G_M51820_IG02:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000008 {rbx}, byref
       mov      rax, gword ptr [rsi+10H]
       ; gcrRegs +[rax]
       test     rax, rax
       jne      G_M51820_IG75
       mov      r8, gword ptr [rsi+08H]
       ; gcrRegs +[r8]
       mov      rbp, gword ptr [r8+10H]
       ; gcrRegs +[rbp]
       cmp      gword ptr [rdi+20H], 0
       jne      G_M51820_IG76
						;; size=32 bbWeight=1    PerfScore 11.25
G_M51820_IG03:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax rbp r8]
       mov      r14, gword ptr [rdi+18H]
       ; gcrRegs +[r14]
       mov      r15d, dword ptr [r14+08H]
       xor      r12d, r12d
       test     r15d, r15d
       jle      G_M51820_IG28
       test     r15d, r15d
       jl       G_M51820_IG40
       mov      r8d, dword ptr [r14+08H]
						;; size=33 bbWeight=1    PerfScore 8.75
G_M51820_IG04:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rdi]
       mov      r8d, r12d
       mov      rcx, gword ptr [r14+8*r8+10H]
       ; gcrRegs +[rcx]
       mov      r13, rcx
       ; gcrRegs +[r13]
       mov      r8, 0xD1FFAB1E      ; SequenceAndSkip`2
       cmp      qword ptr [r13], r8
       jne      G_M51820_IG25
						;; size=31 bbWeight=1.92 PerfScore 12.94
G_M51820_IG05:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rcx]
       xor      r8d, r8d
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+80H], xmm0
       mov      qword ptr [rsp+90H], r8
       mov      qword ptr [rsp+70H], r8
       mov      qword ptr [rsp+74H], r8
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+58H], xmm0
       mov      qword ptr [rsp+68H], r8
       mov      rbp, gword ptr [rsi+10H]
       ; gcrRegs +[rbp]
       test     rbp, rbp
       jne      G_M51820_IG89
						;; size=62 bbWeight=1.44 PerfScore 14.62
G_M51820_IG06:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rbp]
       xor      r8d, r8d
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+80H], xmm0
       mov      qword ptr [rsp+90H], r8
       mov      r8, gword ptr [rsi+08H]
       ; gcrRegs +[r8]
       mov      rdi, gword ptr [r8+10H]
       ; gcrRegs +[rdi]
       mov      eax, dword ptr [rdi+14H]
       mov      r9d, dword ptr [rdi+18H]
       mov      r10d, dword ptr [rdi+1CH]
       mov      dword ptr [rsp+70H], eax
       mov      dword ptr [rsp+74H], r9d
       mov      dword ptr [rsp+78H], r10d
       mov      rcx, gword ptr [r13+18H]
       ; gcrRegs +[rcx]
       mov      rdi, rcx
       mov      r8, 0xD1FFAB1E      ; SkipWhiteSpace`1
       ; gcrRegs -[r8]
       cmp      qword ptr [rdi], r8
       jne      G_M51820_IG38
       xor      r8d, r8d
       mov      qword ptr [rsp+48H], r8
       mov      qword ptr [rsp+4CH], r8
       mov      r11, gword ptr [rsi+10H]
       ; gcrRegs +[r11]
       test     r11, r11
       jne      G_M51820_IG90
						;; size=109 bbWeight=1.44 PerfScore 39.67
G_M51820_IG07:        ; gcrefRegs=000060C0 {rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rcx r11]
       mov      rbp, gword ptr [rsi+08H]
       ; gcrRegs +[rbp]
       mov      rdx, gword ptr [rbp+10H]
       ; gcrRegs +[rdx]
       mov      ecx, dword ptr [rdx+14H]
       mov      r8d, dword ptr [rdx+18H]
       mov      eax, dword ptr [rdx+1CH]
       mov      dword ptr [rsp+48H], ecx
       mov      dword ptr [rsp+4CH], r8d
       mov      dword ptr [rsp+50H], eax
       xor      r8d, r8d
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+30H], xmm0
       mov      qword ptr [rsp+40H], r8
       cmp      gword ptr [rsi+18H], 0
       jne      G_M51820_IG99
       cmp      byte  ptr [rsi+24H], 0
       jne      G_M51820_IG91
       xor      r8d, r8d
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      ecx, dword ptr [rcx+08H]
       ; gcrRegs -[rcx]
       mov      rdx, gword ptr [rbp+10H]
       sub      ecx, dword ptr [rdx+14H]
       mov      edx, ecx
       ; gcrRegs -[rdx]
						;; size=93 bbWeight=1.44 PerfScore 50.45
G_M51820_IG08:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      r8d, edx
       jge      SHORT G_M51820_IG16
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      eax, r8d
       add      eax, dword ptr [rcx+14H]
       cmp      eax, dword ptr [rcx+10H]
       jge      G_M51820_IG95
       test     eax, eax
       jl       G_M51820_IG95
       mov      r9, gword ptr [rcx+08H]
       ; gcrRegs +[r9]
       cmp      eax, dword ptr [r9+08H]
       jae      G_M51820_IG114
       mov      ecx, eax
       ; gcrRegs -[rcx]
       movzx    rcx, word  ptr [r9+2*rcx+0CH]
						;; size=54 bbWeight=2.57 PerfScore 51.49
G_M51820_IG09:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[r9]
       cmp      ecx, 32
       jg       SHORT G_M51820_IG15
						;; size=5 bbWeight=2.57 PerfScore 3.22
G_M51820_IG10:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      ecx, 32
       jne      SHORT G_M51820_IG13
						;; size=5 bbWeight=1.17 PerfScore 1.47
G_M51820_IG11:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       inc      r8d
       jmp      SHORT G_M51820_IG08
						;; size=5 bbWeight=1.17 PerfScore 2.64
G_M51820_IG12:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rbp] +[rax]
       cmp      r8d, 13
       je       G_M51820_IG24
       jmp      G_M51820_IG23
						;; size=15 bbWeight=1.74 PerfScore 5.64
G_M51820_IG13:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rax] +[rbp]
       cmp      ecx, 10
       je       SHORT G_M51820_IG11
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M51820_IG14:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      ecx, 13
       jne      G_M51820_IG96
       jmp      SHORT G_M51820_IG11
						;; size=11 bbWeight=0.00 PerfScore 0.00
G_M51820_IG15:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      ecx, 160
       je       SHORT G_M51820_IG11
       cmp      ecx, 0x1680
       mov      dword ptr [rsp+20H], edx
       jge      G_M51820_IG97
						;; size=24 bbWeight=1.40 PerfScore 4.91
G_M51820_IG16:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       test     r8d, r8d
       jle      G_M51820_IG32
						;; size=9 bbWeight=1.40 PerfScore 1.75
G_M51820_IG17:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       mov      rax, gword ptr [rbp+10H]
       ; gcrRegs +[rax]
       cmp      byte  ptr [rax+22H], 0
       jne      G_M51820_IG32
       mov      r9d, r8d
       add      r9d, dword ptr [rax+14H]
       mov      r8d, dword ptr [rax+10H]
       dec      r8d
       cmp      r9d, r8d
       jg       G_M51820_IG98
						;; size=37 bbWeight=1.15 PerfScore 14.72
G_M51820_IG18:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rbp]
       cmp      dword ptr [rax+14H], r9d
       jl       SHORT G_M51820_IG21
						;; size=6 bbWeight=2.89 PerfScore 11.57
G_M51820_IG19:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       cmp      byte  ptr [rax+22H], 0
       je       G_M51820_IG32
						;; size=10 bbWeight=1.16 PerfScore 4.62
G_M51820_IG20:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       mov      word  ptr [rax+20H], 0
       mov      r8d, dword ptr [rax+10H]
       mov      dword ptr [rax+14H], r8d
       inc      dword ptr [rax+1CH]
       jmp      G_M51820_IG32
						;; size=22 bbWeight=0.57 PerfScore 5.14
G_M51820_IG21:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       mov      r8d, dword ptr [rax+14H]
       inc      r8d
       mov      dword ptr [rax+14H], r8d
       mov      r10, gword ptr [rax+08H]
       ; gcrRegs +[r10]
       cmp      r8d, dword ptr [r10+08H]
       jae      G_M51820_IG114
       mov      r8d, r8d
       movzx    r8, word  ptr [r10+2*r8+0CH]
       cmp      word  ptr [rax+20H], 10
       jne      G_M51820_IG12
						;; size=45 bbWeight=1.74 PerfScore 26.92
G_M51820_IG22:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[r10]
       inc      dword ptr [rax+18H]
       mov      dword ptr [rax+1CH], 1
       jmp      SHORT G_M51820_IG24
						;; size=12 bbWeight=0.00 PerfScore 0.00
G_M51820_IG23:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       inc      dword ptr [rax+1CH]
						;; size=3 bbWeight=1.74 PerfScore 5.21
G_M51820_IG24:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       mov      word  ptr [rax+20H], r8w
       jmp      SHORT G_M51820_IG18
						;; size=7 bbWeight=1.74 PerfScore 5.21
G_M51820_IG25:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax rdi]
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      r8, rbx
       ; byrRegs +[r8]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r13]
       ; byrRegs -[r8]
       ; gcr arg pop 0
						;; size=20 bbWeight=0.48 PerfScore 3.72
G_M51820_IG26:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref, isz
       test     eax, eax
       jne      SHORT G_M51820_IG30
						;; size=4 bbWeight=1.92 PerfScore 2.40
G_M51820_IG27:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       inc      r12d
       cmp      r12d, r15d
       jl       G_M51820_IG04
						;; size=12 bbWeight=2.82 PerfScore 4.24
G_M51820_IG28:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi r14]
       ; byrRegs -[rbx]
       xor      eax, eax
						;; size=2 bbWeight=1    PerfScore 0.25
G_M51820_IG29:        ; , epilog, nogc, extend
       add      rsp, 184
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=20 bbWeight=1    PerfScore 5.25
G_M51820_IG30:        ; gcVars=00000000000000000000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       mov      eax, 1
						;; size=5 bbWeight=1.45 PerfScore 0.36
G_M51820_IG31:        ; , epilog, nogc, extend
       add      rsp, 184
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=20 bbWeight=1.45 PerfScore 7.63
G_M51820_IG32:        ; gcVars=00000000000000000000000000000000 {}, gcrefRegs=000060C0 {rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; gcrRegs +[rsi rdi r13-r14]
       ; byrRegs +[rbx]
       mov      rcx, gword ptr [rdi+18H]
       ; gcrRegs +[rcx]
       mov      r8, 0xD1FFAB1E      ; IdentifierParser
       cmp      qword ptr [rcx], r8
       jne      SHORT G_M51820_IG34
						;; size=19 bbWeight=1.44 PerfScore 8.99
G_M51820_IG33:        ; gcrefRegs=00006042 {rcx rsi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rdi]
       lea      r8, [rsp+80H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       cmp      dword ptr [rcx], ecx
       call     [IdentifierParser:Parse(ParseContext,byref):bool:this]
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       jmp      SHORT G_M51820_IG35
						;; size=21 bbWeight=0.72 PerfScore 6.29
G_M51820_IG34:        ; gcrefRegs=00006042 {rcx rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rcx]
       lea      r8, [rsp+80H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
						;; size=21 bbWeight=0.72 PerfScore 5.57
G_M51820_IG35:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51820_IG100
						;; size=8 bbWeight=1.44 PerfScore 1.80
G_M51820_IG36:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r13]
       mov      rdx, gword ptr [rsi+08H]
       ; gcrRegs +[rdx]
       mov      rcx, gword ptr [rdx+10H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [rsp+48H]
       ; gcrRegs -[rdx]
       cmp      edx, dword ptr [rcx+14H]
       je       G_M51820_IG27
						;; size=21 bbWeight=0.47 PerfScore 4.22
G_M51820_IG37:        ; gcrefRegs=00004042 {rcx rsi r14}, byrefRegs=00000008 {rbx}, byref
       lea      rdx, bword ptr [rsp+48H]
       ; byrRegs +[rdx]
       call     [Cursor:ResetPositionNotInlined(byref):this]
       ; gcrRegs -[rcx]
       ; byrRegs -[rdx]
       ; gcr arg pop 0
       jmp      G_M51820_IG27
						;; size=16 bbWeight=0.04 PerfScore 0.21
G_M51820_IG38:        ; gcrefRegs=000060C0 {rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rdi r13]
       lea      r8, [rsp+80H]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rdi]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M51820_IG100
       jmp      G_M51820_IG27
						;; size=37 bbWeight=1.44 PerfScore 16.18
G_M51820_IG39:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rdi r8]
       cmp      ecx, 13
       je       G_M51820_IG51
       jmp      G_M51820_IG50
						;; size=14 bbWeight=0.02 PerfScore 0.06
G_M51820_IG40:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rdi r8 r13]
       cmp      r12d, dword ptr [r14+08H]
       jae      G_M51820_IG114
       mov      r8d, r12d
       mov      r13, gword ptr [r14+8*r8+10H]
       ; gcrRegs +[r13]
       mov      r8, 0xD1FFAB1E      ; SequenceAndSkip`2
       cmp      qword ptr [r13], r8
       jne      G_M51820_IG66
						;; size=38 bbWeight=0.02 PerfScore 0.20
G_M51820_IG41:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       cmp      byte  ptr [r13], r13b
       xor      r8d, r8d
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+80H], xmm0
       mov      qword ptr [rsp+90H], r8
       mov      qword ptr [rsp+70H], r8
       mov      qword ptr [rsp+74H], r8
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+58H], xmm0
       mov      qword ptr [rsp+68H], r8
       mov      rbp, gword ptr [rsi+10H]
       ; gcrRegs +[rbp]
       test     rbp, rbp
       jne      G_M51820_IG102
						;; size=66 bbWeight=0.01 PerfScore 0.19
G_M51820_IG42:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rbp]
       xor      r8d, r8d
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+80H], xmm0
       mov      qword ptr [rsp+90H], r8
       mov      r8, gword ptr [rsi+08H]
       ; gcrRegs +[r8]
       mov      rdi, gword ptr [r8+10H]
       ; gcrRegs +[rdi]
       mov      eax, dword ptr [rdi+14H]
       mov      r9d, dword ptr [rdi+18H]
       mov      r10d, dword ptr [rdi+1CH]
       mov      dword ptr [rsp+70H], eax
       mov      dword ptr [rsp+74H], r9d
       mov      dword ptr [rsp+78H], r10d
       mov      rdi, gword ptr [r13+18H]
       mov      r8, 0xD1FFAB1E      ; SkipWhiteSpace`1
       ; gcrRegs -[r8]
       cmp      qword ptr [rdi], r8
       jne      G_M51820_IG71
       cmp      byte  ptr [rdi], dil
       xor      r8d, r8d
       mov      qword ptr [rsp+48H], r8
       mov      qword ptr [rsp+4CH], r8
       mov      r11, gword ptr [rsi+10H]
       ; gcrRegs +[r11]
       test     r11, r11
       jne      G_M51820_IG103
						;; size=109 bbWeight=0.01 PerfScore 0.44
G_M51820_IG43:        ; gcrefRegs=000060C0 {rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r11]
       mov      rbp, gword ptr [rsi+08H]
       ; gcrRegs +[rbp]
       mov      rdx, gword ptr [rbp+10H]
       ; gcrRegs +[rdx]
       mov      ecx, dword ptr [rdx+14H]
       mov      r8d, dword ptr [rdx+18H]
       mov      eax, dword ptr [rdx+1CH]
       mov      dword ptr [rsp+48H], ecx
       mov      dword ptr [rsp+4CH], r8d
       mov      dword ptr [rsp+50H], eax
       xor      r8d, r8d
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+30H], xmm0
       mov      qword ptr [rsp+40H], r8
       cmp      gword ptr [rsi+18H], 0
       jne      G_M51820_IG113
       cmp      byte  ptr [rsi+24H], 0
       jne      G_M51820_IG104
       xor      r8d, r8d
       xor      eax, eax
       mov      r8, gword ptr [rbp+10H]
       ; gcrRegs +[r8]
       mov      r8, gword ptr [r8+08H]
       mov      edx, dword ptr [r8+08H]
       ; gcrRegs -[rdx]
       mov      r8, gword ptr [rbp+10H]
       sub      edx, dword ptr [r8+14H]
       mov      r9d, edx
						;; size=98 bbWeight=0.01 PerfScore 0.51
G_M51820_IG44:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r8]
       cmp      eax, r9d
       jge      G_M51820_IG59
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      r8d, eax
       add      r8d, dword ptr [rcx+14H]
       cmp      r8d, dword ptr [rcx+10H]
       jge      G_M51820_IG109
       test     r8d, r8d
       jl       G_M51820_IG109
       mov      rcx, gword ptr [rcx+08H]
       cmp      r8d, dword ptr [rcx+08H]
       jae      G_M51820_IG114
       mov      r8d, r8d
       movzx    rcx, word  ptr [rcx+2*r8+0CH]
       ; gcrRegs -[rcx]
						;; size=62 bbWeight=0.03 PerfScore 0.52
G_M51820_IG45:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      ecx, 32
       jle      SHORT G_M51820_IG48
						;; size=5 bbWeight=0.03 PerfScore 0.03
G_M51820_IG46:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      ecx, 160
       je       SHORT G_M51820_IG49
       cmp      ecx, 0x1680
       jge      G_M51820_IG108
						;; size=20 bbWeight=0.01 PerfScore 0.04
G_M51820_IG47:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       jmp      SHORT G_M51820_IG59
						;; size=2 bbWeight=0.01 PerfScore 0.03
G_M51820_IG48:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      ecx, 32
       jne      SHORT G_M51820_IG57
						;; size=5 bbWeight=0.01 PerfScore 0.01
G_M51820_IG49:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       inc      eax
       jmp      SHORT G_M51820_IG44
						;; size=4 bbWeight=0.01 PerfScore 0.03
G_M51820_IG50:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rbp] +[r8]
       inc      dword ptr [r8+1CH]
						;; size=4 bbWeight=0.02 PerfScore 0.05
G_M51820_IG51:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       mov      word  ptr [r8+20H], cx
						;; size=5 bbWeight=0.02 PerfScore 0.02
G_M51820_IG52:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      dword ptr [r8+14H], r9d
       jge      SHORT G_M51820_IG55
						;; size=6 bbWeight=0.03 PerfScore 0.12
G_M51820_IG53:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       mov      ecx, dword ptr [r8+14H]
       inc      ecx
       mov      dword ptr [r8+14H], ecx
       mov      r10, gword ptr [r8+08H]
       ; gcrRegs +[r10]
       cmp      ecx, dword ptr [r10+08H]
       jae      G_M51820_IG114
       mov      ecx, ecx
       movzx    rcx, word  ptr [r10+2*rcx+0CH]
       cmp      word  ptr [r8+20H], 10
       jne      G_M51820_IG39
						;; size=44 bbWeight=0.02 PerfScore 0.27
G_M51820_IG54:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r10]
       jmp      G_M51820_IG70
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M51820_IG55:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      byte  ptr [r8+22H], 0
       je       SHORT G_M51820_IG60
						;; size=7 bbWeight=0.01 PerfScore 0.05
G_M51820_IG56:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       jmp      G_M51820_IG72
						;; size=5 bbWeight=0.01 PerfScore 0.01
G_M51820_IG57:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[r8] +[rbp]
       cmp      ecx, 10
       je       SHORT G_M51820_IG49
						;; size=5 bbWeight=0.00 PerfScore 0.00
G_M51820_IG58:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      ecx, 13
       jne      G_M51820_IG110
       jmp      SHORT G_M51820_IG49
						;; size=11 bbWeight=0.00 PerfScore 0.00
G_M51820_IG59:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jg       G_M51820_IG69
						;; size=8 bbWeight=0.01 PerfScore 0.02
G_M51820_IG60:        ; gcrefRegs=000060C0 {rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rbp]
       mov      rcx, gword ptr [rdi+18H]
       ; gcrRegs +[rcx]
       mov      r8, 0xD1FFAB1E      ; IdentifierParser
       cmp      qword ptr [rcx], r8
       je       SHORT G_M51820_IG65
						;; size=19 bbWeight=0.01 PerfScore 0.09
G_M51820_IG61:        ; gcrefRegs=00006042 {rcx rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rdi]
       lea      r8, [rsp+80H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
						;; size=21 bbWeight=0.01 PerfScore 0.06
G_M51820_IG62:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51820_IG73
						;; size=8 bbWeight=0.01 PerfScore 0.02
G_M51820_IG63:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[r13]
       mov      rdx, gword ptr [rsi+08H]
       ; gcrRegs +[rdx]
       mov      rcx, gword ptr [rdx+10H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [rsp+48H]
       ; gcrRegs -[rdx]
       cmp      edx, dword ptr [rcx+14H]
       je       SHORT G_M51820_IG68
						;; size=17 bbWeight=0.00 PerfScore 0.04
G_M51820_IG64:        ; gcrefRegs=00004042 {rcx rsi r14}, byrefRegs=00000008 {rbx}, byref, isz
       lea      rdx, bword ptr [rsp+48H]
       ; byrRegs +[rdx]
       call     [Cursor:ResetPositionNotInlined(byref):this]
       ; gcrRegs -[rcx]
       ; byrRegs -[rdx]
       ; gcr arg pop 0
       jmp      SHORT G_M51820_IG68
						;; size=13 bbWeight=0.00 PerfScore 0.00
G_M51820_IG65:        ; gcrefRegs=00006042 {rcx rsi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[rcx r13]
       lea      r8, [rsp+80H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       cmp      dword ptr [rcx], ecx
       call     [IdentifierParser:Parse(ParseContext,byref):bool:this]
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       jmp      SHORT G_M51820_IG62
						;; size=21 bbWeight=0.01 PerfScore 0.06
G_M51820_IG66:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      r8, rbx
       ; byrRegs +[r8]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r13]
       ; byrRegs -[r8]
       ; gcr arg pop 0
						;; size=20 bbWeight=0.00 PerfScore 0.04
G_M51820_IG67:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51820_IG30
						;; size=8 bbWeight=0.02 PerfScore 0.02
G_M51820_IG68:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       inc      r12d
       cmp      r12d, r15d
       jl       G_M51820_IG40
       jmp      G_M51820_IG28
						;; size=17 bbWeight=0.03 PerfScore 0.10
G_M51820_IG69:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rbp rdi r13]
       mov      r8, gword ptr [rbp+10H]
       ; gcrRegs +[r8]
       cmp      byte  ptr [r8+22H], 0
       jne      G_M51820_IG60
       mov      r9d, eax
       add      r9d, dword ptr [r8+14H]
       mov      ecx, dword ptr [r8+10H]
       dec      ecx
       cmp      r9d, ecx
       jg       G_M51820_IG112
       jmp      G_M51820_IG52
						;; size=42 bbWeight=0.01 PerfScore 0.17
G_M51820_IG70:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rbp]
       inc      dword ptr [r8+18H]
       mov      dword ptr [r8+1CH], 1
       jmp      G_M51820_IG51
						;; size=17 bbWeight=0.00 PerfScore 0.00
G_M51820_IG71:        ; gcrefRegs=000060C0 {rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[r8]
       lea      r8, [rsp+80H]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rdi]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rdi]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M51820_IG73
       jmp      SHORT G_M51820_IG68
						;; size=30 bbWeight=0.01 PerfScore 0.16
G_M51820_IG72:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rdi r8]
       mov      word  ptr [r8+20H], 0
       mov      ecx, dword ptr [r8+10H]
       mov      dword ptr [r8+14H], ecx
       inc      dword ptr [r8+1CH]
       jmp      G_M51820_IG60
						;; size=24 bbWeight=0.01 PerfScore 0.05
G_M51820_IG73:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rdi r8]
       xor      ecx, ecx
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+58H], xmm0
       mov      qword ptr [rsp+68H], rcx
       mov      rcx, gword ptr [r13+20H]
       ; gcrRegs +[rcx]
       lea      r8, [rsp+58H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r13]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M51820_IG74
       mov      ebp, dword ptr [rsp+80H]
       mov      eax, dword ptr [rsp+5CH]
       mov      rdx, gword ptr [rsp+88H]
       ; gcrRegs +[rdx]
       mov      edi, dword ptr [rsp+90H]
       mov      r13d, dword ptr [rsp+94H]
       mov      dword ptr [rbx], ebp
       mov      dword ptr [rbx+04H], eax
       lea      rbp, bword ptr [rbx+08H]
       ; byrRegs +[rbp]
       mov      rcx, rbp
       ; byrRegs +[rcx]
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       mov      dword ptr [rbp+08H], edi
       mov      dword ptr [rbp+0CH], r13d
       mov      eax, 1
       jmp      G_M51820_IG67
						;; size=111 bbWeight=0    PerfScore 0.00
G_M51820_IG74:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       ; byrRegs -[rbp]
       mov      rdx, gword ptr [rsi+08H]
       ; gcrRegs +[rdx]
       mov      rcx, gword ptr [rdx+10H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [rsp+70H]
       ; gcrRegs -[rdx]
       cmp      edx, dword ptr [rcx+14H]
       je       G_M51820_IG68
       lea      rdx, bword ptr [rsp+70H]
       ; byrRegs +[rdx]
       call     [Cursor:ResetPositionNotInlined(byref):this]
       ; gcrRegs -[rcx]
       ; byrRegs -[rdx]
       ; gcr arg pop 0
       jmp      G_M51820_IG68
						;; size=37 bbWeight=0    PerfScore 0.00
G_M51820_IG75:        ; gcrefRegs=000000C1 {rax rsi rdi}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r14] +[rax rdi]
       mov      rcx, gword ptr [rax+08H]
       ; gcrRegs +[rcx]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       mov      r8, rsi
       ; gcrRegs +[r8]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx rdx r8]
       ; gcr arg pop 0
       mov      rcx, gword ptr [rsi+08H]
       ; gcrRegs +[rcx]
       mov      rbp, gword ptr [rcx+10H]
       ; gcrRegs +[rbp]
       cmp      gword ptr [rdi+20H], 0
       je       G_M51820_IG03
						;; size=32 bbWeight=0    PerfScore 0.00
G_M51820_IG76:        ; gcrefRegs=000000E0 {rbp rsi rdi}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rcx]
       cmp      byte  ptr [rdi+14H], 0
       je       G_M51820_IG82
       mov      rcx, gword ptr [rsi+08H]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+10H]
       lea      rdx, bword ptr [rsp+A8H]
       ; byrRegs +[rdx]
       cmp      dword ptr [rcx], ecx
       call     [Cursor:get_Position():TextPosition:this]
       ; gcrRegs -[rcx]
       ; byrRegs -[rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [ParseContext:SkipWhiteSpace():this]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       movzx    rdx, word  ptr [rbp+20H]
       mov      rcx, gword ptr [rdi+20H]
       ; gcrRegs +[rcx]
       lea      r8, [rsp+A0H]
       cmp      dword ptr [rcx], ecx
       call     [Dictionary`2:TryGetValue(ushort,byref):bool:this]
       ; gcrRegs -[rcx rbp rdi]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M51820_IG81
       mov      rcx, gword ptr [rsp+A0H]
       ; gcrRegs +[rcx]
       mov      ebp, dword ptr [rcx+10H]
       xor      edi, edi
       jmp      SHORT G_M51820_IG80
						;; size=86 bbWeight=0    PerfScore 0.00
G_M51820_IG77:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rcx]
       mov      rcx, gword ptr [rsp+A0H]
       ; gcrRegs +[rcx]
       cmp      edi, dword ptr [rcx+10H]
       jae      G_M51820_IG84
       mov      rcx, gword ptr [rcx+08H]
       cmp      edi, dword ptr [rcx+08H]
       jae      G_M51820_IG114
       mov      edx, edi
       mov      rcx, gword ptr [rcx+8*rdx+10H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      r8, rbx
       ; byrRegs +[r8]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; byrRegs -[r8]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M51820_IG79
       mov      eax, 1
						;; size=62 bbWeight=0    PerfScore 0.00
G_M51820_IG78:        ; , epilog, nogc, extend
       add      rsp, 184
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=20 bbWeight=0    PerfScore 0.00
G_M51820_IG79:        ; gcVars=00000000000000000000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000008 {rbx}, gcvars, byref
       inc      edi
						;; size=2 bbWeight=0    PerfScore 0.00
G_M51820_IG80:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      edi, ebp
       jl       SHORT G_M51820_IG77
						;; size=4 bbWeight=0    PerfScore 0.00
G_M51820_IG81:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rbx]
       mov      rdx, gword ptr [rsi+08H]
       ; gcrRegs +[rdx]
       mov      rcx, gword ptr [rdx+10H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [rsp+A8H]
       ; gcrRegs -[rdx]
       cmp      edx, dword ptr [rcx+14H]
       je       G_M51820_IG28
       lea      rdx, bword ptr [rsp+A8H]
       ; byrRegs +[rdx]
       call     [Cursor:ResetPositionNotInlined(byref):this]
       ; gcrRegs -[rcx rsi]
       ; byrRegs -[rdx]
       ; gcr arg pop 0
       jmp      G_M51820_IG28
						;; size=43 bbWeight=0    PerfScore 0.00
G_M51820_IG82:        ; gcrefRegs=000000E0 {rbp rsi rdi}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[rbp rsi rdi]
       ; byrRegs +[rbx]
       movzx    rdx, word  ptr [rbp+20H]
       mov      rcx, gword ptr [rdi+20H]
       ; gcrRegs +[rcx]
       lea      r8, [rsp+98H]
       cmp      dword ptr [rcx], ecx
       call     [Dictionary`2:TryGetValue(ushort,byref):bool:this]
       ; gcrRegs -[rcx rbp rdi]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M51820_IG28
       mov      rax, gword ptr [rsp+98H]
       ; gcrRegs +[rax]
       mov      r13d, dword ptr [rax+10H]
       xor      r14d, r14d
       jmp      SHORT G_M51820_IG88
						;; size=49 bbWeight=0    PerfScore 0.00
G_M51820_IG83:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rax]
       mov      rcx, gword ptr [rsp+98H]
       ; gcrRegs +[rcx]
       cmp      r14d, dword ptr [rcx+10H]
       jb       SHORT G_M51820_IG85
						;; size=14 bbWeight=0    PerfScore 0.00
G_M51820_IG84:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rcx rsi]
       ; byrRegs -[rbx]
       call     [ThrowHelper:ThrowArgumentOutOfRange_IndexMustBeLessException()]
       ; gcr arg pop 0
       int3     
						;; size=7 bbWeight=0    PerfScore 0.00
G_M51820_IG85:        ; gcrefRegs=00000042 {rcx rsi}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[rcx rsi]
       ; byrRegs +[rbx]
       mov      rcx, gword ptr [rcx+08H]
       cmp      r14d, dword ptr [rcx+08H]
       jae      G_M51820_IG114
       mov      edx, r14d
       mov      rcx, gword ptr [rcx+8*rdx+10H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      r8, rbx
       ; byrRegs +[r8]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; byrRegs -[r8]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M51820_IG87
       mov      eax, 1
						;; size=47 bbWeight=0    PerfScore 0.00
G_M51820_IG86:        ; , epilog, nogc, extend
       add      rsp, 184
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=20 bbWeight=0    PerfScore 0.00
G_M51820_IG87:        ; gcVars=00000000000000000000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000008 {rbx}, gcvars, byref
       inc      r14d
						;; size=3 bbWeight=0    PerfScore 0.00
G_M51820_IG88:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000008 {rbx}, byref, isz
       cmp      r14d, r13d
       jl       SHORT G_M51820_IG83
       jmp      G_M51820_IG28
						;; size=10 bbWeight=0    PerfScore 0.00
G_M51820_IG89:        ; gcrefRegs=00006060 {rbp rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rbp r13-r14]
       mov      rcx, gword ptr [rbp+08H]
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      r8, rsi
       ; gcrRegs +[r8]
       call     [rbp+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rbp r8]
       ; gcr arg pop 0
       jmp      G_M51820_IG06
						;; size=18 bbWeight=0    PerfScore 0.00
G_M51820_IG90:        ; gcrefRegs=000068C0 {rsi rdi r11 r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rdi r11]
       mov      rcx, gword ptr [r11+08H]
       ; gcrRegs +[rcx]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       mov      r8, rsi
       ; gcrRegs +[r8]
       call     [r11+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r8 r11]
       ; gcr arg pop 0
       jmp      G_M51820_IG07
						;; size=19 bbWeight=0    PerfScore 0.00
G_M51820_IG91:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[rbp]
       xor      eax, eax
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      r8d, dword ptr [rcx+08H]
       mov      rcx, gword ptr [rbp+10H]
       sub      r8d, dword ptr [rcx+14H]
       jmp      SHORT G_M51820_IG93
						;; size=24 bbWeight=0    PerfScore 0.00
G_M51820_IG92:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rcx]
       mov      eax, dword ptr [rsp+2CH]
       inc      eax
       mov      r8d, dword ptr [rsp+28H]
						;; size=11 bbWeight=0    PerfScore 0.00
G_M51820_IG93:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       mov      dword ptr [rsp+28H], r8d
       cmp      eax, r8d
       jge      SHORT G_M51820_IG94
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      dword ptr [rsp+2CH], eax
       mov      edx, eax
       cmp      dword ptr [rcx], ecx
       call     [Cursor:PeekNext(int):ushort:this]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      ecx, eax
       call     [Character:IsWhiteSpace(ushort):bool]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M51820_IG92
       mov      eax, dword ptr [rsp+2CH]
						;; size=44 bbWeight=0    PerfScore 0.00
G_M51820_IG94:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jle      G_M51820_IG32
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      edx, eax
       cmp      dword ptr [rcx], ecx
       call     [Cursor:AdvanceNoNewLines(int):this]
       ; gcrRegs -[rcx rbp]
       ; gcr arg pop 0
       jmp      G_M51820_IG32
						;; size=27 bbWeight=0    PerfScore 0.00
G_M51820_IG95:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rbp]
       xor      ecx, ecx
       jmp      G_M51820_IG09
						;; size=7 bbWeight=0    PerfScore 0.00
G_M51820_IG96:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       cmp      ecx, 9
       je       G_M51820_IG11
       cmp      ecx, 11
       je       G_M51820_IG11
       jmp      G_M51820_IG15
						;; size=23 bbWeight=0    PerfScore 0.00
G_M51820_IG97:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       mov      dword ptr [rsp+24H], r8d
       call     [Character:IsWhiteSpaceNonAscii(ushort):bool]
       ; gcr arg pop 0
       test     eax, eax
       mov      edx, dword ptr [rsp+20H]
       mov      r8d, dword ptr [rsp+24H]
       jne      G_M51820_IG11
       jmp      G_M51820_IG16
						;; size=33 bbWeight=0    PerfScore 0.00
G_M51820_IG98:        ; gcrefRegs=000060C1 {rax rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rbp] +[rax]
       mov      byte  ptr [rax+22H], 1
       mov      r9d, dword ptr [rax+10H]
       dec      r9d
       cmp      dword ptr [rax+14H], r9d
       jge      G_M51820_IG19
       jmp      G_M51820_IG21
						;; size=26 bbWeight=0    PerfScore 0.00
G_M51820_IG99:        ; gcrefRegs=000060C0 {rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax]
       xor      ecx, ecx
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+30H], xmm0
       mov      qword ptr [rsp+40H], rcx
       mov      rcx, gword ptr [rsi+18H]
       ; gcrRegs +[rcx]
       lea      r8, [rsp+30H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       jmp      G_M51820_IG32
						;; size=44 bbWeight=0    PerfScore 0.00
G_M51820_IG100:        ; gcrefRegs=00006040 {rsi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rdi]
       xor      ecx, ecx
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+58H], xmm0
       mov      qword ptr [rsp+68H], rcx
       mov      rcx, gword ptr [r13+20H]
       ; gcrRegs +[rcx]
       lea      r8, [rsp+58H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r13]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M51820_IG101
       mov      ebp, dword ptr [rsp+80H]
       mov      eax, dword ptr [rsp+5CH]
       mov      rdx, gword ptr [rsp+88H]
       ; gcrRegs +[rdx]
       mov      edi, dword ptr [rsp+90H]
       mov      r13d, dword ptr [rsp+94H]
       mov      dword ptr [rbx], ebp
       mov      dword ptr [rbx+04H], eax
       lea      rbp, bword ptr [rbx+08H]
       ; byrRegs +[rbp]
       mov      rcx, rbp
       ; byrRegs +[rcx]
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       mov      dword ptr [rbp+08H], edi
       mov      dword ptr [rbp+0CH], r13d
       mov      eax, 1
       jmp      G_M51820_IG26
						;; size=111 bbWeight=0    PerfScore 0.00
G_M51820_IG101:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       ; byrRegs -[rbp]
       mov      rdx, gword ptr [rsi+08H]
       ; gcrRegs +[rdx]
       mov      rcx, gword ptr [rdx+10H]
       ; gcrRegs +[rcx]
       mov      edx, dword ptr [rsp+70H]
       ; gcrRegs -[rdx]
       cmp      edx, dword ptr [rcx+14H]
       je       G_M51820_IG27
       lea      rdx, bword ptr [rsp+70H]
       ; byrRegs +[rdx]
       call     [Cursor:ResetPositionNotInlined(byref):this]
       ; gcrRegs -[rcx]
       ; byrRegs -[rdx]
       ; gcr arg pop 0
       jmp      G_M51820_IG27
						;; size=37 bbWeight=0    PerfScore 0.00
G_M51820_IG102:        ; gcrefRegs=00006060 {rbp rsi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rbp r13]
       mov      rcx, gword ptr [rbp+08H]
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      r8, rsi
       ; gcrRegs +[r8]
       call     [rbp+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rbp r8]
       ; gcr arg pop 0
       jmp      G_M51820_IG42
						;; size=18 bbWeight=0    PerfScore 0.00
G_M51820_IG103:        ; gcrefRegs=000068C0 {rsi rdi r11 r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rdi r11]
       mov      rcx, gword ptr [r11+08H]
       ; gcrRegs +[rcx]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       mov      r8, rsi
       ; gcrRegs +[r8]
       call     [r11+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r8 r11]
       ; gcr arg pop 0
       jmp      G_M51820_IG43
						;; size=19 bbWeight=0    PerfScore 0.00
G_M51820_IG104:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[rbp]
       xor      eax, eax
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      rcx, gword ptr [rcx+08H]
       mov      r8d, dword ptr [rcx+08H]
       mov      rcx, gword ptr [rbp+10H]
       sub      r8d, dword ptr [rcx+14H]
       jmp      SHORT G_M51820_IG106
						;; size=24 bbWeight=0    PerfScore 0.00
G_M51820_IG105:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rcx]
       mov      eax, dword ptr [rsp+2CH]
       inc      eax
       mov      r8d, dword ptr [rsp+28H]
						;; size=11 bbWeight=0    PerfScore 0.00
G_M51820_IG106:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       mov      dword ptr [rsp+28H], r8d
       cmp      eax, r8d
       jge      SHORT G_M51820_IG107
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      dword ptr [rsp+2CH], eax
       mov      edx, eax
       cmp      dword ptr [rcx], ecx
       call     [Cursor:PeekNext(int):ushort:this]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      ecx, eax
       call     [Character:IsWhiteSpace(ushort):bool]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M51820_IG105
       mov      eax, dword ptr [rsp+2CH]
						;; size=44 bbWeight=0    PerfScore 0.00
G_M51820_IG107:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jle      G_M51820_IG60
       mov      rcx, gword ptr [rbp+10H]
       ; gcrRegs +[rcx]
       mov      edx, eax
       cmp      dword ptr [rcx], ecx
       call     [Cursor:AdvanceNoNewLines(int):this]
       ; gcrRegs -[rcx rbp]
       ; gcr arg pop 0
       jmp      G_M51820_IG60
						;; size=27 bbWeight=0    PerfScore 0.00
G_M51820_IG108:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[rbp]
       mov      dword ptr [rsp+24H], eax
       mov      dword ptr [rsp+20H], r9d
       call     [Character:IsWhiteSpaceNonAscii(ushort):bool]
       ; gcr arg pop 0
       jmp      SHORT G_M51820_IG111
						;; size=17 bbWeight=0    PerfScore 0.00
G_M51820_IG109:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       xor      ecx, ecx
       jmp      G_M51820_IG45
						;; size=7 bbWeight=0    PerfScore 0.00
G_M51820_IG110:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       cmp      ecx, 9
       je       G_M51820_IG49
       cmp      ecx, 11
       je       G_M51820_IG49
       jmp      G_M51820_IG46
						;; size=23 bbWeight=0    PerfScore 0.00
G_M51820_IG111:        ; gcrefRegs=000060E0 {rbp rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       mov      eax, dword ptr [rsp+24H]
       mov      r9d, dword ptr [rsp+20H]
       jne      G_M51820_IG49
       jmp      G_M51820_IG59
						;; size=22 bbWeight=0    PerfScore 0.00
G_M51820_IG112:        ; gcrefRegs=000061C0 {rsi rdi r8 r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rbp] +[r8]
       mov      byte  ptr [r8+22H], 1
       mov      r9d, dword ptr [r8+10H]
       dec      r9d
       cmp      dword ptr [r8+14H], r9d
       jge      G_M51820_IG55
       jmp      G_M51820_IG53
						;; size=27 bbWeight=0    PerfScore 0.00
G_M51820_IG113:        ; gcrefRegs=000060C0 {rsi rdi r13 r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r8]
       xor      ecx, ecx
       vxorps   xmm0, xmm0
       vmovdqu  xmmword ptr [rsp+30H], xmm0
       mov      qword ptr [rsp+40H], rcx
       mov      rcx, gword ptr [rsi+18H]
       ; gcrRegs +[rcx]
       lea      r8, [rsp+30H]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+20H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       jmp      G_M51820_IG60
						;; size=44 bbWeight=0    PerfScore 0.00
G_M51820_IG114:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi rdi r13-r14]
       ; byrRegs -[rbx]
       call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
       int3     
						;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 2999, prolog size 98, PerfScore 678.47, instruction count 742, allocated bytes for code 3029 (MethodHash=0e563593) for method OneOf`1:Parse(ParseContext,byref):bool:this
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x13
  CountOfUnwindCodes: 10
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x13 UnwindOp: UWOP_ALLOC_LARGE (1)     OpInfo: 0 - Scaled small  
      Size: 23 * 8 = 184 = 0x000B8
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x08 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
