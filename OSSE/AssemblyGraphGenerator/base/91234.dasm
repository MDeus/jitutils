; Assembly listing for method Expression:ValidateLambdaArgs(Type,byref,ReadOnlyCollection`1,String)
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; rsp based frame
; partially interruptible
; No matching PGO data
; 0 inlinees with PGO data; 39 single block inlinees; 8 inlinees without PGO data
; Final local variable assignments
;
;  V00 arg0         [V00,T06] ( 12,  9.50)     ref  ->  rsi         class-hnd single-def
;  V01 arg1         [V01,T12] (  6,  4   )   byref  ->  rbx         single-def
;  V02 arg2         [V02,T08] (  6,  7   )     ref  ->  rdi         class-hnd single-def
;  V03 arg3         [V03,T17] (  3,  2   )     ref  ->  rbp         class-hnd single-def
;  V04 loc0         [V04,T21] (  3,  2.50)     ref  ->  rbp         class-hnd exact single-def
;  V05 loc1         [V05    ] ( 12,  7   )     ref  ->  [rsp+60H]   do-not-enreg[X] must-init addr-exposed ld-addr-op class-hnd
;  V06 loc2         [V06,T10] (  7,  7.50)     ref  ->  rsi         class-hnd single-def
;  V07 loc3         [V07,T16] (  3,  4.50)     ref  ->  rbp         class-hnd exact single-def
;  V08 loc4         [V08,T01] ( 14, 24.50)     int  ->  r14        
;  V09 loc5         [V09,T14] (  5,  5.50)     int  ->  r15        
;  V10 loc6         [V10,T02] ( 18, 24.04)     ref  ->  r12         class-hnd
;  V11 loc7         [V11,T04] (  6, 12   )     ref  ->  r13         class-hnd
;  V12 loc8         [V12,T03] ( 22, 22   )     ref  ->  r13         class-hnd
;  V13 OutArgs      [V13    ] (  1,  1   )  lclBlk (56) [rsp+00H]   "OutgoingArgSpace"
;  V14 tmp1         [V14,T09] (  8,  8   )     ref  ->  r12         class-hnd single-def "non-inline candidate call"
;  V15 tmp2         [V15,T35] (  2,  0   )     ref  ->  rsi         class-hnd single-def "non-inline candidate call"
;* V16 tmp3         [V16    ] (  0,  0   )     int  ->  zero-ref    "impAppendStmt"
;* V17 tmp4         [V17    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "NewObj constructor temp"
;* V18 tmp5         [V18    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V19 tmp6         [V19,T26] (  3,  0   )     ref  ->  r14         class-hnd exact single-def "NewObj constructor temp"
;  V20 tmp7         [V20,T23] (  2,  2   )     ref  ->   r8         class-hnd single-def "Inlining Arg"
;  V21 tmp8         [V21,T27] (  3,  0   )     ref  ->  rbx         class-hnd exact single-def "NewObj constructor temp"
;  V22 tmp9         [V22,T36] (  2,  0   )     ref  ->  r12         class-hnd "Inlining Arg"
;  V23 tmp10        [V23,T28] (  3,  0   )     ref  ->  rsi         class-hnd exact "NewObj constructor temp"
;  V24 tmp11        [V24,T11] (  4,  4   )    bool  ->  rax         "Inline return value spill temp"
;  V25 tmp12        [V25,T00] ( 15, 36.04)     ref  ->  [rsp+40H]   class-hnd "Inlining Arg"
;  V26 tmp13        [V26,T13] (  4,  4   )    bool  ->  rax         "Inline return value spill temp"
;  V27 tmp14        [V27,T37] (  2,  0   )     ref  ->  r12         class-hnd "Inlining Arg"
;  V28 tmp15        [V28,T29] (  3,  0   )     ref  ->  rsi         class-hnd exact "NewObj constructor temp"
;  V29 tmp16        [V29    ] (  2,  4   )     int  ->  [rsp+58H]   do-not-enreg[X] addr-exposed ld-addr-op "Inline ldloca(s) first use temp"
;  V30 tmp17        [V30,T38] (  2,  0   )     ref  ->  rsi         class-hnd "Inlining Arg"
;  V31 tmp18        [V31,T30] (  3,  0   )     ref  ->  rdi         class-hnd exact "NewObj constructor temp"
;  V32 tmp19        [V32,T31] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V33 tmp20        [V33,T22] (  2,  1   )    bool  ->  rax         "Inline return value spill temp"
;  V34 tmp21        [V34,T15] (  5,  5   )     ref  ->  r13         class-hnd single-def "Inlining Arg"
;  V35 tmp22        [V35,T25] (  2,  1   )    bool  ->  rax         "Inline return value spill temp"
;* V36 tmp23        [V36    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V37 tmp24        [V37,T39] (  2,  0   )     ref  ->  rdi         class-hnd single-def "Inlining Arg"
;  V38 tmp25        [V38,T32] (  3,  0   )     ref  ->  rbx         class-hnd exact single-def "NewObj constructor temp"
;  V39 tmp26        [V39,T18] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V40 tmp27        [V40,T40] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V41 tmp28        [V41,T41] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V42 tmp29        [V42,T33] (  3,  0   )     ref  ->  rax         "argument with side effect"
;  V43 tmp30        [V43,T42] (  2,  0   )     ref  ->  rcx         "argument with side effect"
;  V44 tmp31        [V44,T43] (  2,  0   )     ref  ->  rdx         "argument with side effect"
;  V45 tmp32        [V45,T44] (  2,  0   )     ref  ->  rcx         "argument with side effect"
;  V46 tmp33        [V46,T45] (  2,  0   )     ref  ->  rdx         "argument with side effect"
;  V47 tmp34        [V47,T46] (  2,  0   )     ref  ->  rcx         "argument with side effect"
;  V48 tmp35        [V48,T47] (  2,  0   )     ref  ->  rcx         "argument with side effect"
;  V49 tmp36        [V49,T48] (  2,  0   )     ref  ->  rdx         "argument with side effect"
;  V50 tmp37        [V50,T49] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V51 tmp38        [V51,T19] (  3,  3   )     ref  ->  rcx         single-def "argument with side effect"
;  V52 tmp39        [V52,T24] (  2,  2   )     ref  ->  rcx         single-def "argument with side effect"
;  V53 tmp40        [V53,T34] (  3,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V54 tmp41        [V54,T50] (  2,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V55 tmp42        [V55,T51] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V56 cse0         [V56,T20] (  3,  3   )     ref  ->  r14         "CSE - moderate"
;  V57 cse1         [V57,T05] (  3, 11.88)    long  ->  [rsp+50H]   spill-single-def "CSE - aggressive"
;  V58 cse2         [V58,T07] (  5,  9.90)    long  ->  [rsp+48H]   "CSE - aggressive"
;
; Lcl frame size = 104

G_M51743_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 104
       xor      eax, eax
       mov      qword ptr [rsp+60H], rax
       mov      rsi, rcx
       ; gcrRegs +[rsi]
       mov      rbx, rdx
       ; byrRegs +[rbx]
       mov      rdi, r8
       ; gcrRegs +[rdi]
       mov      rbp, r9
       ; gcrRegs +[rbp]
						;; size=35 bbWeight=1    PerfScore 10.50
G_M51743_IG02:        ; gcrefRegs=000000E0 {rbp rsi rdi}, byrefRegs=00000008 {rbx}, byref, isz
       test     rsi, rsi
       je       G_M51743_IG26
       mov      rcx, gword ptr [rbx]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; string handle
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      r8d, -1
       call     [ExpressionUtils:RequiresCanRead(Expression,String,int)]
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      rcx, 0xD1FFAB1E      ; hackishClassName
       call     CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPE
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     [RuntimeType:IsAssignableFrom(Type):bool:this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M51743_IG27
       cmp      r14, rsi
       je       G_M51743_IG27
       mov      rdx, 0xD1FFAB1E      ; string handle
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      r8d, -1
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx rbp r14]
       ; gcr arg pop 0
       mov      r8, 0xD1FFAB1E      ; const ptr
       mov      rbp, gword ptr [r8]
       ; gcrRegs +[rbp]
       lea      r8, [rsp+60H]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     [CacheDict`2:TryGetValue(__Canon,byref):bool:this]
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M51743_IG04
						;; size=146 bbWeight=1    PerfScore 29.50
G_M51743_IG03:        ; gcrefRegs=000000E0 {rbp rsi rdi}, byrefRegs=00000008 {rbx}, byref, isz
       mov      dword ptr [rsp+20H], 3
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       mov      gword ptr [rsp+28H], rdx
       ; gcr arg write
       mov      gword ptr [rsp+30H], rdx
       ; gcr arg write
       mov      rdx, 0xD1FFAB1E      ; string handle
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      r8d, 52
       xor      r9, r9
       ; gcrRegs +[r9]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+88H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r9] +[rax]
       ; gcr arg pop 0
       mov      gword ptr [rsp+60H], rax
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+50H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M51743_IG04
       mov      r8, gword ptr [rsp+60H]
       ; gcrRegs +[r8]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     [CacheDict`2:Add(__Canon,__Canon):this]
       ; gcrRegs -[rcx rdx rbp rsi r8]
       ; gcr arg pop 0
						;; size=95 bbWeight=0.50 PerfScore 13.62
G_M51743_IG04:        ; gcrefRegs=00000080 {rdi}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, gword ptr [rsp+60H]
       ; gcrRegs +[rcx]
       call     [TypeExtensions:GetParametersCached(MethodBase):ref]
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       cmp      dword ptr [rsi+08H], 0
       je       G_M51743_IG22
						;; size=24 bbWeight=1    PerfScore 8.25
G_M51743_IG05:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax]
       mov      ebp, dword ptr [rsi+08H]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       cmp      ebp, eax
       jne      G_M51743_IG28
       mov      rcx, 0xD1FFAB1E      ; HashSet`1
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rbp, rax
       ; gcrRegs +[rbp]
       xor      r14d, r14d
       mov      r15d, dword ptr [rsi+08H]
       test     r15d, r15d
       jle      G_M51743_IG19
       test     r15d, r15d
       jl       G_M51743_IG13
       mov      ecx, dword ptr [rsi+08H]
						;; size=74 bbWeight=0.50 PerfScore 8.38
G_M51743_IG06:        ; gcrefRegs=000000E0 {rbp rsi rdi}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rax]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      edx, r14d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName(int):__Canon:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r12, rax
       ; gcrRegs +[r12]
       mov      edx, r14d
       mov      r13, gword ptr [rsi+8*rdx+10H]
       ; gcrRegs +[r13]
       mov      rdx, 0xD1FFAB1E      ; string handle
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      r8d, r14d
       call     [ExpressionUtils:RequiresCanRead(Expression,String,int)]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r13] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r12]
       ; gcrRegs -[rax]
       mov      qword ptr [rsp+50H], rax
       mov      rdx, qword ptr [rax+48H]
       call     [rdx+10H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M51743_IG08
						;; size=96 bbWeight=3.96 PerfScore 121.77
G_M51743_IG07:        ; gcrefRegs=000030E0 {rbp rsi rdi r12 r13}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+58H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M51743_IG29
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+60H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r13] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
						;; size=39 bbWeight=1.98 PerfScore 31.68
G_M51743_IG08:        ; gcrefRegs=000030E0 {rbp rsi rdi r12 r13}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rax]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsp+50H]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       test     rax, rax
       je       SHORT G_M51743_IG10
						;; size=20 bbWeight=3.96 PerfScore 29.70
G_M51743_IG09:        ; gcrefRegs=000030E1 {rax rbp rsi rdi r12 r13}, byrefRegs=00000008 {rbx}, byref, isz
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      gword ptr [rsp+40H], rax
       ; GC ptr vars +{V25}
       mov      r8, qword ptr [rax]
       mov      r8, qword ptr [r8+98H]
       call     [r8+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       mov      rax, gword ptr [rsp+40H]
       ; gcrRegs +[rax]
       jne      SHORT G_M51743_IG11
						;; size=34 bbWeight=1.98 PerfScore 21.29
G_M51743_IG10:        ; gcVars=0000000000000000 {}, gcrefRegs=000030E1 {rax rbp rsi rdi r12 r13}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; GC ptr vars -{V25}
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      gword ptr [rsp+40H], rax
       ; GC ptr vars +{V25}
       mov      r8, qword ptr [rax]
       mov      rdx, r8
       mov      qword ptr [rsp+48H], rdx
       mov      r8, qword ptr [rdx+70H]
       call     [r8+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M51743_IG30
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M51743_IG30
       mov      rcx, gword ptr [rsp+40H]
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rsp+48H]
       mov      rax, qword ptr [rax+A8H]
       ; GC ptr vars -{V25}
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M51743_IG30
						;; size=88 bbWeight=1.98 PerfScore 54.94
G_M51743_IG11:        ; gcrefRegs=000010E0 {rbp rsi rdi r12}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r13]
       lea      r8, [rsp+58H]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rdx, r12
       ; gcrRegs +[rdx]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M51743_IG31
       inc      r14d
       cmp      r14d, r15d
       jl       G_M51743_IG06
						;; size=37 bbWeight=3.96 PerfScore 26.73
G_M51743_IG12:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rbp rsi rdi r12]
       jmp      G_M51743_IG19
						;; size=5 bbWeight=0.50 PerfScore 1.00
G_M51743_IG13:        ; gcrefRegs=000000E0 {rbp rsi rdi}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[rbp rsi rdi]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      edx, r14d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName(int):__Canon:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r12, rax
       ; gcrRegs +[r12]
       mov      edx, r14d
       mov      r13, gword ptr [rsi+8*rdx+10H]
       ; gcrRegs +[r13]
       mov      rdx, 0xD1FFAB1E      ; string handle
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      r8d, r14d
       call     [ExpressionUtils:RequiresCanRead(Expression,String,int)]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+40H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r13] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r12]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+48H]
       call     [rax+10H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M51743_IG15
						;; size=91 bbWeight=0.04 PerfScore 1.19
G_M51743_IG14:        ; gcrefRegs=000030E0 {rbp rsi rdi r12 r13}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+58H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M51743_IG29
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+60H]
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r13] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
						;; size=39 bbWeight=0.02 PerfScore 0.32
G_M51743_IG15:        ; gcrefRegs=000030E0 {rbp rsi rdi r12 r13}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rax]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       test     rax, rax
       je       SHORT G_M51743_IG17
						;; size=19 bbWeight=0.04 PerfScore 0.34
G_M51743_IG16:        ; gcrefRegs=000030E1 {rax rbp rsi rdi r12 r13}, byrefRegs=00000008 {rbx}, byref, isz
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      gword ptr [rsp+40H], rax
       ; GC ptr vars +{V25}
       mov      r8, qword ptr [rax]
       mov      r8, qword ptr [r8+98H]
       call     [r8+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       mov      rax, gword ptr [rsp+40H]
       ; gcrRegs +[rax]
       jne      SHORT G_M51743_IG18
						;; size=34 bbWeight=0.02 PerfScore 0.22
G_M51743_IG17:        ; gcVars=0000000000000000 {}, gcrefRegs=000030E1 {rax rbp rsi rdi r12 r13}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; GC ptr vars -{V25}
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      gword ptr [rsp+40H], rax
       ; GC ptr vars +{V25}
       mov      rdx, qword ptr [rax]
       mov      rdx, qword ptr [rdx+70H]
       call     [rdx+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M51743_IG30
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M51743_IG30
       mov      rcx, gword ptr [rsp+40H]
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+A8H]
       ; GC ptr vars -{V25}
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M51743_IG30
						;; size=77 bbWeight=0.02 PerfScore 0.55
G_M51743_IG18:        ; gcrefRegs=000010E0 {rbp rsi rdi r12}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r13]
       lea      r8, [rsp+58H]
       mov      rcx, rbp
       ; gcrRegs +[rcx]
       mov      rdx, r12
       ; gcrRegs +[rdx]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       je       G_M51743_IG31
       inc      r14d
       cmp      r14d, r15d
       jl       G_M51743_IG13
						;; size=37 bbWeight=0.04 PerfScore 0.27
G_M51743_IG19:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rbp rsi rdi r12]
       mov      rcx, gword ptr [rsp+60H]
       ; gcrRegs +[rcx]
       mov      rax, gword ptr [rsp+60H]
       ; gcrRegs +[rax]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+60H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      rcx, 0xD1FFAB1E      ; hackishClassName
       call     CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPE
       ; gcr arg pop 0
       cmp      rdi, rax
       je       SHORT G_M51743_IG21
						;; size=43 bbWeight=1    PerfScore 11.75
G_M51743_IG20:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rax rdi]
       mov      rcx, gword ptr [rsp+60H]
       ; gcrRegs +[rcx]
       mov      rax, gword ptr [rsp+60H]
       ; gcrRegs +[rax]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+60H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r12, rax
       ; gcrRegs +[r12]
       mov      rcx, gword ptr [rbx]
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rcx]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r13, rax
       ; gcrRegs +[r13]
       test     r12, r12
       je       SHORT G_M51743_IG23
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [r12]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+98H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
       test     eax, eax
       je       SHORT G_M51743_IG23
						;; size=68 bbWeight=0.50 PerfScore 14.25
G_M51743_IG21:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, epilog, nogc
       ; gcrRegs -[r12-r13]
       ; byrRegs -[rbx]
       add      rsp, 104
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       ret      
						;; size=17 bbWeight=1    PerfScore 5.25
G_M51743_IG22:        ; gcVars=0000000000000000 {}, gcrefRegs=00000080 {rdi}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs +[rdi]
       ; byrRegs +[rbx]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdi]
       ; gcr arg pop 0
       test     eax, eax
       jg       G_M51743_IG32
       jmp      G_M51743_IG19
						;; size=30 bbWeight=0.50 PerfScore 4.25
G_M51743_IG23:        ; gcrefRegs=00003000 {r12 r13}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[r12-r13]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M51743_IG24
       mov      rcx, r13
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r13]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M51743_IG24
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rdx, r13
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+A8H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r12-r13]
       ; gcr arg pop 0
       test     eax, eax
       jne      SHORT G_M51743_IG21
						;; size=60 bbWeight=0.50 PerfScore 12.88
G_M51743_IG24:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, gword ptr [rsp+60H]
       ; gcrRegs +[rcx]
       mov      rax, gword ptr [rsp+60H]
       ; gcrRegs +[rax]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+60H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; byrRegs +[rdx]
       call     [ExpressionUtils:TryQuote(Type,byref):bool]
       ; gcrRegs -[rax rcx]
       ; byrRegs -[rdx]
       ; gcr arg pop 0
       test     eax, eax
       jne      G_M51743_IG21
						;; size=40 bbWeight=0.50 PerfScore 6.88
G_M51743_IG25:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, gword ptr [rbx]
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; byrRegs -[rbx]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      rcx, gword ptr [rsp+60H]
       ; gcrRegs +[rcx]
       mov      rax, gword ptr [rsp+60H]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+60H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      ecx, 0xDF1
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      r8, rdi
       ; gcrRegs +[r8]
       call     [SR:Format(String,Object,Object):String]
       ; gcrRegs -[rcx rdx rsi rdi r8]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rbx]
       ; gcr arg pop 0
						;; size=121 bbWeight=0    PerfScore 0.00
G_M51743_IG26:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      ecx, 0x264F
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [ArgumentNullException:Throw(String)]
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
       int3     
						;; size=30 bbWeight=0    PerfScore 0.00
G_M51743_IG27:        ; gcrefRegs=00000020 {rbp}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rbp]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r14, rax
       ; gcrRegs +[r14]
       mov      ecx, 0x10C3
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      r8, rbp
       ; gcrRegs +[r8]
       call     [ArgumentException:.ctor(String,String):this]
       ; gcrRegs -[rax rcx rdx rbp r8]
       ; gcr arg pop 0
       mov      rcx, r14
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx r14]
       ; gcr arg pop 0
						;; size=70 bbWeight=0    PerfScore 0.00
G_M51743_IG28:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      ecx, 0xFC7
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rbx
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rbx]
       ; gcr arg pop 0
						;; size=67 bbWeight=0    PerfScore 0.00
G_M51743_IG29:        ; gcrefRegs=00003000 {r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[r12-r13]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx r12] +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+A0H]
       call     [rax+08H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; gcr arg pop 0
       mov      r12, rax
       ; gcrRegs +[r12]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x12FB
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, r12
       ; gcrRegs +[rdx]
       mov      r8, r13
       ; gcrRegs +[r8]
       call     [SR:Format(String,Object,Object):String]
       ; gcrRegs -[rcx rdx r8 r12-r13]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=115 bbWeight=0    PerfScore 0.00
G_M51743_IG30:        ; gcrefRegs=00003000 {r12 r13}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[r12-r13]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r12]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx r12] +[rax]
       ; gcr arg pop 0
       mov      r12, rax
       ; gcrRegs +[r12]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x12FB
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, r12
       ; gcrRegs +[rdx]
       mov      r8, r13
       ; gcrRegs +[r8]
       call     [SR:Format(String,Object,Object):String]
       ; gcrRegs -[rcx rdx r8 r12-r13]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=99 bbWeight=0    PerfScore 0.00
G_M51743_IG31:        ; gcrefRegs=00001000 {r12}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[r12]
       mov      ecx, 0x3161
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      edx, r14d
       call     [Error:GetParamName(String,int):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0x607
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, r12
       ; gcrRegs +[rdx]
       call     [SR:Format(String,Object):String]
       ; gcrRegs -[rcx rdx r12]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       mov      r8, rsi
       ; gcrRegs +[r8]
       call     [ArgumentException:.ctor(String,String):this]
       ; gcrRegs -[rax rcx rdx rsi r8]
       ; gcr arg pop 0
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rdi]
       ; gcr arg pop 0
						;; size=117 bbWeight=0    PerfScore 0.00
G_M51743_IG32:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0xFC7
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
       int3     
						;; size=68 bbWeight=0    PerfScore 0.00

; Total bytes of code 1935, prolog size 23, PerfScore 609.00, instruction count 471, allocated bytes for code 1935 (MethodHash=cb7d35e0) for method Expression:ValidateLambdaArgs(Type,byref,ReadOnlyCollection`1,String)
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x10
  CountOfUnwindCodes: 9
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x10 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 12 * 8 + 8 = 104 = 0x68
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x08 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
