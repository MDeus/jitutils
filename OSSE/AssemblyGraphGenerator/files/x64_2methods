; Assembly listing for method FileSystemName:TranslateWin32Expression(String):String
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; optimized code
; rbp based frame
; fully interruptible
; No matching PGO data
; 6 inlinees with PGO data; 10 single block inlinees; 0 inlinees without PGO data
; Final local variable assignments
;
;  V00 arg0         [V00,T01] ( 15, 12.66)     ref  ->  rsi         class-hnd single-def
;  V01 loc0         [V01,T16] (  6,  5   )    bool  ->  rbx        
;  V02 loc1         [V02    ] ( 49, 44.50)  struct (32) [rbp+08H]   do-not-enreg[XSF] must-init addr-exposed ld-addr-op
;  V03 loc2         [V03,T13] (  9,  9.50)     int  ->  r14        
;* V04 loc3         [V04    ] (  0,  0   )  struct (16) zero-ref   
;  V05 loc4         [V05,T00] ( 20, 26.52)     int  ->  r15        
;  V06 loc5         [V06,T02] ( 10, 12   )  ushort  ->  rdx        
;  V07 OutArgs      [V07    ] (  1,  1   )  lclBlk (32) [rsp+00H]   "OutgoingArgSpace"
;* V08 tmp1         [V08    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V09 tmp2         [V09,T25] (  0,  0   )    bool  ->  zero-ref    "Inline return value spill temp"
;* V10 tmp3         [V10    ] (  0,  0   )     ref  ->  zero-ref    single-def "spilling varStr"
;  V11 tmp4         [V11,T19] (  2,  0.50)     int  ->  rcx         "spilling unroll qmark"
;* V12 tmp5         [V12    ] (  0,  0   )     ref  ->  zero-ref    single-def "spilling varStr"
;  V13 tmp6         [V13,T20] (  2,  0.50)     int  ->  rax         "spilling unroll qmark"
;  V14 tmp7         [V14,T18] (  2,  2   )    long  ->  rax         "Inlining Arg"
;* V15 tmp8         [V15    ] (  0,  0   )  struct (16) zero-ref    "Inlining Arg"
;  V16 tmp9         [V16,T08] (  6, 12   )     int  ->  rax         "Inlining Arg"
;  V17 tmp10        [V17,T03] (  6, 12   )   byref  ->  r12         "Span.get_Item ptrToSpan"
;  V18 tmp11        [V18,T09] ( 10, 10   )     int  ->  r13         "Inline stloc first use temp"
;  V19 tmp12        [V19,T04] (  6, 12   )   byref  ->   r8         "Span.get_Item ptrToSpan"
;  V20 tmp13        [V20,T10] ( 10, 10   )     int  ->  r13         "Inline stloc first use temp"
;  V21 tmp14        [V21,T05] (  6, 12   )   byref  ->  rax         "Span.get_Item ptrToSpan"
;  V22 tmp15        [V22,T11] ( 10, 10   )     int  ->  r13         "Inline stloc first use temp"
;  V23 tmp16        [V23,T06] (  6, 12   )   byref  ->  rax         "Span.get_Item ptrToSpan"
;  V24 tmp17        [V24,T12] ( 10, 10   )     int  ->  r13         "Inline stloc first use temp"
;  V25 tmp18        [V25,T07] (  6, 12   )   byref  ->  rax         "Span.get_Item ptrToSpan"
;  V26 tmp19        [V26,T21] (  2,  1   )   byref  ->  rax         single-def V04._reference(offs=0x00) P-INDEP "field V04._reference (fldOffset=0x0)"
;* V27 tmp20        [V27,T26] (  0,  0   )     int  ->  zero-ref    V04._length(offs=0x08) P-INDEP "field V04._length (fldOffset=0x8)"
;  V28 tmp21        [V28,T22] (  2,  1   )   byref  ->  rax         V08._reference(offs=0x00) P-INDEP "field V08._reference (fldOffset=0x0)"
;* V29 tmp22        [V29,T27] (  0,  0   )     int  ->  zero-ref    V08._length(offs=0x08) P-INDEP "field V08._length (fldOffset=0x8)"
;  V30 tmp23        [V30,T23] (  2,  1   )   byref  ->  rax         single-def V15._reference(offs=0x00) P-INDEP "field V15._reference (fldOffset=0x0)"
;* V31 tmp24        [V31,T28] (  0,  0   )     int  ->  zero-ref    V15._length(offs=0x08) P-INDEP "field V15._length (fldOffset=0x8)"
;  V32 GsCookie     [V32    ] (  1,  1   )    long  ->  [rbp+00H]   do-not-enreg[X] addr-exposed "GSSecurityCookie"
;  V33 cse0         [V33,T14] (  3,  5.94)     int  ->  rcx         "CSE - moderate"
;  V34 cse1         [V34,T29] (  3,  0.06)     int  ->  rcx         "CSE - conservative"
;  V35 cse2         [V35,T24] (  3,  1.04)     int  ->  rax         "CSE - conservative"
;  V36 cse3         [V36,T17] (  5,  3.29)     int  ->  rdi         "CSE - moderate"
;  V37 cse4         [V37,T15] (  3,  5.94)     int  ->  rcx         "CSE - moderate"
;
; Lcl frame size = 72

G_M16506_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbx
       sub      rsp, 72
       lea      rbp, [rsp+20H]
       xor      eax, eax
       mov      qword ptr [rbp+08H], rax
       vxorps   xmm4, xmm4
       vmovdqa  xmmword ptr [rbp+10H], xmm4
       mov      qword ptr [rbp+20H], rax
       mov      rax, 0xD1FFAB1E
       mov      qword ptr [rbp], rax
       mov      rsi, rcx
       ; gcrRegs +[rsi]
						;; size=57 bbWeight=1    PerfScore 14.83
G_M16506_IG02:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       test     rsi, rsi
       je       G_M16506_IG10
						;; size=9 bbWeight=1    PerfScore 1.25
G_M16506_IG03:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      edi, dword ptr [rsi+08H]
       test     edi, edi
       je       G_M16506_IG10
       mov      eax, dword ptr [rsi+08H]
       cmp      eax, 1
       jne      SHORT G_M16506_IG05
						;; size=19 bbWeight=0.39 PerfScore 2.56
G_M16506_IG04:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       xor      ecx, ecx
       cmp      word  ptr [rsi+0CH], 42
       sete     cl
       test     cl, cl
       jne      SHORT G_M16506_IG10
						;; size=14 bbWeight=0.12 PerfScore 0.69
G_M16506_IG05:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       cmp      eax, 3
       jne      SHORT G_M16506_IG07
						;; size=5 bbWeight=0.25 PerfScore 0.31
G_M16506_IG06:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      eax, dword ptr [rsi+0CH]
       xor      eax, 0xD1FFAB1E
       mov      ecx, dword ptr [rsi+0EH]
       xor      ecx, 0xD1FFAB1E
       or       eax, ecx
       sete     al
       movzx    rax, al
       test     al, al
       jne      SHORT G_M16506_IG10
						;; size=29 bbWeight=0.12 PerfScore 0.91
G_M16506_IG07:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       xor      ebx, ebx
       test     dword ptr [rsp], esp
       sub      rsp, 64
       lea      rax, [rsp+20H]
       xor      rcx, rcx
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp+08H], rcx
       mov      bword ptr [rbp+18H], rax
       mov      dword ptr [rbp+20H], 32
       mov      dword ptr [rbp+10H], ecx
       mov      r14d, edi
       xor      r15d, r15d
       test     r14d, r14d
       jle      G_M16506_IG36
       test     r14d, r14d
       jl       G_M16506_IG24
						;; size=58 bbWeight=0.50 PerfScore 5.62
G_M16506_IG08:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx]
       mov      ecx, r15d
       movzx    rdx, word  ptr [rsi+2*rcx+0CH]
       cmp      edx, 46
       je       SHORT G_M16506_IG13
						;; size=13 bbWeight=3.96 PerfScore 13.86
G_M16506_IG09:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       cmp      edx, 63
       je       G_M16506_IG19
       jmp      G_M16506_IG21
						;; size=14 bbWeight=1.98 PerfScore 6.44
G_M16506_IG10:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rsi]
       mov      rax, 0xD1FFAB1E      ; string handle
       mov      rax, gword ptr [rax]
       ; gcrRegs +[rax]
       mov      rcx, 0xD1FFAB1E
       cmp      qword ptr [rbp], rcx
       je       SHORT G_M16506_IG11
       call     CORINFO_HELP_FAIL_FAST
       ; gcrRegs -[rax]
       ; gcr arg pop 0
						;; size=34 bbWeight=0.50 PerfScore 3.25
G_M16506_IG11:        ; gcrefRegs=00000001 {rax}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rax]
       nop      
						;; size=1 bbWeight=0.50 PerfScore 0.12
G_M16506_IG12:        ; , epilog, nogc, extend
       lea      rsp, [rbp+28H]
       pop      rbx
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
						;; size=17 bbWeight=0.50 PerfScore 2.75
G_M16506_IG13:        ; gcVars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[rax] +[rsi]
       mov      ebx, 1
       test     r15d, r15d
       jle      SHORT G_M16506_IG14
       lea      ecx, [r14-01H]
       cmp      r15d, ecx
       jne      SHORT G_M16506_IG14
       lea      ecx, [r15-01H]
       cmp      ecx, edi
       jae      G_M16506_IG44
       mov      ecx, ecx
       cmp      word  ptr [rsi+2*rcx+0CH], 42
       jne      SHORT G_M16506_IG14
       mov      eax, dword ptr [rbp+10H]
       dec      eax
       lea      r12, bword ptr [rbp+18H]
       ; byrRegs +[r12]
       cmp      eax, dword ptr [r12+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [r12]
       ; byrRegs +[rcx]
       mov      edx, eax
       mov      word  ptr [rcx+2*rdx], 60
       jmp      G_M16506_IG22
						;; size=78 bbWeight=1.98 PerfScore 40.09
G_M16506_IG14:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rcx r12]
       lea      ecx, [r14-01H]
       cmp      r15d, ecx
       jge      SHORT G_M16506_IG17
       lea      ecx, [r15+01H]
       movzx    rcx, word  ptr [rsi+2*rcx+0CH]
       cmp      ecx, 63
       je       SHORT G_M16506_IG15
       cmp      ecx, 42
       jne      SHORT G_M16506_IG17
						;; size=28 bbWeight=1.98 PerfScore 13.36
G_M16506_IG15:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      r13d, dword ptr [rbp+10H]
       cmp      r13d, dword ptr [rbp+20H]
       jae      SHORT G_M16506_IG16
       lea      r8, bword ptr [rbp+18H]
       ; byrRegs +[r8]
       cmp      r13d, dword ptr [r8+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [r8]
       ; byrRegs +[rcx]
       mov      edx, r13d
       mov      word  ptr [rcx+2*rdx], 34
       inc      r13d
       mov      dword ptr [rbp+10H], r13d
       jmp      G_M16506_IG22
						;; size=48 bbWeight=1.98 PerfScore 29.70
G_M16506_IG16:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rcx r8]
       lea      rcx, [rbp+08H]
       mov      edx, 34
       call     [hackishModuleName:hackishMethodName()]
       ; gcr arg pop 0
       jmp      G_M16506_IG22
						;; size=20 bbWeight=1.98 PerfScore 11.38
G_M16506_IG17:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      r13d, dword ptr [rbp+10H]
       cmp      r13d, dword ptr [rbp+20H]
       jae      SHORT G_M16506_IG18
       lea      rax, bword ptr [rbp+18H]
       ; byrRegs +[rax]
       cmp      r13d, dword ptr [rax+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [rax]
       ; byrRegs +[rcx]
       mov      edx, r13d
       mov      word  ptr [rcx+2*rdx], 46
       inc      r13d
       mov      dword ptr [rbp+10H], r13d
       jmp      G_M16506_IG22
						;; size=48 bbWeight=1.98 PerfScore 29.70
G_M16506_IG18:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rax rcx]
       lea      rcx, [rbp+08H]
       mov      edx, 46
       call     [hackishModuleName:hackishMethodName()]
       ; gcr arg pop 0
       jmp      SHORT G_M16506_IG22
						;; size=17 bbWeight=1.98 PerfScore 11.38
G_M16506_IG19:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      ebx, 1
       mov      r13d, dword ptr [rbp+10H]
       cmp      r13d, dword ptr [rbp+20H]
       jae      SHORT G_M16506_IG20
       lea      rax, bword ptr [rbp+18H]
       ; byrRegs +[rax]
       cmp      r13d, dword ptr [rax+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [rax]
       ; byrRegs +[rcx]
       mov      edx, r13d
       mov      word  ptr [rcx+2*rdx], 62
       inc      r13d
       mov      dword ptr [rbp+10H], r13d
       jmp      SHORT G_M16506_IG22
						;; size=50 bbWeight=1.98 PerfScore 30.20
G_M16506_IG20:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rax rcx]
       lea      rcx, [rbp+08H]
       mov      edx, 62
       call     [hackishModuleName:hackishMethodName()]
       ; gcr arg pop 0
       jmp      SHORT G_M16506_IG22
						;; size=17 bbWeight=1.98 PerfScore 11.38
G_M16506_IG21:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       mov      r13d, dword ptr [rbp+10H]
       cmp      r13d, dword ptr [rbp+20H]
       jae      G_M16506_IG42
       lea      rax, bword ptr [rbp+18H]
       ; byrRegs +[rax]
       cmp      r13d, dword ptr [rax+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [rax]
       ; byrRegs +[rcx]
       mov      eax, r13d
       ; byrRegs -[rax]
       mov      word  ptr [rcx+2*rax], dx
       inc      r13d
       mov      dword ptr [rbp+10H], r13d
						;; size=45 bbWeight=1.98 PerfScore 25.74
G_M16506_IG22:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       ; byrRegs -[rcx]
       inc      r15d
       cmp      r15d, r14d
       jl       G_M16506_IG08
						;; size=12 bbWeight=3.96 PerfScore 5.94
G_M16506_IG23:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       jmp      G_M16506_IG36
						;; size=5 bbWeight=0.50 PerfScore 1.00
G_M16506_IG24:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      edx, r15d
       movzx    rdx, word  ptr [rsi+2*rdx+0CH]
       cmp      edx, 46
       je       SHORT G_M16506_IG26
						;; size=13 bbWeight=0.04 PerfScore 0.14
G_M16506_IG25:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       cmp      edx, 63
       je       G_M16506_IG32
       jmp      G_M16506_IG34
						;; size=14 bbWeight=0.02 PerfScore 0.07
G_M16506_IG26:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      ebx, 1
       test     r15d, r15d
       jle      SHORT G_M16506_IG27
       lea      ecx, [r14-01H]
       cmp      r15d, ecx
       jne      SHORT G_M16506_IG27
       lea      ecx, [r15-01H]
       cmp      ecx, edi
       jae      G_M16506_IG44
       lea      ecx, [r15-01H]
       cmp      word  ptr [rsi+2*rcx+0CH], 42
       jne      SHORT G_M16506_IG27
       mov      eax, dword ptr [rbp+10H]
       dec      eax
       lea      r12, bword ptr [rbp+18H]
       ; byrRegs +[r12]
       cmp      eax, dword ptr [r12+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [r12]
       ; byrRegs +[rcx]
       mov      edx, eax
       mov      word  ptr [rcx+2*rdx], 60
       jmp      G_M16506_IG35
						;; size=80 bbWeight=0.02 PerfScore 0.41
G_M16506_IG27:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rcx r12]
       lea      ecx, [r14-01H]
       cmp      r15d, ecx
       jge      SHORT G_M16506_IG30
       lea      ecx, [r15+01H]
       movzx    rcx, word  ptr [rsi+2*rcx+0CH]
       cmp      ecx, 63
       je       SHORT G_M16506_IG28
       cmp      ecx, 42
       jne      SHORT G_M16506_IG30
						;; size=28 bbWeight=0.02 PerfScore 0.14
G_M16506_IG28:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      r13d, dword ptr [rbp+10H]
       cmp      r13d, dword ptr [rbp+20H]
       jae      SHORT G_M16506_IG29
       lea      r8, bword ptr [rbp+18H]
       ; byrRegs +[r8]
       cmp      r13d, dword ptr [r8+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [r8]
       ; byrRegs +[rcx]
       mov      edx, r13d
       mov      word  ptr [rcx+2*rdx], 34
       lea      ecx, [r13+01H]
       ; byrRegs -[rcx]
       mov      dword ptr [rbp+10H], ecx
       jmp      G_M16506_IG35
						;; size=48 bbWeight=0.02 PerfScore 0.31
G_M16506_IG29:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       ; byrRegs -[r8]
       lea      rcx, [rbp+08H]
       mov      edx, 34
       call     [hackishModuleName:hackishMethodName()]
       ; gcr arg pop 0
       jmp      G_M16506_IG35
						;; size=20 bbWeight=0.02 PerfScore 0.12
G_M16506_IG30:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      r13d, dword ptr [rbp+10H]
       cmp      r13d, dword ptr [rbp+20H]
       jae      SHORT G_M16506_IG31
       lea      rax, bword ptr [rbp+18H]
       ; byrRegs +[rax]
       cmp      r13d, dword ptr [rax+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [rax]
       ; byrRegs +[rcx]
       mov      edx, r13d
       mov      word  ptr [rcx+2*rdx], 46
       lea      ecx, [r13+01H]
       ; byrRegs -[rcx]
       mov      dword ptr [rbp+10H], ecx
       jmp      G_M16506_IG35
						;; size=48 bbWeight=0.02 PerfScore 0.31
G_M16506_IG31:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rax]
       lea      rcx, [rbp+08H]
       mov      edx, 46
       call     [hackishModuleName:hackishMethodName()]
       ; gcr arg pop 0
       jmp      SHORT G_M16506_IG35
						;; size=17 bbWeight=0.02 PerfScore 0.12
G_M16506_IG32:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       mov      ebx, 1
       mov      r13d, dword ptr [rbp+10H]
       cmp      r13d, dword ptr [rbp+20H]
       jae      SHORT G_M16506_IG33
       lea      rax, bword ptr [rbp+18H]
       ; byrRegs +[rax]
       cmp      r13d, dword ptr [rax+08H]
       jae      G_M16506_IG44
       mov      rcx, bword ptr [rax]
       ; byrRegs +[rcx]
       mov      edx, r13d
       mov      word  ptr [rcx+2*rdx], 62
       lea      ecx, [r13+01H]
       ; byrRegs -[rcx]
       mov      dword ptr [rbp+10H], ecx
       jmp      SHORT G_M16506_IG35
						;; size=50 bbWeight=0.02 PerfScore 0.31
G_M16506_IG33:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       ; byrRegs -[rax]
       lea      rcx, [rbp+08H]
       mov      edx, 62
       call     [hackishModuleName:hackishMethodName()]
       ; gcr arg pop 0
       jmp      SHORT G_M16506_IG35
						;; size=17 bbWeight=0.02 PerfScore 0.12
G_M16506_IG34:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       mov      r13d, dword ptr [rbp+10H]
       cmp      r13d, dword ptr [rbp+20H]
       jae      G_M16506_IG43
       lea      rax, bword ptr [rbp+18H]
       ; byrRegs +[rax]
       cmp      r13d, dword ptr [rax+08H]
       jae      G_M16506_IG44
       mov      rax, bword ptr [rax]
       mov      ecx, r13d
       mov      word  ptr [rax+2*rcx], dx
       lea      eax, [r13+01H]
       ; byrRegs -[rax]
       mov      dword ptr [rbp+10H], eax
						;; size=45 bbWeight=0.02 PerfScore 0.27
G_M16506_IG35:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       inc      r15d
       cmp      r15d, r14d
       jl       G_M16506_IG24
						;; size=12 bbWeight=0.04 PerfScore 0.06
G_M16506_IG36:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
       test     ebx, ebx
       jne      SHORT G_M16506_IG39
       mov      rax, rsi
       ; gcrRegs +[rax]
       mov      rcx, 0xD1FFAB1E
       cmp      qword ptr [rbp], rcx
       je       SHORT G_M16506_IG37
       call     CORINFO_HELP_FAIL_FAST
       ; gcrRegs -[rax rsi]
       ; gcr arg pop 0
						;; size=28 bbWeight=0.50 PerfScore 2.88
G_M16506_IG37:        ; gcrefRegs=00000001 {rax}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rax]
       nop      
						;; size=1 bbWeight=0.50 PerfScore 0.12
G_M16506_IG38:        ; , epilog, nogc, extend
       lea      rsp, [rbp+28H]
       pop      rbx
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
						;; size=17 bbWeight=0.50 PerfScore 2.75
G_M16506_IG39:        ; gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, isz
       ; gcrRegs -[rax]
       lea      rcx, [rbp+08H]
       call     [ValueStringBuilder:ToString():String:this]
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rcx, 0xD1FFAB1E
       cmp      qword ptr [rbp], rcx
       je       SHORT G_M16506_IG40
       call     CORINFO_HELP_FAIL_FAST
       ; gcrRegs -[rax]
       ; gcr arg pop 0
						;; size=31 bbWeight=0.50 PerfScore 3.88
G_M16506_IG40:        ; gcrefRegs=00000001 {rax}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rax]
       nop      
						;; size=1 bbWeight=0.50 PerfScore 0.12
G_M16506_IG41:        ; , epilog, nogc, extend
       lea      rsp, [rbp+28H]
       pop      rbx
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
						;; size=17 bbWeight=0.50 PerfScore 2.75
G_M16506_IG42:        ; gcVars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rax] +[rsi]
       lea      rcx, [rbp+08H]
       call     [hackishModuleName:hackishMethodName()]
       ; gcr arg pop 0
       jmp      G_M16506_IG22
						;; size=15 bbWeight=0    PerfScore 0.00
G_M16506_IG43:        ; gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
       lea      rcx, [rbp+08H]
       call     [hackishModuleName:hackishMethodName()]
       ; gcr arg pop 0
       jmp      G_M16506_IG35
						;; size=15 bbWeight=0    PerfScore 0.00
G_M16506_IG44:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi]
       call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
       int3     
						;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 1161, prolog size 57, PerfScore 393.62, instruction count 318, allocated bytes for code 1163 (MethodHash=e2a8bf85) for method FileSystemName:TranslateWin32Expression(String):String


Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x15
  CountOfUnwindCodes: 10
  FrameRegister     : rbp (5)
  FrameOffset       : 2 * 16 = 0x20
  UnwindCodes       :
    CodeOffset: 0x15 UnwindOp: UWOP_SET_FPREG (3)       OpInfo: Unused (0)
    CodeOffset: 0x10 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 8 * 8 + 8 = 72 = 0x48
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x07 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x05 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)

; Assembly listing for method z
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; optimized using profile data
; rbp based frame
; partially interruptible
; with Static PGO: edge weights are invalid, and fgCalledCount is 927
; 16 inlinees with PGO data; 35 single block inlinees; 0 inlinees without PGO data
; Final local variable assignments
;
;  V00 arg0         [V00,T01] ( 14,  7.48)     ref  ->  rsi         class-hnd single-def
;  V01 arg1         [V01,T05] (  6,  3.76)   byref  ->  rbx         single-def
;  V02 arg2         [V02,T03] (  6,  4.14)     ref  ->  rdi         class-hnd single-def
;  V03 arg3         [V03,T09] (  3,  2   )     ref  ->  r14         class-hnd single-def
;  V04 loc0         [V04,T20] (  3,  2.14)     ref  ->  r14         class-hnd exact single-def
;  V05 loc1         [V05    ] ( 12,  5.75)     ref  ->  [rbp-40H]   do-not-enreg[X] must-init addr-exposed ld-addr-op class-hnd
;  V06 loc2         [V06,T14] (  4,  3.14)     ref  ->  rsi         class-hnd single-def
;  V07 loc3         [V07,T21] (  3,  1.90)     ref  ->  r15         class-hnd exact single-def
;  V08 loc4         [V08,T00] ( 15,  9.89)     int  ->  r12        
;  V09 loc5         [V09,T08] (  5,  4.16)     int  ->  r13        
;  V10 loc6         [V10,T04] ( 20,  5.96)     ref  ->  [rbp-60H]   class-hnd
;  V11 loc7         [V11,T13] (  6,  3.40)     ref  ->  [rbp-68H]   class-hnd
;  V12 loc8         [V12,T17] ( 26,  2.83)     ref  ->  [rbp-70H]   class-hnd
;  V13 OutArgs      [V13    ] (  1,  1   )  lclBlk (64) [rsp+00H]   "OutgoingArgSpace"
;  V14 tmp1         [V14,T02] ( 10,  7.07)     ref  ->  rsi         class-hnd single-def "impAppendStmt"
;  V15 tmp2         [V15,T44] (  2,  0   )     ref  ->  rbx         class-hnd single-def "non-inline candidate call"
;* V16 tmp3         [V16    ] (  0,  0   )     int  ->  zero-ref    "impAppendStmt"
;* V17 tmp4         [V17    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "NewObj constructor temp"
;  V18 tmp5         [V18,T07] ( 22,  5.25)     ref  ->  [rbp-78H]   "guarded devirt return temp"
;* V19 tmp6         [V19    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V20 tmp7         [V20,T22] (  8,  1.89)     ref  ->  r14         "guarded devirt return temp"
;  V21 tmp8         [V21,T06] (  5,  5.44)     ref  ->  rcx         single-def "guarded devirt this temp"
;* V22 tmp9         [V22    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;* V23 tmp10        [V23    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V24 tmp11        [V24,T36] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V25 tmp12        [V25,T31] (  3,  0.16)     ref  ->  rax         "guarded devirt return temp"
;* V26 tmp13        [V26    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact single-def "guarded devirt this exact temp"
;  V27 tmp14        [V27,T28] (  2,  0.30)     ref  ->   r8         class-hnd single-def "Inlining Arg"
;  V28 tmp15        [V28,T37] (  3,  0   )     ref  ->  rdi         class-hnd exact single-def "NewObj constructor temp"
;  V29 tmp16        [V29,T15] (  4,  2.27)     int  ->  rax         "guarded devirt return temp"
;* V30 tmp17        [V30    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V31 tmp18        [V31,T45] (  2,  0   )     ref  ->  r12         class-hnd "Inlining Arg"
;  V32 tmp19        [V32,T38] (  3,  0   )     ref  ->  r14         class-hnd exact "NewObj constructor temp"
;  V33 tmp20        [V33,T18] (  4,  1.31)    bool  ->  rax         "Inline return value spill temp"
;  V34 tmp21        [V34,T19] (  6,  2.25)    bool  ->  registers   "Inline return value spill temp"
;  V35 tmp22        [V35,T26] (  6,  0.38)     int  ->  rax         "guarded devirt return temp"
;* V36 tmp23        [V36    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V37 tmp24        [V37,T27] (  6,  0.38)     int  ->  rax         "guarded devirt return temp"
;* V38 tmp25        [V38    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V39 tmp26        [V39,T33] (  2,  0.00)     ref  ->  rsi         class-hnd "Inlining Arg"
;  V40 tmp27        [V40,T32] (  3,  0.01)     ref  ->  rdi         class-hnd exact "NewObj constructor temp"
;  V41 tmp28        [V41    ] (  2,  1.15)     int  ->  [rbp-48H]   do-not-enreg[X] addr-exposed ld-addr-op "Inline ldloca(s) first use temp"
;  V42 tmp29        [V42,T46] (  2,  0   )     ref  ->  rbx         class-hnd "Inlining Arg"
;  V43 tmp30        [V43,T39] (  3,  0   )     ref  ->  rsi         class-hnd exact "NewObj constructor temp"
;  V44 tmp31        [V44,T40] (  3,  0   )     ref  ->  rdi         class-hnd exact single-def "NewObj constructor temp"
;  V45 tmp32        [V45,T24] (  2,  0.88)    bool  ->  rax         "Inline return value spill temp"
;  V46 tmp33        [V46,T25] (  3,  1.51)    bool  ->  rax         "Inline return value spill temp"
;  V47 tmp34        [V47,T29] (  3,  0.26)     int  ->  rax         "guarded devirt return temp"
;* V48 tmp35        [V48    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;  V49 tmp36        [V49,T30] (  3,  0.26)     int  ->  rax         "guarded devirt return temp"
;* V50 tmp37        [V50    ] (  0,  0   )     ref  ->  zero-ref    class-hnd exact "guarded devirt this exact temp"
;* V51 tmp38        [V51    ] (  0,  0   )     ref  ->  zero-ref    class-hnd "Inlining Arg"
;  V52 tmp39        [V52,T47] (  2,  0   )     ref  ->  r15         class-hnd single-def "Inlining Arg"
;  V53 tmp40        [V53,T41] (  3,  0   )     ref  ->  r12         class-hnd exact single-def "NewObj constructor temp"
;  V54 tmp41        [V54,T10] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V55 tmp42        [V55,T48] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V56 tmp43        [V56,T49] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V57 tmp44        [V57,T42] (  3,  0   )     ref  ->  rax         "argument with side effect"
;  V58 tmp45        [V58,T50] (  2,  0   )     ref  ->  rcx         "argument with side effect"
;  V59 tmp46        [V59,T51] (  2,  0   )     ref  ->  rdx         "argument with side effect"
;  V60 tmp47        [V60,T34] (  2,  0.00)     ref  ->  rcx         "argument with side effect"
;  V61 tmp48        [V61,T35] (  2,  0.00)     ref  ->  rdx         "argument with side effect"
;  V62 tmp49        [V62,T52] (  2,  0   )     ref  ->  rcx         "argument with side effect"
;  V63 tmp50        [V63,T53] (  2,  0   )     ref  ->  rcx         "argument with side effect"
;  V64 tmp51        [V64,T54] (  2,  0   )     ref  ->  rdx         "argument with side effect"
;  V65 tmp52        [V65,T55] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V66 tmp53        [V66,T23] (  3,  1.81)     ref  ->  rcx         single-def "argument with side effect"
;  V67 tmp54        [V67,T56] (  2,  0.00)     ref  ->  rcx         single-def "argument with side effect"
;  V68 tmp55        [V68,T43] (  3,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V69 tmp56        [V69,T57] (  2,  0   )     ref  ->  rcx         single-def "argument with side effect"
;  V70 tmp57        [V70,T58] (  2,  0   )     ref  ->  rdx         single-def "argument with side effect"
;  V71 cse0         [V71,T16] (  3,  3.01)     ref  ->  r15         "CSE - moderate"
;  V72 cse1         [V72,T11] (  5,  3.63)    long  ->  [rbp-50H]   spill-single-def "CSE - moderate"
;  V73 cse2         [V73,T12] (  5,  3.52)     int  ->  [rbp-54H]   "CSE - moderate"
;
; Lcl frame size = 136

G_M51743_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     rbp
       push     r15
       push     r14
       push     r13
       push     r12
       push     rdi
       push     rsi
       push     rbx
       sub      rsp, 136
       lea      rbp, [rsp+C0H]
       xor      eax, eax
       mov      qword ptr [rbp-40H], rax
       mov      rsi, rcx
       ; gcrRegs +[rsi]
       mov      rbx, rdx
       ; byrRegs +[rbx]
       mov      rdi, r8
       ; gcrRegs +[rdi]
       mov      r14, r9
       ; gcrRegs +[r14]
						;; size=45 bbWeight=1    PerfScore 11.00
G_M51743_IG02:        ; gcrefRegs=000040C0 {rsi rdi r14}, byrefRegs=00000008 {rbx}, byref
       test     rsi, rsi
       je       G_M51743_IG62
       mov      rcx, gword ptr [rbx]
       ; gcrRegs +[rcx]
       mov      rdx, 0xD1FFAB1E      ; string handle
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      r8d, -1
       call     [ExpressionUtils:RequiresCanRead(Expression,String,int)]
       ; gcrRegs -[rcx rdx]
       mov      rcx, 0xD1FFAB1E      ; hackishClassName
       call     CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPE
       ; gcrRegs +[rax]
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     [RuntimeType:IsAssignableFrom(Type):bool:this]
       ; gcrRegs -[rax rcx rdx]
       test     eax, eax
       je       G_M51743_IG63
						;; size=75 bbWeight=1    PerfScore 15.00
G_M51743_IG03:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       cmp      r15, rsi
       je       G_M51743_IG63
						;; size=9 bbWeight=1.01 PerfScore 1.26
G_M51743_IG04:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r14-r15]
       mov      rdx, 0xD1FFAB1E      ; string handle
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      r8d, -1
       call     [TypeUtils:ValidateType(Type,String,int):bool]
       ; gcrRegs -[rcx rdx]
       mov      r8, 0xD1FFAB1E      ; const ptr
       mov      r14, gword ptr [r8]
       ; gcrRegs +[r14]
       lea      r8, [rbp-40H]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     [CacheDict`2:TryGetValue(__Canon,byref):bool:this]
       ; gcrRegs -[rcx rdx]
       test     eax, eax
       je       G_M51743_IG13
						;; size=65 bbWeight=1.03 PerfScore 13.69
G_M51743_IG05:        ; gcrefRegs=00000080 {rdi}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rsi r14]
       mov      rcx, gword ptr [rbp-40H]
       ; gcrRegs +[rcx]
       call     [TypeExtensions:GetParametersCached(MethodBase):ref]
       ; gcrRegs -[rcx] +[rax]
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      r14d, dword ptr [rsi+08H]
       test     r14d, r14d
       je       G_M51743_IG49
						;; size=26 bbWeight=1.00 PerfScore 7.51
G_M51743_IG06:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       cmp      eax, r14d
       jne      G_M51743_IG64
						;; size=26 bbWeight=0.76 PerfScore 4.92
G_M51743_IG07:        ; gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, 0xD1FFAB1E      ; HashSet`1
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       mov      r15, rax
       ; gcrRegs +[r15]
       xor      r12d, r12d
       mov      r13d, r14d
       test     r13d, r13d
       jle      G_M51743_IG24
       test     r13d, r13d
       jl       G_M51743_IG43
						;; size=42 bbWeight=0.75 PerfScore 3.38
G_M51743_IG08:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      edx, r12d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName(int):__Canon:this
       ; gcrRegs -[rcx] +[rax]
       mov      r14, rax
       ; gcrRegs +[r14]
       mov      edx, r12d
       mov      rax, gword ptr [rsi+8*rdx+10H]
       mov      gword ptr [rbp-68H], rax
       ; GC ptr vars +{V11}
       mov      rdx, 0xD1FFAB1E      ; string handle
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      r8d, r12d
       call     [ExpressionUtils:RequiresCanRead(Expression,String,int)]
       ; gcrRegs -[rax rcx rdx]
       mov      rcx, gword ptr [rbp-68H]
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       ; GC ptr vars -{V11}
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       mov      gword ptr [rbp-70H], rax
       ; GC ptr vars +{V12}
       mov      rdx, qword ptr [r14]
       mov      qword ptr [rbp-50H], rdx
       mov      rcx, 0xD1FFAB1E      ; ParameterExpression
       cmp      rdx, rcx
       jne      G_M51743_IG22
						;; size=104 bbWeight=1.12 PerfScore 31.74
G_M51743_IG09:        ; gcVars=0000000000020000 {V12}, gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs -[rax]
       mov      rcx, 0xD1FFAB1E      ; Object
       call     CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPE
       ; gcrRegs +[rax]
						;; size=15 bbWeight=0.86 PerfScore 1.07
G_M51743_IG10:        ; gcrefRegs=0000C0C1 {rax rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       test     rax, rax
       je       G_M51743_IG66
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rbp-70H]
       ; gcrRegs +[rdx]
       mov      gword ptr [rbp-78H], rax
       ; GC ptr vars +{V18}
       mov      r8, qword ptr [rax]
       mov      r8, qword ptr [r8+98H]
       call     [r8+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx rdx]
						;; size=34 bbWeight=1.11 PerfScore 11.67
G_M51743_IG11:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51743_IG19
						;; size=8 bbWeight=1.11 PerfScore 1.39
G_M51743_IG12:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       mov      r8, 0xD1FFAB1E      ; RuntimeType
       mov      r9, gword ptr [rbp-78H]
       ; gcrRegs +[r9]
       cmp      qword ptr [r9], r8
       jne      G_M51743_IG67
       jmp      G_M51743_IG27
						;; size=28 bbWeight=0.19 PerfScore 1.36
G_M51743_IG13:        ; gcVars=0000000000000000 {}, gcrefRegs=000040C0 {rsi rdi r14}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; gcrRegs -[r9 r15]
       ; GC ptr vars -{V12 V18}
       mov      rdx, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rsi], rdx
       jne      SHORT G_M51743_IG18
						;; size=15 bbWeight=0.08 PerfScore 0.33
G_M51743_IG14:        ; gcrefRegs=000040C0 {rsi rdi r14}, byrefRegs=00000008 {rbx}, byref
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       mov      gword ptr [rsp+20H], rdx
       mov      dword ptr [rsp+28H], 3
       mov      gword ptr [rsp+30H], rdx
       mov      gword ptr [rsp+38H], rdx
       mov      rdx, 0xD1FFAB1E      ; string handle
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      r8d, -1
       mov      r9d, 52
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx] +[rax]
						;; size=59 bbWeight=0.06 PerfScore 0.65
G_M51743_IG15:        ; gcrefRegs=000040C1 {rax rsi rdi r14}, byrefRegs=00000008 {rbx}, byref
       mov      gword ptr [rbp-40H], rax
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+50H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       test     eax, eax
       jne      G_M51743_IG05
						;; size=24 bbWeight=0.08 PerfScore 0.75
G_M51743_IG16:        ; gcrefRegs=000040C0 {rsi rdi r14}, byrefRegs=00000008 {rbx}, byref
       mov      r8, gword ptr [rbp-40H]
       ; gcrRegs +[r8]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       call     [CacheDict`2:Add(__Canon,__Canon):this]
       ; gcrRegs -[rcx rdx rsi r8 r14]
       jmp      G_M51743_IG05
						;; size=21 bbWeight=0.08 PerfScore 0.49
G_M51743_IG17:        ; gcVars=0000000000020000 {V12}, gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; gcrRegs +[rsi r14-r15]
       ; GC ptr vars +{V12}
       test     eax, eax
       je       G_M51743_IG59
       jmp      SHORT G_M51743_IG19
						;; size=10 bbWeight=1.11 PerfScore 3.61
G_M51743_IG18:        ; gcVars=0000000000000000 {}, gcrefRegs=000040C0 {rsi rdi r14}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; gcrRegs -[r15]
       ; GC ptr vars -{V12}
       mov      dword ptr [rsp+20H], 3
       xor      rdx, rdx
       ; gcrRegs +[rdx]
       mov      gword ptr [rsp+28H], rdx
       mov      gword ptr [rsp+30H], rdx
       mov      rdx, 0xD1FFAB1E      ; string handle
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      r8d, 52
       xor      r9, r9
       ; gcrRegs +[r9]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+88H]
       call     [rax]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r9] +[rax]
       jmp      SHORT G_M51743_IG15
						;; size=59 bbWeight=0.02 PerfScore 0.24
G_M51743_IG19:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax] +[r15]
       lea      r8, [rbp-48H]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rdx, r14
       ; gcrRegs +[rdx]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx]
       test     eax, eax
       je       G_M51743_IG75
						;; size=24 bbWeight=1.13 PerfScore 5.95
G_M51743_IG20:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r14]
       inc      r12d
       cmp      r12d, r13d
       jl       G_M51743_IG08
						;; size=12 bbWeight=1.89 PerfScore 2.83
G_M51743_IG21:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs -[rsi rdi r15]
       jmp      SHORT G_M51743_IG24
						;; size=2 bbWeight=0.75 PerfScore 1.50
G_M51743_IG22:        ; gcVars=0000000000020000 {V12}, gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs +[rsi rdi r14-r15]
       ; GC ptr vars +{V12}
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      r8, qword ptr [rdx+48H]
       call     [r8+10H]ParameterExpression:GetIsByRef():bool:this
       ; gcrRegs -[rcx]
       test     eax, eax
       jne      G_M51743_IG65
						;; size=19 bbWeight=1.12 PerfScore 7.30
G_M51743_IG23:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rdx, qword ptr [rbp-50H]
       mov      rax, qword ptr [rdx+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       jmp      G_M51743_IG10
						;; size=19 bbWeight=0.26 PerfScore 2.11
G_M51743_IG24:        ; gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs -[rax rsi rdi r14-r15]
       ; GC ptr vars -{V12}
       mov      rcx, gword ptr [rbp-40H]
       ; gcrRegs +[rcx]
       mov      rax, gword ptr [rbp-40H]
       ; gcrRegs +[rax]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+60H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      rcx, 0xD1FFAB1E      ; hackishClassName
       call     CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPE
       cmp      rsi, rax
       je       G_M51743_IG31
						;; size=45 bbWeight=1.03 PerfScore 12.05
G_M51743_IG25:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax rsi]
       mov      rcx, gword ptr [rbp-40H]
       ; gcrRegs +[rcx]
       mov      rax, gword ptr [rbp-40H]
       ; gcrRegs +[rax]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+60H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      rcx, gword ptr [rbx]
       ; gcrRegs +[rcx]
       mov      rax, 0xD1FFAB1E      ; PropertyExpression
       ; gcrRegs -[rax]
       cmp      qword ptr [rcx], rax
       jne      G_M51743_IG38
						;; size=43 bbWeight=0.76 PerfScore 11.72
G_M51743_IG26:        ; gcrefRegs=00000042 {rcx rsi}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, gword ptr [rcx+10H]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+50H]
       call     [rax+10H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       mov      r14, rax
       ; gcrRegs +[r14]
       jmp      G_M51743_IG39
						;; size=22 bbWeight=0.30 PerfScore 3.40
G_M51743_IG27:        ; gcVars=0000000000020000 {V12}, gcrefRegs=0000C2C0 {rsi rdi r9 r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs -[rax] +[rdi r9 r15]
       ; GC ptr vars +{V12}
       mov      gword ptr [rbp-78H], r9
       ; GC ptr vars +{V18}
       mov      rcx, r9
       ; gcrRegs +[rcx]
       call     [RuntimeType:IsValueTypeImpl():bool:this]
       ; gcrRegs -[rcx r9]
						;; size=13 bbWeight=0.19 PerfScore 0.80
G_M51743_IG28:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51743_IG59
       mov      rcx, 0xD1FFAB1E      ; RuntimeType
       mov      rdx, gword ptr [rbp-70H]
       ; gcrRegs +[rdx]
       cmp      qword ptr [rdx], rcx
       jne      G_M51743_IG68
       mov      gword ptr [rbp-70H], rdx
       mov      rcx, rdx
       ; gcrRegs +[rcx]
       call     [RuntimeType:IsValueTypeImpl():bool:this]
       ; gcrRegs -[rcx rdx]
						;; size=44 bbWeight=0.19 PerfScore 2.02
G_M51743_IG29:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51743_IG59
						;; size=8 bbWeight=0.19 PerfScore 0.23
G_M51743_IG30:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, gword ptr [rbp-78H]
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rbp-70H]
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+A8H]
       ; GC ptr vars -{V18}
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       jmp      G_M51743_IG17
						;; size=26 bbWeight=0.19 PerfScore 2.05
G_M51743_IG31:        ; gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, epilog, nogc
       ; gcrRegs -[rsi rdi r14-r15]
       ; byrRegs -[rbx]
       ; GC ptr vars -{V12}
       add      rsp, 136
       pop      rbx
       pop      rsi
       pop      rdi
       pop      r12
       pop      r13
       pop      r14
       pop      r15
       pop      rbp
       ret      
						;; size=20 bbWeight=1.01 PerfScore 5.29
G_M51743_IG32:        ; gcVars=0000000000020000 {V12}, gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs +[rsi rdi r14-r15]
       ; byrRegs +[rbx]
       ; GC ptr vars +{V12}
       test     eax, eax
       je       G_M51743_IG59
						;; size=8 bbWeight=0.01 PerfScore 0.01
G_M51743_IG33:        ; gcVars=0000000000000000 {}, gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; GC ptr vars -{V12}
       mov      gword ptr [rbp-60H], r14
       ; GC ptr vars +{V10}
       mov      r14d, dword ptr [rbp-54H]
       ; gcrRegs -[r14]
						;; size=8 bbWeight=0.01 PerfScore 0.01
G_M51743_IG34:        ; gcVars=0000000000000010 {V10}, gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       lea      r8, [rbp-48H]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rbp-60H]
       ; gcrRegs +[rdx]
       call     [hackishModuleName:hackishMethodName()]
       ; gcrRegs -[rcx rdx]
       test     eax, eax
       je       SHORT G_M51743_IG37
						;; size=21 bbWeight=0.01 PerfScore 0.07
G_M51743_IG35:        ; gcVars=0000000000000000 {}, gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; GC ptr vars -{V10}
       inc      r12d
       cmp      r12d, r13d
       jl       SHORT G_M51743_IG43
						;; size=8 bbWeight=0.02 PerfScore 0.03
G_M51743_IG36:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rsi rdi r15]
       jmp      G_M51743_IG24
						;; size=5 bbWeight=0.77 PerfScore 1.54
G_M51743_IG37:        ; gcVars=0000000000000010 {V10}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       ; byrRegs -[rbx]
       ; GC ptr vars +{V04 V10}
       mov      r14, gword ptr [rbp-60H]
       ; gcrRegs +[r14]
       jmp      G_M51743_IG75
						;; size=9 bbWeight=0.01 PerfScore 0.02
G_M51743_IG38:        ; gcVars=0000000000000000 {}, gcrefRegs=00000042 {rcx rsi}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs -[r14] +[rcx rsi]
       ; byrRegs +[rbx]
       ; GC ptr vars -{V04 V10}
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       mov      r14, rax
       ; gcrRegs +[r14]
						;; size=13 bbWeight=0.45 PerfScore 3.29
G_M51743_IG39:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rax]
       test     rsi, rsi
       je       G_M51743_IG77
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r14
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+98H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
						;; size=28 bbWeight=0.76 PerfScore 6.62
G_M51743_IG40:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref, isz
       test     eax, eax
       jne      SHORT G_M51743_IG31
						;; size=4 bbWeight=0.76 PerfScore 0.95
G_M51743_IG41:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [rsi], rcx
       jne      G_M51743_IG78
       jmp      G_M51743_IG51
						;; size=24 bbWeight=0.13 PerfScore 0.80
G_M51743_IG42:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rsi r14]
       test     eax, eax
       je       G_M51743_IG60
       jmp      G_M51743_IG31
						;; size=13 bbWeight=0.76 PerfScore 2.46
G_M51743_IG43:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, byref, isz
       ; gcrRegs +[rsi rdi r15]
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      edx, r12d
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName(int):__Canon:this
       ; gcrRegs -[rcx] +[rax]
       cmp      r12d, r14d
       jae      G_M51743_IG80
       mov      edx, r12d
       mov      rcx, gword ptr [rsi+8*rdx+10H]
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-68H], rcx
       ; GC ptr vars +{V11}
       mov      rdx, 0xD1FFAB1E      ; string handle
       mov      rdx, gword ptr [rdx]
       ; gcrRegs +[rdx]
       mov      gword ptr [rbp-60H], rax
       ; GC ptr vars +{V10}
       mov      rcx, rax
       mov      r8d, r12d
       call     [ExpressionUtils:RequiresCanRead(Expression,String,int)]
       ; gcrRegs -[rax rcx rdx]
       mov      rcx, gword ptr [rbp-68H]
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       ; GC ptr vars -{V11}
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       mov      gword ptr [rbp-70H], rax
       ; GC ptr vars +{V12}
       mov      rcx, 0xD1FFAB1E      ; ParameterExpression
       mov      rdx, gword ptr [rbp-60H]
       ; gcrRegs +[rdx]
       cmp      qword ptr [rdx], rcx
       je       SHORT G_M51743_IG48
       mov      rcx, rdx
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-60H], rdx
       mov      r8, qword ptr [rdx]
       mov      r8, qword ptr [r8+48H]
       call     [r8+10H]ParameterExpression:GetIsByRef():bool:this
       ; gcrRegs -[rax rcx rdx]
       test     eax, eax
       jne      G_M51743_IG70
						;; size=133 bbWeight=0.01 PerfScore 0.46
G_M51743_IG44:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, gword ptr [rbp-60H]
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-60H], rcx
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
						;; size=18 bbWeight=0.00 PerfScore 0.02
G_M51743_IG45:        ; gcrefRegs=000080C1 {rax rsi rdi r15}, byrefRegs=00000008 {rbx}, byref
       test     rax, rax
       je       G_M51743_IG72
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rbp-70H]
       ; gcrRegs +[rdx]
       mov      gword ptr [rbp-78H], rax
       ; GC ptr vars +{V18}
       mov      r8, qword ptr [rax]
       mov      r8, qword ptr [r8+98H]
       call     [r8+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rax rcx rdx]
						;; size=34 bbWeight=0.01 PerfScore 0.12
G_M51743_IG46:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51743_IG34
						;; size=8 bbWeight=0.01 PerfScore 0.01
G_M51743_IG47:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, byref
       mov      r8, 0xD1FFAB1E      ; RuntimeType
       mov      r9, gword ptr [rbp-78H]
       ; gcrRegs +[r9]
       cmp      qword ptr [r9], r8
       jne      G_M51743_IG73
       jmp      G_M51743_IG55
						;; size=28 bbWeight=0.00 PerfScore 0.01
G_M51743_IG48:        ; gcVars=0000000000020000 {V12}, gcrefRegs=000080C4 {rdx rsi rdi r15}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; gcrRegs -[r9] +[rdx]
       ; GC ptr vars -{V10 V18}
       mov      gword ptr [rbp-60H], rdx
       ; GC ptr vars +{V10}
       jmp      SHORT G_M51743_IG50
						;; size=6 bbWeight=0.01 PerfScore 0.02
G_M51743_IG49:        ; gcVars=0000000000000000 {}, gcrefRegs=00000080 {rdi}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs -[rdx rsi r15]
       ; GC ptr vars -{V10 V12}
       mov      rcx, gword ptr [rdi+08H]
       ; gcrRegs +[rcx]
       mov      r11, 0xD1FFAB1E      ; code for hackishModuleName:hackishMethodName
       call     [r11]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdi]
       test     eax, eax
       jg       G_M51743_IG76
       jmp      G_M51743_IG24
						;; size=30 bbWeight=0.25 PerfScore 2.15
G_M51743_IG50:        ; gcVars=0000000000020010 {V10 V12}, gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; gcrRegs +[rsi rdi r15]
       ; GC ptr vars +{V04 V10 V12}
       mov      rcx, 0xD1FFAB1E      ; Object
       call     CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPE
       ; gcrRegs +[rax]
       jmp      SHORT G_M51743_IG45
						;; size=17 bbWeight=0.01 PerfScore 0.03
G_M51743_IG51:        ; gcVars=0000000000000000 {}, gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs -[rax rdi r15] +[r14]
       ; GC ptr vars -{V04 V10 V12}
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       cmp      dword ptr [rcx], ecx
       call     [RuntimeType:IsValueTypeImpl():bool:this]
       ; gcrRegs -[rcx]
						;; size=11 bbWeight=0.13 PerfScore 0.80
G_M51743_IG52:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51743_IG60
       mov      rcx, 0xD1FFAB1E      ; RuntimeType
       cmp      qword ptr [r14], rcx
       jne      G_M51743_IG79
       mov      rcx, r14
       ; gcrRegs +[rcx]
       cmp      dword ptr [rcx], ecx
       call     [RuntimeType:IsValueTypeImpl():bool:this]
       ; gcrRegs -[rcx]
						;; size=38 bbWeight=0.13 PerfScore 1.50
G_M51743_IG53:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       test     eax, eax
       jne      G_M51743_IG60
						;; size=8 bbWeight=0.13 PerfScore 0.16
G_M51743_IG54:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rdx, r14
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+A8H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx rsi r14]
       jmp      G_M51743_IG42
						;; size=24 bbWeight=0.13 PerfScore 1.21
G_M51743_IG55:        ; gcVars=0000000000020010 {V10 V12}, gcrefRegs=000082C0 {rsi rdi r9 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs +[rsi rdi r9 r15]
       ; GC ptr vars +{V04 V10 V12}
       mov      gword ptr [rbp-78H], r9
       ; GC ptr vars +{V18}
       mov      rcx, r9
       ; gcrRegs +[rcx]
       ; GC ptr vars -{V04}
       call     [RuntimeType:IsValueTypeImpl():bool:this]
       ; gcrRegs -[rcx r9]
						;; size=13 bbWeight=0.00 PerfScore 0.01
G_M51743_IG56:        ; gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, byref, isz
       test     eax, eax
       mov      dword ptr [rbp-54H], r14d
       mov      r14, gword ptr [rbp-60H]
       ; gcrRegs +[r14]
       jne      SHORT G_M51743_IG59
       mov      rcx, 0xD1FFAB1E      ; RuntimeType
       mov      r9, gword ptr [rbp-70H]
       ; gcrRegs +[r9]
       cmp      qword ptr [r9], rcx
       jne      G_M51743_IG74
       mov      gword ptr [rbp-70H], r9
       mov      rcx, r9
       ; gcrRegs +[rcx]
       ; GC ptr vars -{V10}
       call     [RuntimeType:IsValueTypeImpl():bool:this]
       ; gcrRegs -[rcx r9]
						;; size=48 bbWeight=0.00 PerfScore 0.02
G_M51743_IG57:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref, isz
       test     eax, eax
       jne      SHORT G_M51743_IG59
						;; size=4 bbWeight=0.00 PerfScore 0.00
G_M51743_IG58:        ; gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, byref
       mov      r8, gword ptr [rbp-78H]
       ; gcrRegs +[r8]
       mov      rcx, r8
       ; gcrRegs +[rcx]
       mov      rdx, gword ptr [rbp-70H]
       ; gcrRegs +[rdx]
       mov      rax, qword ptr [r8]
       mov      rax, qword ptr [rax+A8H]
       ; GC ptr vars -{V18}
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx r8]
       jmp      G_M51743_IG32
						;; size=29 bbWeight=0.00 PerfScore 0.02
G_M51743_IG59:        ; gcrefRegs=00004000 {r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi rdi r15]
       ; byrRegs -[rbx]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r14]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx r14] +[rax]
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0x12FB
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, rsi
       ; gcrRegs +[rdx]
       mov      r8, gword ptr [rbp-70H]
       ; gcrRegs +[r8]
       ; GC ptr vars -{V12}
       call     [SR:Format(String,Object,Object):String]
       ; gcrRegs -[rcx rdx rsi r8]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rdi]
						;; size=99 bbWeight=0.00 PerfScore 0.02
G_M51743_IG60:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref
       ; byrRegs +[rbx]
       mov      rcx, gword ptr [rbp-40H]
       ; gcrRegs +[rcx]
       mov      rax, gword ptr [rbp-40H]
       ; gcrRegs +[rax]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+60H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; byrRegs +[rdx]
       call     [ExpressionUtils:TryQuote(Type,byref):bool]
       ; gcrRegs -[rax rcx]
       ; byrRegs -[rdx]
       test     eax, eax
       jne      G_M51743_IG31
						;; size=38 bbWeight=0.00 PerfScore 0.01
G_M51743_IG61:        ; gcrefRegs=00000000 {}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, gword ptr [rbx]
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       ; byrRegs -[rbx]
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      rcx, gword ptr [rbp-40H]
       ; gcrRegs +[rcx]
       mov      rax, gword ptr [rbp-40H]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+60H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       mov      r12, rax
       ; gcrRegs +[r12]
       mov      ecx, 0xDF1
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, rbx
       ; gcrRegs +[rdx]
       mov      r8, r15
       ; gcrRegs +[r8]
       call     [SR:Format(String,Object,Object):String]
       ; gcrRegs -[rcx rdx rbx r8 r15]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       mov      rcx, r12
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx r12]
						;; size=119 bbWeight=0    PerfScore 0.00
G_M51743_IG62:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      ecx, 0x264F
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcrRegs +[rax]
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [ArgumentNullException:Throw(String)]
       ; gcrRegs -[rax rcx]
       int3     
						;; size=30 bbWeight=0    PerfScore 0.00
G_M51743_IG63:        ; gcrefRegs=00004000 {r14}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[r14]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x10C3
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      r8, r14
       ; gcrRegs +[r8]
       call     [ArgumentException:.ctor(String,String):this]
       ; gcrRegs -[rax rcx rdx r8 r14]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
						;; size=70 bbWeight=0    PerfScore 0.00
G_M51743_IG64:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0xFC7
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rdi]
						;; size=67 bbWeight=0    PerfScore 0.00
G_M51743_IG65:        ; gcVars=0000000000020000 {V12}, gcrefRegs=0000C0C0 {rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; gcrRegs +[rsi rdi r14-r15]
       ; byrRegs +[rbx]
       ; GC ptr vars +{V12}
       mov      rcx, gword ptr [rbp-70H]
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-70H], rcx
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+58H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       test     eax, eax
       je       SHORT G_M51743_IG69
       mov      rcx, gword ptr [rbp-70H]
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+60H]
       ; GC ptr vars -{V12}
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       mov      rcx, 0xD1FFAB1E      ; ParameterExpression
       mov      rdx, qword ptr [rbp-50H]
       cmp      rdx, rcx
       mov      gword ptr [rbp-70H], rax
       ; GC ptr vars +{V12}
       jne      G_M51743_IG23
       jmp      G_M51743_IG09
						;; size=68 bbWeight=0    PerfScore 0.00
G_M51743_IG66:        ; gcVars=0000000000020000 {V12}, gcrefRegs=0000C0C1 {rax rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       xor      ecx, ecx
       mov      gword ptr [rbp-78H], rax
       ; GC ptr vars +{V18}
       mov      eax, ecx
       ; gcrRegs -[rax]
       jmp      G_M51743_IG11
						;; size=13 bbWeight=0    PerfScore 0.00
G_M51743_IG67:        ; gcrefRegs=0000C2C0 {rsi rdi r9 r14 r15}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[r9]
       ; GC ptr vars -{V18}
       mov      rcx, r9
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-78H], r9
       ; GC ptr vars +{V18}
       mov      rax, qword ptr [r9]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r9]
       jmp      G_M51743_IG28
						;; size=22 bbWeight=0    PerfScore 0.00
G_M51743_IG68:        ; gcVars=0000000000000080 {V18}, gcrefRegs=0000C0C4 {rdx rsi rdi r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs +[rdx]
       ; GC ptr vars -{V12}
       mov      rcx, rdx
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-70H], rdx
       ; GC ptr vars +{V12}
       mov      rax, qword ptr [rdx]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx rdx]
       jmp      G_M51743_IG29
						;; size=22 bbWeight=0    PerfScore 0.00
G_M51743_IG69:        ; gcVars=0000000000020000 {V12}, gcrefRegs=00004000 {r14}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rsi rdi r15]
       ; byrRegs -[rbx]
       ; GC ptr vars -{V18}
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r14]
       mov      rax, qword ptr [rax+40H]
       call     [rax+28H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx r14] +[rax]
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rax]
       ; gcrRegs -[rax]
       mov      rax, qword ptr [rax+A0H]
       call     [rax+08H]hackishModuleName:hackishMethodName():Type:this
       ; gcrRegs -[rcx] +[rax]
       mov      r12, rax
       ; gcrRegs +[r12]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       mov      r14, rax
       ; gcrRegs +[r14]
       mov      ecx, 0x12FB
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, r12
       ; gcrRegs +[rdx]
       mov      r8, gword ptr [rbp-70H]
       ; gcrRegs +[r8]
       ; GC ptr vars -{V12}
       call     [SR:Format(String,Object,Object):String]
       ; gcrRegs -[rcx rdx r8 r12]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       mov      rcx, r14
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx r14]
						;; size=115 bbWeight=0    PerfScore 0.00
G_M51743_IG70:        ; gcVars=0000000000020010 {V10 V12}, gcrefRegs=000080C0 {rsi rdi r15}, byrefRegs=00000008 {rbx}, gcvars, byref, isz
       ; gcrRegs +[rsi rdi r15]
       ; byrRegs +[rbx]
       ; GC ptr vars +{V04 V10 V12}
       mov      rcx, gword ptr [rbp-70H]
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-70H], rcx
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+58H]
       call     [rax+18H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       test     eax, eax
       je       SHORT G_M51743_IG71
       mov      rcx, gword ptr [rbp-70H]
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rcx]
       mov      rax, qword ptr [rax+60H]
       ; GC ptr vars -{V04 V12}
       call     [rax+38H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx] +[rax]
       mov      rcx, 0xD1FFAB1E      ; ParameterExpression
       mov      rdx, gword ptr [rbp-60H]
       ; gcrRegs +[rdx]
       cmp      qword ptr [rdx], rcx
       mov      gword ptr [rbp-70H], rax
       ; GC ptr vars +{V12}
       jne      G_M51743_IG44
       jmp      G_M51743_IG50
						;; size=68 bbWeight=0    PerfScore 0.00
G_M51743_IG71:        ; gcVars=0000000000020010 {V10 V12}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rax rdx rsi rdi r15]
       ; byrRegs -[rbx]
       mov      r14, gword ptr [rbp-60H]
       ; gcrRegs +[r14]
       jmp      G_M51743_IG69
						;; size=9 bbWeight=0    PerfScore 0.00
G_M51743_IG72:        ; gcrefRegs=000080C1 {rax rsi rdi r15}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[r14] +[rax rsi rdi r15]
       ; byrRegs +[rbx]
       mov      rdx, gword ptr [rbp-60H]
       ; gcrRegs +[rdx]
       xor      ecx, ecx
       mov      gword ptr [rbp-60H], rdx
       mov      gword ptr [rbp-78H], rax
       ; GC ptr vars +{V18}
       mov      eax, ecx
       ; gcrRegs -[rax]
       jmp      G_M51743_IG46
						;; size=21 bbWeight=0    PerfScore 0.00
G_M51743_IG73:        ; gcrefRegs=000082C0 {rsi rdi r9 r15}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs -[rdx] +[r9]
       ; GC ptr vars -{V18}
       mov      rcx, r9
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-78H], r9
       ; GC ptr vars +{V18}
       mov      rax, qword ptr [r9]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r9]
       jmp      G_M51743_IG56
						;; size=22 bbWeight=0    PerfScore 0.00
G_M51743_IG74:        ; gcVars=0000000000000080 {V18}, gcrefRegs=0000C2C0 {rsi rdi r9 r14 r15}, byrefRegs=00000008 {rbx}, gcvars, byref
       ; gcrRegs +[r9 r14]
       ; GC ptr vars -{V10 V12}
       mov      rcx, r9
       ; gcrRegs +[rcx]
       mov      gword ptr [rbp-70H], r9
       ; GC ptr vars +{V12}
       mov      rax, qword ptr [r9]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx r9]
       jmp      G_M51743_IG57
						;; size=22 bbWeight=0    PerfScore 0.00
G_M51743_IG75:        ; gcVars=0000000000000000 {}, gcrefRegs=00004000 {r14}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rsi rdi r15]
       ; byrRegs -[rbx]
       ; GC ptr vars -{V12 V18}
       mov      ecx, 0x3161
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcrRegs +[rax]
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      edx, r12d
       call     [Error:GetParamName(String,int):String]
       ; gcrRegs -[rcx]
       mov      rbx, rax
       ; gcrRegs +[rbx]
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x607
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       mov      rcx, rax
       ; gcrRegs +[rcx]
       mov      rdx, r14
       ; gcrRegs +[rdx]
       call     [SR:Format(String,Object):String]
       ; gcrRegs -[rcx rdx r14]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      r8, rbx
       ; gcrRegs +[r8]
       call     [ArgumentException:.ctor(String,String):this]
       ; gcrRegs -[rax rcx rdx rbx r8]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
						;; size=117 bbWeight=0    PerfScore 0.00
G_M51743_IG76:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0xFC7
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     [ArgumentException:.ctor(String):this]
       ; gcrRegs -[rax rcx rdx]
       mov      rcx, rdi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rdi]
						;; size=67 bbWeight=0    PerfScore 0.00
G_M51743_IG77:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       ; gcrRegs +[rsi r14]
       ; byrRegs +[rbx]
       xor      eax, eax
       jmp      G_M51743_IG40
						;; size=7 bbWeight=0    PerfScore 0.00
G_M51743_IG78:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [rsi]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       jmp      G_M51743_IG52
						;; size=18 bbWeight=0    PerfScore 0.00
G_M51743_IG79:        ; gcrefRegs=00004040 {rsi r14}, byrefRegs=00000008 {rbx}, byref
       mov      rcx, r14
       ; gcrRegs +[rcx]
       mov      rax, qword ptr [r14]
       mov      rax, qword ptr [rax+70H]
       call     [rax+28H]hackishModuleName:hackishMethodName()
       ; gcrRegs -[rcx]
       jmp      G_M51743_IG53
						;; size=18 bbWeight=0    PerfScore 0.00
G_M51743_IG80:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rsi r14]
       ; byrRegs -[rbx]
       call     CORINFO_HELP_RNGCHKFAIL
       int3     
						;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 2590, prolog size 33, PerfScore 448.69, instruction count 604, allocated bytes for code 2590 (MethodHash=cb7d35e0) for method Expression:ValidateLambdaArgs(Type,byref,ReadOnlyCollection`1,String)
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x13
  CountOfUnwindCodes: 10
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x13 UnwindOp: UWOP_ALLOC_LARGE (1)     OpInfo: 0 - Scaled small  
      Size: 17 * 8 = 136 = 0x00088
    CodeOffset: 0x0C UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x0B UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x0A UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x09 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r12 (12)
    CodeOffset: 0x07 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r13 (13)
    CodeOffset: 0x05 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)

; Assembly listing for method StringBuilder:MakeRoom(int,int,byref,byref,bool):this
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; rsp based frame
; fully interruptible
; No matching PGO data
; 0 inlinees with PGO data; 13 single block inlinees; 12 inlinees without PGO data
; Final local variable assignments
;
;  V00 this         [V00,T11] (  6,  6   )     ref  ->  [rsp+60H]   this class-hnd single-def
;  V01 arg1         [V01,T10] (  5,  8   )     int  ->  rbx         single-def
;  V02 arg2         [V02,T04] ( 15, 16.50)     int  ->  rdi         single-def
;  V03 arg3         [V03,T00] ( 18, 29   )   byref  ->  rsi         single-def
;  V04 arg4         [V04,T12] (  7,  7.50)   byref  ->  rbp         single-def
;  V05 arg5         [V05,T46] (  1,  1   )    bool  ->  [rsp+88H]   single-def
;  V06 loc0         [V06,T26] (  5,  2.50)     ref  ->  r15         class-hnd exact single-def
;  V07 loc1         [V07,T13] ( 11,  5.50)     int  ->  rbx        
;  V08 loc2         [V08,T01] (  8, 25   )     int  ->  rcx        
;  V09 loc3         [V09,T19] (  6,  3   )     int  ->  r14        
;* V10 loc4         [V10    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op
;  V11 OutArgs      [V11    ] (  1,  1   )  lclBlk (32) [rsp+00H]   "OutgoingArgSpace"
;  V12 tmp1         [V12,T47] (  3,  0   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V13 tmp2         [V13,T02] (  3, 24   )     ref  ->  rdx         class-hnd "dup spill"
;  V14 tmp3         [V14,T21] (  3,  3   )     ref  ->  r15         class-hnd exact single-def "NewObj constructor temp"
;  V15 tmp4         [V15,T22] (  3,  3   )     ref  ->  rdx         class-hnd single-def "dup spill"
;* V16 tmp5         [V16    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V17 tmp6         [V17    ] (  0,  0   )  struct (16) zero-ref    "struct address for call/obj"
;* V18 tmp7         [V18    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V19 tmp8         [V19    ] (  0,  0   )  struct (16) zero-ref    "struct address for call/obj"
;  V20 tmp9         [V20,T05] (  2, 16   )     ref  ->  rdx         class-hnd "Strict ordering of exceptions for Array store"
;  V21 tmp10        [V21,T06] (  2, 16   )     int  ->  rax         "Strict ordering of exceptions for Array store"
;  V22 tmp11        [V22,T23] (  3,  3   )     ref  ->  rcx         class-hnd single-def "dup spill"
;  V23 tmp12        [V23,T36] (  3,  1.50)     int  ->  r14         "Inline return value spill temp"
;  V24 tmp13        [V24,T37] (  3,  1.50)     int  ->  rbx         "Inline return value spill temp"
;  V25 tmp14        [V25,T24] (  3,  3   )     int  ->  rbx         "Inlining Arg"
;  V26 tmp15        [V26,T14] (  4,  4   )     ref  ->   r8         class-hnd single-def "Inlining Arg"
;  V27 tmp16        [V27,T15] (  4,  4   )     ref  ->   r8         class-hnd single-def "Inlining Arg"
;* V28 tmp17        [V28    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V29 tmp18        [V29    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V30 tmp19        [V30    ] (  0,  0   )     int  ->  zero-ref    "impAppendStmt"
;* V31 tmp20        [V31    ] (  0,  0   )   byref  ->  zero-ref    single-def "Inlining Arg"
;* V32 tmp21        [V32    ] (  0,  0   )   byref  ->  zero-ref    single-def "Inlining Arg"
;  V33 tmp22        [V33,T29] (  2,  2   )    long  ->   r8         "Inlining Arg"
;* V34 tmp23        [V34    ] (  0,  0   )    long  ->  zero-ref    "Inlining Arg"
;  V35 tmp24        [V35,T16] (  4,  4   )     ref  ->  rcx         class-hnd single-def "Inlining Arg"
;  V36 tmp25        [V36,T17] (  4,  4   )     ref  ->   r8         class-hnd single-def "Inlining Arg"
;* V37 tmp26        [V37    ] (  0,  0   )  struct (16) zero-ref    "NewObj constructor temp"
;* V38 tmp27        [V38    ] (  0,  0   )  struct (16) zero-ref    ld-addr-op "Inlining Arg"
;* V39 tmp28        [V39    ] (  0,  0   )     int  ->  zero-ref    "impAppendStmt"
;* V40 tmp29        [V40    ] (  0,  0   )   byref  ->  zero-ref    single-def "Inlining Arg"
;* V41 tmp30        [V41    ] (  0,  0   )   byref  ->  zero-ref    single-def "Inlining Arg"
;  V42 tmp31        [V42,T30] (  2,  2   )    long  ->   r8         "Inlining Arg"
;* V43 tmp32        [V43    ] (  0,  0   )    long  ->  zero-ref    "Inlining Arg"
;  V44 tmp33        [V44,T27] (  4,  2   )   byref  ->  rdx         V10._reference(offs=0x00) P-INDEP "field V10._reference (fldOffset=0x0)"
;  V45 tmp34        [V45,T20] (  6,  3   )     int  ->  rax         V10._length(offs=0x08) P-INDEP "field V10._length (fldOffset=0x8)"
;  V46 tmp35        [V46,T31] (  3,  1.50)   byref  ->  rdx         V16._reference(offs=0x00) P-INDEP "field V16._reference (fldOffset=0x0)"
;  V47 tmp36        [V47,T38] (  3,  1.50)     int  ->  rax         V16._length(offs=0x08) P-INDEP "field V16._length (fldOffset=0x8)"
;  V48 tmp37        [V48,T42] (  2,  1   )   byref  ->  rcx         single-def V17._reference(offs=0x00) P-INDEP "field V17._reference (fldOffset=0x0)"
;* V49 tmp38        [V49    ] (  0,  0   )     int  ->  zero-ref    V17._length(offs=0x08) P-INDEP "field V17._length (fldOffset=0x8)"
;  V50 tmp39        [V50,T32] (  3,  1.50)   byref  ->  rdx         V18._reference(offs=0x00) P-INDEP "field V18._reference (fldOffset=0x0)"
;  V51 tmp40        [V51,T39] (  3,  1.50)     int  ->  rax         V18._length(offs=0x08) P-INDEP "field V18._length (fldOffset=0x8)"
;  V52 tmp41        [V52,T43] (  2,  1   )   byref  ->  rcx         single-def V19._reference(offs=0x00) P-INDEP "field V19._reference (fldOffset=0x0)"
;* V53 tmp42        [V53    ] (  0,  0   )     int  ->  zero-ref    V19._length(offs=0x08) P-INDEP "field V19._length (fldOffset=0x8)"
;  V54 tmp43        [V54,T33] (  3,  1.50)   byref  ->  rcx         V28._reference(offs=0x00) P-INDEP "field V28._reference (fldOffset=0x0)"
;  V55 tmp44        [V55,T40] (  3,  1.50)     int  ->   r9         V28._length(offs=0x08) P-INDEP "field V28._length (fldOffset=0x8)"
;  V56 tmp45        [V56,T44] (  2,  1   )   byref  ->  rcx         single-def V29._reference(offs=0x00) P-INDEP "field V29._reference (fldOffset=0x0)"
;* V57 tmp46        [V57    ] (  0,  0   )     int  ->  zero-ref    V29._length(offs=0x08) P-INDEP "field V29._length (fldOffset=0x8)"
;  V58 tmp47        [V58,T34] (  3,  1.50)   byref  ->  rcx         V37._reference(offs=0x00) P-INDEP "field V37._reference (fldOffset=0x0)"
;  V59 tmp48        [V59,T41] (  3,  1.50)     int  ->   r9         V37._length(offs=0x08) P-INDEP "field V37._length (fldOffset=0x8)"
;  V60 tmp49        [V60,T45] (  2,  1   )   byref  ->  rcx         single-def V38._reference(offs=0x00) P-INDEP "field V38._reference (fldOffset=0x0)"
;* V61 tmp50        [V61    ] (  0,  0   )     int  ->  zero-ref    V38._length(offs=0x08) P-INDEP "field V38._length (fldOffset=0x8)"
;  V62 tmp51        [V62,T48] (  2,  0   )     ref  ->  rdi         single-def "argument with side effect"
;  V63 tmp52        [V63,T49] (  2,  0   )     ref  ->   r8         single-def "argument with side effect"
;  V64 tmp53        [V64,T03] (  3, 24   )     ref  ->  rax         "arr expr"
;  V65 cse0         [V65,T25] (  3,  3   )     int  ->  rdx         "CSE - moderate"
;  V66 cse1         [V66,T07] (  3, 12   )     ref  ->  rax         "CSE - aggressive"
;  V67 cse2         [V67,T28] (  4,  2   )     int  ->  rcx         "CSE - moderate"
;  V68 cse3         [V68,T35] (  3,  1.50)     ref  ->   r8         "CSE - moderate"
;  V69 cse4         [V69,T08] (  3, 12   )     int  ->   r8         "CSE - aggressive"
;  V70 cse5         [V70,T09] (  3, 12   )     int  ->   r9         "CSE - aggressive"
;  V71 cse6         [V71,T18] (  6,  3   )     ref  ->  rbx         "CSE - moderate"
;
; Lcl frame size = 40

G_M21914_IG01:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
       push     r15
       push     r14
       push     rdi
       push     rsi
       push     rbp
       push     rbx
       sub      rsp, 40
       mov      ebx, edx
       mov      edi, r8d
       mov      rsi, r9
       ; byrRegs +[rsi]
       mov      rbp, bword ptr [rsp+80H]
       ; byrRegs +[rbp]
						;; size=28 bbWeight=1    PerfScore 8.00
G_M21914_IG02:        ; gcrefRegs=00000002 {rcx}, byrefRegs=00000060 {rbp rsi}, byref, isz, align
       ; gcrRegs +[rcx]
       mov      edx, edi
       add      edx, dword ptr [rcx+1CH]
       add      edx, dword ptr [rcx+18H]
       mov      gword ptr [rsp+60H], rcx
       ; GC ptr vars +{V00}
       cmp      edx, dword ptr [rcx+20H]
       jg       G_M21914_IG24
       cmp      edx, edi
       jl       G_M21914_IG24
       mov      rdx, gword ptr [rsp+60H]
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs -[rcx]
       ; byrRegs +[rcx]
       ; GC ptr vars -{V00}
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       mov      rdx, gword ptr [rsi]
       ; gcrRegs +[rdx]
       cmp      dword ptr [rdx+1CH], ebx
       jle      SHORT G_M21914_IG04
       align    [1 bytes for IG03]
						;; size=52 bbWeight=1    PerfScore 21.00
G_M21914_IG03:        ; gcrefRegs=00000000 {}, byrefRegs=00000060 {rbp rsi}, loop=IG03, byref, isz
       ; gcrRegs -[rdx]
       mov      rdx, gword ptr [rsi]
       ; gcrRegs +[rdx]
       add      dword ptr [rdx+1CH], edi
       mov      rdx, gword ptr [rsi]
       mov      rdx, gword ptr [rdx+10H]
       mov      rcx, rsi
       ; byrRegs +[rcx]
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       mov      rcx, gword ptr [rsi]
       ; gcrRegs +[rcx]
       cmp      dword ptr [rcx+1CH], ebx
       jg       SHORT G_M21914_IG03
						;; size=29 bbWeight=4    PerfScore 65.00
G_M21914_IG04:        ; gcrefRegs=00000000 {}, byrefRegs=00000060 {rbp rsi}, byref
       ; gcrRegs -[rcx]
       mov      rcx, gword ptr [rsi]
       ; gcrRegs +[rcx]
       sub      ebx, dword ptr [rcx+1CH]
       mov      dword ptr [rbp], ebx
       cmp      byte  ptr [rsp+88H], 0
       jne      SHORT G_M21914_IG09
						;; size=19 bbWeight=1    PerfScore 9.00
G_M21914_IG05:        ; gcrefRegs=00000000 {}, byrefRegs=00000060 {rbp rsi}, byref, isz
       ; gcrRegs -[rcx]
       mov      rbx, gword ptr [rsi]
       ; gcrRegs +[rbx]
       mov      ecx, dword ptr [rbx+18H]
       cmp      ecx, 32
       jg       SHORT G_M21914_IG09
       mov      rax, gword ptr [rbx+08H]
       ; gcrRegs +[rax]
       mov      eax, dword ptr [rax+08H]
       ; gcrRegs -[rax]
       sub      eax, ecx
       cmp      eax, edi
       jl       SHORT G_M21914_IG09
       cmp      ecx, dword ptr [rbp]
       jle      SHORT G_M21914_IG07
       align    [0 bytes for IG06]
						;; size=29 bbWeight=0.50 PerfScore 7.38
G_M21914_IG06:        ; gcrefRegs=00000000 {}, byrefRegs=00000060 {rbp rsi}, loop=IG06, byref, isz
       ; gcrRegs -[rbx]
       dec      ecx
       mov      rax, gword ptr [rsi]
       ; gcrRegs +[rax]
       mov      rax, gword ptr [rax+08H]
       mov      rdx, rax
       ; gcrRegs +[rdx]
       mov      r8d, dword ptr [rax+08H]
       cmp      ecx, r8d
       jae      G_M21914_IG27
       mov      r9d, ecx
       movzx    rax, word  ptr [rax+2*r9+10H]
       ; gcrRegs -[rax]
       lea      r9d, [rcx+rdi]
       cmp      r9d, r8d
       jae      G_M21914_IG27
       mov      r8d, r9d
       mov      word  ptr [rdx+2*r8+10H], ax
       cmp      ecx, dword ptr [rbp]
       jg       SHORT G_M21914_IG06
						;; size=61 bbWeight=4    PerfScore 68.00
G_M21914_IG07:        ; gcrefRegs=00000000 {}, byrefRegs=00000040 {rsi}, byref
       ; gcrRegs -[rdx]
       ; byrRegs -[rbp]
       mov      rcx, gword ptr [rsi]
       ; gcrRegs +[rcx]
       add      dword ptr [rcx+18H], edi
						;; size=6 bbWeight=0.50 PerfScore 2.50
G_M21914_IG08:        ; , epilog, nogc, extend
       add      rsp, 40
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r14
       pop      r15
       ret      
						;; size=13 bbWeight=0.50 PerfScore 2.12
G_M21914_IG09:        ; gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000060 {rbp rsi}, gcvars, byref, isz
       ; gcrRegs -[rcx]
       ; byrRegs +[rbp]
       cmp      edi, 16
       jge      SHORT G_M21914_IG10
       mov      r14d, 16
       jmp      SHORT G_M21914_IG11
						;; size=13 bbWeight=0.50 PerfScore 1.75
G_M21914_IG10:        ; gcrefRegs=00000000 {}, byrefRegs=00000060 {rbp rsi}, byref
       mov      r14d, edi
						;; size=3 bbWeight=0.50 PerfScore 0.12
G_M21914_IG11:        ; gcrefRegs=00000000 {}, byrefRegs=00000060 {rbp rsi}, byref, isz
       mov      rcx, 0xD1FFAB1E      ; StringBuilder
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      r15, rax
       ; gcrRegs +[r15]
       mov      rbx, gword ptr [rsi]
       ; gcrRegs +[rbx]
       mov      r8d, dword ptr [rbx+20H]
       mov      r9, gword ptr [rbx+10H]
       ; gcrRegs +[r9]
       mov      rcx, r15
       ; gcrRegs +[rcx]
       mov      edx, r14d
       call     [StringBuilder:.ctor(int,int,StringBuilder):this]
       ; gcrRegs -[rax rcx rbx r9]
       ; gcr arg pop 0
       mov      dword ptr [r15+18H], edi
       mov      ebx, dword ptr [rbp]
       cmp      edi, ebx
       jle      SHORT G_M21914_IG12
       jmp      SHORT G_M21914_IG13
						;; size=54 bbWeight=0.50 PerfScore 8.62
G_M21914_IG12:        ; gcrefRegs=00008000 {r15}, byrefRegs=00000060 {rbp rsi}, byref
       mov      ebx, edi
						;; size=2 bbWeight=0.50 PerfScore 0.12
G_M21914_IG13:        ; gcrefRegs=00008000 {r15}, byrefRegs=00000060 {rbp rsi}, byref, isz
       test     ebx, ebx
       jle      G_M21914_IG22
       mov      r8, gword ptr [rsi]
       ; gcrRegs +[r8]
       mov      r8, gword ptr [r8+08H]
       test     r8, r8
       jne      SHORT G_M21914_IG14
       test     ebx, ebx
       jne      G_M21914_IG25
       xor      rdx, rdx
       ; byrRegs +[rdx]
       xor      eax, eax
       jmp      SHORT G_M21914_IG15
						;; size=34 bbWeight=0.50 PerfScore 5.12
G_M21914_IG14:        ; gcrefRegs=00008100 {r8 r15}, byrefRegs=00000060 {rbp rsi}, byref
       ; byrRegs -[rdx]
       cmp      dword ptr [r8+08H], ebx
       jb       G_M21914_IG25
       lea      rdx, bword ptr [r8+10H]
       ; byrRegs +[rdx]
       mov      eax, ebx
						;; size=16 bbWeight=0.50 PerfScore 2.38
G_M21914_IG15:        ; gcrefRegs=00008000 {r15}, byrefRegs=00000064 {rdx rbp rsi}, byref, isz
       ; gcrRegs -[r8]
       mov      r8, gword ptr [r15+08H]
       ; gcrRegs +[r8]
       test     r8, r8
       jne      SHORT G_M21914_IG16
       xor      rcx, rcx
       ; byrRegs +[rcx]
       xor      r9d, r9d
       jmp      SHORT G_M21914_IG17
						;; size=16 bbWeight=0.50 PerfScore 2.88
G_M21914_IG16:        ; gcrefRegs=00008100 {r8 r15}, byrefRegs=00000064 {rdx rbp rsi}, byref
       ; byrRegs -[rcx]
       lea      rcx, bword ptr [r8+10H]
       ; byrRegs +[rcx]
       mov      r9d, dword ptr [r8+08H]
						;; size=8 bbWeight=0.50 PerfScore 1.25
G_M21914_IG17:        ; gcrefRegs=00008000 {r15}, byrefRegs=00000066 {rcx rdx rbp rsi}, byref, isz
       ; gcrRegs -[r8]
       cmp      eax, r9d
       ja       G_M21914_IG26
       mov      r8d, eax
       add      r8, r8
       call     [hackishModuleName:hackishMethodName()]
       ; byrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      r14d, dword ptr [rbp]
       sub      r14d, ebx
       js       SHORT G_M21914_IG22
       mov      r8, gword ptr [rsi]
       ; gcrRegs +[r8]
       mov      r8, gword ptr [r8+08H]
       mov      rcx, r8
       ; gcrRegs +[rcx]
       test     rcx, rcx
       jne      SHORT G_M21914_IG18
       mov      ecx, ebx
       ; gcrRegs -[rcx]
       or       ecx, r14d
       jne      G_M21914_IG25
       xor      rdx, rdx
       ; byrRegs +[rdx]
       xor      eax, eax
       jmp      SHORT G_M21914_IG19
						;; size=62 bbWeight=0.50 PerfScore 8.75
G_M21914_IG18:        ; gcrefRegs=00008102 {rcx r8 r15}, byrefRegs=00000060 {rbp rsi}, byref
       ; gcrRegs +[rcx]
       ; byrRegs -[rdx]
       mov      edx, ebx
       mov      eax, r14d
       add      rdx, rax
       mov      eax, dword ptr [rcx+08H]
       cmp      rdx, rax
       ja       G_M21914_IG25
       mov      edx, ebx
       lea      rdx, bword ptr [rcx+2*rdx+10H]
       ; byrRegs +[rdx]
       mov      eax, r14d
						;; size=30 bbWeight=0.50 PerfScore 2.75
G_M21914_IG19:        ; gcrefRegs=00008100 {r8 r15}, byrefRegs=00000064 {rdx rbp rsi}, byref, isz
       ; gcrRegs -[rcx]
       test     r8, r8
       jne      SHORT G_M21914_IG20
       xor      rcx, rcx
       ; byrRegs +[rcx]
       xor      r9d, r9d
       jmp      SHORT G_M21914_IG21
						;; size=12 bbWeight=0.50 PerfScore 1.88
G_M21914_IG20:        ; gcrefRegs=00008100 {r8 r15}, byrefRegs=00000064 {rdx rbp rsi}, byref
       ; byrRegs -[rcx]
       lea      rcx, bword ptr [r8+10H]
       ; byrRegs +[rcx]
       mov      r9d, dword ptr [r8+08H]
						;; size=8 bbWeight=0.50 PerfScore 1.25
G_M21914_IG21:        ; gcrefRegs=00008000 {r15}, byrefRegs=00000066 {rcx rdx rbp rsi}, byref
       ; gcrRegs -[r8]
       cmp      eax, r9d
       ja       G_M21914_IG26
       mov      r8d, eax
       add      r8, r8
       call     [hackishModuleName:hackishMethodName()]
       ; byrRegs -[rcx rdx]
       ; gcr arg pop 0
       mov      dword ptr [rbp], r14d
						;; size=25 bbWeight=0.50 PerfScore 2.88
G_M21914_IG22:        ; gcrefRegs=00008000 {r15}, byrefRegs=00000060 {rbp rsi}, byref, isz
       mov      rdx, gword ptr [rsi]
       ; gcrRegs +[rdx]
       lea      rcx, bword ptr [rdx+10H]
       ; byrRegs +[rcx]
       mov      rdx, r15
       call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx]
       ; byrRegs -[rcx]
       mov      rdx, gword ptr [rsi]
       ; gcrRegs +[rdx]
       add      dword ptr [rdx+1CH], edi
       cmp      ebx, edi
       jge      SHORT G_M21914_IG23
       mov      rcx, rsi
       ; byrRegs +[rcx]
       mov      rdx, r15
       call     CORINFO_HELP_CHECKED_ASSIGN_REF
       ; gcrRegs -[rdx r15]
       ; byrRegs -[rcx rsi]
       mov      dword ptr [rbp], ebx
						;; size=39 bbWeight=0.50 PerfScore 6.25
G_M21914_IG23:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, epilog, nogc
       ; byrRegs -[rbp]
       add      rsp, 40
       pop      rbx
       pop      rbp
       pop      rsi
       pop      rdi
       pop      r14
       pop      r15
       ret      
						;; size=13 bbWeight=0.50 PerfScore 2.12
G_M21914_IG24:        ; gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       mov      rcx, 0xD1FFAB1E      ; ArgumentOutOfRangeException
       call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
       mov      rsi, rax
       ; gcrRegs +[rsi]
       mov      ecx, 0x17945
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rdi, rax
       ; gcrRegs +[rdi]
       mov      ecx, 0xA481
       mov      rdx, 0xD1FFAB1E
       call     CORINFO_HELP_STRCNS
       ; gcr arg pop 0
       mov      rcx, rax
       ; gcrRegs +[rcx]
       call     [hackishModuleName:hackishMethodName(String):String]
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
       mov      r8, rax
       ; gcrRegs +[r8]
       mov      rdx, rdi
       ; gcrRegs +[rdx]
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     [ArgumentOutOfRangeException:.ctor(String,String):this]
       ; gcrRegs -[rax rcx rdx rdi r8]
       ; gcr arg pop 0
       mov      rcx, rsi
       ; gcrRegs +[rcx]
       call     CORINFO_HELP_THROW
       ; gcrRegs -[rcx rsi]
       ; gcr arg pop 0
						;; size=93 bbWeight=0    PerfScore 0.00
G_M21914_IG25:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       call     [ThrowHelper:ThrowArgumentOutOfRangeException()]
       ; gcr arg pop 0
       int3     
						;; size=7 bbWeight=0    PerfScore 0.00
G_M21914_IG26:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       call     [ThrowHelper:ThrowArgumentException_DestinationTooShort()]
       ; gcr arg pop 0
       int3     
						;; size=7 bbWeight=0    PerfScore 0.00
G_M21914_IG27:        ; gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
       call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
       int3     
						;; size=6 bbWeight=0    PerfScore 0.00

; Total bytes of code 685, prolog size 28, PerfScore 300.03, instruction count 206, allocated bytes for code 689 (MethodHash=4184aa65) for method StringBuilder:MakeRoom(int,int,byref,byref,bool):this
; ============================================================

Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x0C
  CountOfUnwindCodes: 7
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x0C UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 4 * 8 + 8 = 40 = 0x28
    CodeOffset: 0x08 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x07 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x05 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r15 (15)
